[
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "R & Socio Econ",
    "section": "",
    "text": "Rのデータ処理には，統合開発環境のデファクト・スタンダードとも言うべきRStudioが欠かせません。以下の図はスクリプト・エジターを開いたときのRStudioの画面です。\n\n\n\nsource: Wickham, et al. (2023) p.86\n\n\n左側の[Editor]画面と[Console]画面が作業場となります。Rになれると，ほとんどの作業が[Editor]画面でのスクリプトの記述に費やされることと思います。",
    "crumbs": [
      "1. RStudio, tidyverseを使う"
    ]
  },
  {
    "objectID": "introduction.html#rstudioを使う",
    "href": "introduction.html#rstudioを使う",
    "title": "R & Socio Econ",
    "section": "",
    "text": "Rのデータ処理には，統合開発環境のデファクト・スタンダードとも言うべきRStudioが欠かせません。以下の図はスクリプト・エジターを開いたときのRStudioの画面です。\n\n\n\nsource: Wickham, et al. (2023) p.86\n\n\n左側の[Editor]画面と[Console]画面が作業場となります。Rになれると，ほとんどの作業が[Editor]画面でのスクリプトの記述に費やされることと思います。",
    "crumbs": [
      "1. RStudioを使う"
    ]
  },
  {
    "objectID": "introduction.html#rstudioのプロジェクト管理機能",
    "href": "introduction.html#rstudioのプロジェクト管理機能",
    "title": "R & Socio Econ",
    "section": "1.1. RStudioのプロジェクト管理機能",
    "text": "1.1. RStudioのプロジェクト管理機能\nRを利用し，レポートを作成するとき，データ，スクリプト，グラフなどが増えて行きます．そうしたデータ等が増えていくと，ファイルを整理し，まとめていくのが大変になって行きます．RStudioにはデータ管理はもちろんのことプロジェクト全体を管理するのに便利なProjectと呼ばれる機能が用意されています．そこで最初に，データを扱う上で有益なRStudioのProject機能を紹介します．\nProject機能を利用すると，プロジェクトごとに，作業ディレクトリの場所，実行の履歴やオブジェクト（変数や関数），スクリプトなどが記憶されます．作業の再開時に，プロジェクトを開くとすぐにプロジェクトごとの以前の環境が利用でき便利です．\nそれではRStudioでProjectを作成してみましょう．Projectの作成は，メニューから，File &gt; New Project…をクリックします．新しいプロジェクトNew Projectのためのディレクトリ名を尋ねるダイアログが開きます．\n\n\n\nsource: Wickham, et al. (2023) p. 92\n\n\n[Directory name]の空欄のボックスに，新規プロジェクトを作成するディレクトリ名を入力します．この例ではとりあえずr４dsという名前がつけられています。[Browse…]ボタンをクリックして，プロジェクトを置きたいディレクトリの場所を指定します．すると，新たに作ったプロジェクト用のディレクトリの下に，ディレクトリと同じ名前のプロジェクトができます．この例では“~/r４ds/”下に“r４ds.Rproj”ができます．次回の作業からは，RStudioのメニューからFile &gt; Open Project…または，直接，ディレクトリを開いて，プロジェクト[r4ds.Rproj]をダブルクリックすれば，r4dsの環境が再現されます．\nちなみに，r4ds.Rprojをクリックし，RStuidoを起動させた後，コンソール画面にgetwd()―get working directory（現在の作業ディレクトリを取得する）を意味します―と入力し，現在の作業ディレクトリを確認してみてください．“~/r4ds/”と表示されるはずです．\n\n  getwd ()  #現在の作業ディレクトリの場所を確認",
    "crumbs": [
      "1. RStudio, tidyverseを使う"
    ]
  },
  {
    "objectID": "introduction.html#tidyverse",
    "href": "introduction.html#tidyverse",
    "title": "R & Socio Econ",
    "section": "1.2. tidyverse",
    "text": "1.2. tidyverse\nRでデータを処理を行うさい，頻繁に利用することになるtidyverseについてここで簡単に触れておきます. tidyverseおよび基本的なデータ処理についてはHadley Wickham, et al. (2023) R for Data Sciense: Import, Tidy, Trsnform, Visualize, and Model Data, second editionを読むことをお勧めします。また宋・矢内氏による「わたしたちのR: ベストプラクティスの探求」もお勧めのWebテキストです。\n最初に，tidyverseをインストールし，利用できるようにしておきます。\n\ninstall.packages(\"tidyverse\") #tidyverseのインストール\nlibrary(tidyverse)     #tidyverseの読み込み\n\ntidyverseの中に収められているデータ操作・処理のための基本的な関数は次の３つです。\n\n特定の行（観察値）を抽出する - filter( )\n特定の列（変数）を抽出する - select( )\n処理をつなげる - パイプ演算子 |&gt;\n\n\n1.2.1 特定の行を抽出する - filter( )関数\ntidyverseの中には練習用のデータflightsが用意されています。\n\nlibrary(nycflights13)       #データflightsを利用可能にする\n\nコンソール画面にflightsとタイプすると以下の図が表示されます。\n\nこのデータフレームdataframe（正確にはtibble）の中には2013年にニューヨーク市から飛び立った336,776のフライトデータが収められています。左上の# A tibble: 336,776×19という表示は「このデータセットtibbleが336,776の行（フライトの観察値）と19の列（変数）を持っている」ことを示しています。すべての列（変数）を表示させるにはglimpse()を使うことができます。\n\nglimpse(flights)\n\n\n図にはすべて表示されて言いませんが，Rows: 336,776とColumns: 19という左上の表示から列（変数）がyear, month, day, dep_timeなど19変数があることが理解されます。\nfilter()は行（観察値）にもとづいて特定の行を抽出します。たとえば，2時間以上の遅れで出発したフライトを抽出してみましょう。\n\nfilter(flights, dep_delay &gt; 120)\n\n\nフライトの遅れはdep_delay変数が示しています。その中の2時間以上の遅れですから，抽出条件はdep_delay &gt; 120です。この結果，抽出されたフライトは9,723に減少しています。このようにfilter( )関数は第1の引数にデータフレー名（tibble名），第2の引数に抽出条件をとります。\n\nfilter(dataframe名, 抽出条件)\n\n\n\n1.2.2 特定の列を抽出する - select( )関数\n次に特定の列，すなわち変数を抽出します。このためにはselect( )関数を利用します。\n\nselect(dataframe名, 抽出する変数名)\n\nたとえば，データflightsからyear, month, dayの３つの列（変数）だけ取り出すとしましょう。\n\nselect(flights, year,month, day)\n\nこれを実行すると，列（変数）が3つだけのデータtibbleが作成されます。\n\n\n1.2.2 処理をつなげる - パイプ演算子 |&gt;\nデータflightsに対して次のような一連のデータ処理を行うことを考えてみます.\n\ndep_delay変数のうち2時間遅れのフライト行だけを取り出す.\nさらにその結果から変数day, dest（行先の空港名）およびdep_dalayだけを取り出す.\n\n1の処理はデータフflightsに対してfilter()関数を適用すること, 言いかえると、データflightsをfilter()関数に渡す、ということになります.この一連の処理をパイプ(|&gt;)というものを使うと次のように表現できます.\n\nflights |&gt; \n  filter(dep_delay &gt; 120)\n\n注意して欲しいのですが，ここでは一連の操作が|&gt;で結合されていますので，filter( )関数の中にdataframe（tibble）名を入力する必要がなくなります。2の処理はこの結果をさらに，select( )関数に渡すことになります。\n\nflights |&gt; \n filter(dep_delay &gt; 120) |&gt; \n select(day,dest, dep_delay)\n\nこのスクリプトの|&gt;はパイプと呼ばれ，操作を連結するものです.日本語で言えば「そして」ということになるでしょうか1.パイプは頻繁に利用しますので，ショートカットを覚えておくことをお勧めします。Ctr/Cmd + Shift + Mです。",
    "crumbs": [
      "1. RStudio, tidyverseを使う"
    ]
  },
  {
    "objectID": "introduction.html#footnotes",
    "href": "introduction.html#footnotes",
    "title": "R & Socio Econ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nパイプ演算子のとても分かり易いイメージが宋財泫 (Jaehyun Song)・矢内勇生 (Yuki Yanai)氏の「私たちのR: ベストプラクティスの探究」において与えられています.↩︎",
    "crumbs": [
      "1. RStudio, tidyverseを使う"
    ]
  },
  {
    "objectID": "micro.html",
    "href": "micro.html",
    "title": "R & Socio Econ",
    "section": "",
    "text": "ミクロレベルのデータベースとして本資料で取り上げるのは以下の3つのデータベースです。\n\nEuropean Commission’s Industrial R&D Investment Scoreboard: iriR\nGeneral Social Survey: gasser\nEuropean Social Survey: essurvey\nPew Research: pewmethods\n\n１のデータベースを除き，2~3のデータはサーベイデータです。",
    "crumbs": [
      "3 ミクロ・データ"
    ]
  },
  {
    "objectID": "micro.html#ミクロデータ",
    "href": "micro.html#ミクロデータ",
    "title": "R & Socio Econ",
    "section": "",
    "text": "ミクロレベルのデータベースとして本資料で取り上げるのは以下の3つのデータベースです。\n\nEuropean Commission’s Industrial R&D Investment Scoreboard: iriR\nGeneral Social Survey: gasser\nEuropean Social Survey: essurvey\nPew Research: pewmethods\n\n１のデータベースを除き，2~3のデータはサーベイデータです。",
    "crumbs": [
      "3 ミクロ・データ"
    ]
  },
  {
    "objectID": "micro.html#european-commissions-industrial-rd-investment-scoreboard---irir",
    "href": "micro.html#european-commissions-industrial-rd-investment-scoreboard---irir",
    "title": "R & Socio Econ",
    "section": "3.1 European Commission’s Industrial R&D Investment Scoreboard - iriR",
    "text": "3.1 European Commission’s Industrial R&D Investment Scoreboard - iriR\nRパッケージiriRによって、欧州委員会の産業R&D投資スコアボード（European Commission’s Industrial R&D Investment Scoreboard: IRI）に簡単にアクセスすることができます。IRIスコアボードは、イノベーションに関する企業レベルのデータをまとめたものです。毎年、世界の上位1,000社が実施した研究開発投資が掲載されています。\nこのプロジェクトは、欧州委員会の共同研究センター（JRC）の7つの科学機関のうちの1つである成長とイノベーションの部門（Directorate B of Growth and Innovation）で実施されています。\niriRは、そうしたIRIスコアボードのデータへのアクセスを容易にし、毎年のスコアボードを時系列でまとめ、クロスセクション・時系列データセットを提供しています。これによってトップ1,000の革新的企業の一部、あるいは過去に革新的企業であった世界中の7,500以上の革新的企業のデータ－国、年、企業名、産業、指標、企業のランク）にアクセスすることができます。\n指標の定義については、EU ScoreBordの報告書The 2022 EU INDUSTRIAL R&D INVESTMENT SCOREBOARDを参照してください。\n\n3.1.1 iriRのインストール\niriRは現在開発版のみ利用可能のようですので開発者のGithubサイトから最新版をインストールします。\n\ninstall.packages(\"remotes\")\nremotes::install_github(\"warint/iriR\") # iriRのインストール\n\n# iriRのロード\nlibrary(iriR)\n\nこれでiriRが利用可能となります。\n\n\n3.1.2 iriRの利用方法\nIRIスコアボードの提供するデータを取得するするために５つの手順を踏みます：\n\nステップ1　各国のisoコードを取得する\nステップ2　指標コードを取得する\nステップ3　企業名を取得する\nステップ4　産業名を取得する\nステップ5　データを取得する\n\nステップ1　各国のisoコードを取得する\niso国別コードじたいはgoogle等で検索してもすぐに見つけることができますが、iriRパッケージでも提供されています。\n\n# すべての国の名前と3桁のisoコードの出力\nirir_country() \n\n# 特定の国－この例では日本Japan－のisoコードの出力\nirir_country(country = \"Japan\") # The ISO code for Canada will be produced\n\nステップ2　指標コードを取得する\n特定のデータを取得するためには、事前にその指標のコードを知っておく必要があります。このためにirir_indicator()関数を利用します。\n\n# すべての指標のリストを出力する\nirir_indicator() \n\nirir_indicator( )の出力結果はdata.frameですので、出力結果をView( )に渡し、すべての指標を見てみましょう。\n\nirir_indicator() |&gt; \n  View()\n\nこれによって以下のような22行×３列のデータフレームが表示されます。すなわち22の変数が収録されていることが理解されます。変数列をみると、indicator_name, indicatro_codeおよびindicator_definitionを確認することができます。それぞれの指標の内容はindicator_nameとindicator_definitionによって理解することができます。たとえば、5行目には”Research and Development(R&D) intensity”の指標を見つけることができます。\n\n\n\nirir_indicator()の出力結果\n\n\n2列目のindicator_codeが特定のデータを取得する際に利用される指標コードになります。また、irir_indicator()関数は特定の検索語を指定して指標を探すこともできます。\n\n# 指標名に\"capital\"を含んだすべての指標のリストを表示する\nirir_indicator(indicators = \"capital\") \n\nステップ3　企業情報を取得する\n特定の企業の活動を調べたいときには、irir_company( )関数によって取得することができます。\n\n# データセットに含まれるすべての企業名を出力する\nirir_company() \n\n# 特定の\"検索語（ただし企業名）\"を含むすべての企業を出力する\nirir_company(company = \"toyota\") \n\n企業数は6,662社と膨大です。そこでhead( )関数を使って冒頭だけを表示してみましょう。\n\nirir_company() |&gt; \n head()\n\n\nこれを実行すると、ALPHABET, SAMSUNG ELECTRONICS, MICROSOFTといった企業名が表示されます。なお、irir_company()の引数に企業名を指定することによって特定の企業を探すこともできます。\n\nirir_company(company = \"toyota\")\n\nステップ4 産業名を取得する\nirir_industry()関数で産業名を取得できます。結果をここでもView()関数に渡しています。主力結果をみると、産業は81産業が収録されています。\n\n# 産業名を取得し、結果をView()に渡し、結果を表示\nirir_industry() |&gt; View()\n\nステップ5 データを取得する\n以上のステップで国コード、指標コード、企業名、産業名を取得する方法を理解できたと思います。最後に、こうした情報を使ってデータを取得してみましょう。データの取得のためにはirir_data( )関数を使います。この関数は以下のように６つの引数をとります。引数が指定されない場合はすべてのデータが表示されます。\n\nirir_data(\n  country = iri_country,\n  years = iri_year,\n  indicators = iri_indicator,\n  company = iri_company,\n  industry = iri_industry,\n  ranks = iri_rank\n)\n\n\ncountry = ” ” : 国のisoコードを” “に指定します。\nyear = ” ” : 取得したい年を” “に指定します。\nindicators = ” ” : ステップ2で取得した指標コードを指定します。\ncompany = ” ” : 企業名を” “に入力し、指定します。\nindustry = ” ” : 産業名を指定します。\nranks = ” ” : ランクを指定します。\n\n最初に、引数を何も指定せずにirir_data()を実行してみましょう。これによってデータセット全体が取得できます。データが膨大ですので、head()関数を使って最初の６行だけを表示します。\n\nirir_data() |&gt; \n head()\n\n\n出力したすべてのデータを、オブジェクトに保存しておくと、のちの分析に便利かもしれません。たとえばdata_iriという名前をつけたオブジェクトに保存しておくとします。\n\ndata_iri &lt;- irir_data()\n\nこれを実行すると、IRIのデータを格納したdata_iriというオブジェクトが生み出されます。[Environment]ウィンドウをみると、8変数の801,438の観察値が確認できます。\n次に、引数を指定し、データを取得してみましょう。\n\n # 韓国企業\"サムスン\"の2020年の包括的なIRIデータを取得\n # 指標コード \"RD. euro\"\nirir_data(country = \"samsung\", years = \"2020\", indicators = \"RD.euro\", company = \"samsung\") \n\n# 2018年のアメリカとフランスの全産業の企業データを取得\nirir_data(country=c(\"JPN\"), years=\"2018\",) \n\nirir_data(years = \"2018\") # It generates a data frame of all the companies data for from all the industries for all the countries in 2018.\n\n\n\n3.2. 3 可視化 - irir_visual\n関数irir_visual( )によって、IRIにおけるイノベーションデータに関して３つのタイプのグラフを描くことができます。\nデフォルトではトップ5カ国とカナダのグラフが描かれます。引数を指定することによってグラフを変更することができます。引数chart = ” “部分に”bar_1”と異なったグラフを指定することによってデフォルトのグラフと異なったグラフを描くことができます。\n\nirir_visual(chart = \"bar_1\")\n\n\nbar_1: 代表的な国についてR&Dのリーディング企業数の棒グラフを描く\nbar_2: 代表的な国について10億USドル（対GDP）におけるR&Dリーディング企業数の棒グラフを描く\nbar_3: 代表的な国についてリーディング企業のR&D支出の棒グラフを描く\nline_1\nline_2\nline_3\nline_4\nline_5\nline_6\npoint_1",
    "crumbs": [
      "3 ミクロ・データ"
    ]
  },
  {
    "objectID": "micro.html#general-social-survey-gssr",
    "href": "micro.html#general-social-survey-gssr",
    "title": "R & Socio Econ",
    "section": "3.2 General Social Survey – gssr",
    "text": "3.2 General Social Survey – gssr\nGeneral Social Survey（GSS）は、現在、アメリカで実施されている全般的な社会調査です。現代のアメリカ社会に関するデータを収集し、これによりアメリカの人々の態度、行動、属性の傾向をモニターできます。GSSは最大80年間のトレンドを追跡することができます。\nGSSのGet the Dataではデータはstataおよびspssのフォーマットで提供されています。このためRで利用するためにgssrが開発されています。これは、General Social Surveyの累積データ（1972-2018)と３つのWaveのパネルデータをまとめたデータパッケージです。\ngssrは，複数のデータセットを便利な形式にまとめたデータパッケージです．パッケージ内のデータが比較的大きいため、開発者のGithubサイトから直接インストールします.\n\n# gssrのインストール\nremotes::install_github(\"kjhealy/gssr\")\n\n# gssrパッケージのロード\nlibrary(gssr)\n\n\n3.2.1 データの読み込み\nGSS累積データファイルはサイズが大きいため、パッケージを起動したときにデフォルトでは読み込まれません.データセットを読み込むには、data()関数を使います。\nGSSの累積データファイルはgssrに含まれていますが，それは大きくデフォルトではロードされません。この累積データを読み込むためには引数に”gss_all”を指定します。\n\ndata(\"gss_all\")\n\nRStudioの[Environment]の[Data]をみると、72,390の観察値と6,694の変数を有するデータセットgss_allが読み込まれたことが分かります.\n変数は膨大であり、これを理解するには簡単ではありません.そのためデータの変数の情報を含んだデータフレームgss_docを読みこましょう.\n\n data(\"gss_doc\")",
    "crumbs": [
      "3 ミクロ・データ"
    ]
  },
  {
    "objectID": "micro.html#european-social-survey-essurvey",
    "href": "micro.html#european-social-survey-essurvey",
    "title": "R & Socio Econ",
    "section": "3.3 European Social Survey – essurvey",
    "text": "3.3 European Social Survey – essurvey\nヨーロッパ社会調査（European Social Survey: ESS）はヨーロッパ全域で実施されている学術的なクロスナショナルな社会調査です.すでに2002年から2018年にかけて2年おきに9回のラウンド(ESS Round 1からESS Round 9)実施されています. ESSは次の表において示されているように幅広いトピックをカバーしています.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR1 (02)\n\nR2 (04)\n\nR3 (06)\n\nR4 (08)\n\nR5 (10)\n\nR6 (12)\n\nR7 (14)\n\nR8 (16)\n\nR9 (18)\n\n\n\n\nメディアと社会的信頼\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n\n\n\n主観的厚生\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n\n\n\nジェンダー、家計\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n\n\n\n社会人口統計\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n\n\n\n人々の価値観\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n○\n\n\n\n\n移民\n\n○\n\n\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n市民参加\n\n○\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n保健とケア\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n経済的道徳心\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n家族…厚生\n\n\n\n○\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n\n\n生活のタイミング\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n個人…厚生\n\n\n\n\n\n○\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n福祉に対する態度\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n高齢化\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n正義\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n\n\n民主主義\n\n\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n\n\n保健の不平等\n\n\n\n\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n\n\n気候変動に対する態度\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n\n\n正義と公正\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n○\n\n\n\n\n注:R1は第１回のラウンド,カッコ内の01は2001年を示す.以下同様.○印は調査が実施されたトピックを示す.\nessurveyパッケージは、このヨーロッパ社会調査(ESS)データを簡単にダウンロードできるように開発されたRパッケージです。このパッケージはラウンド（異なる時点での同じ調査を示す）、選択された国のラウンド、どのラウンド/国が利用可能かを表示するためのいくつかのヘルパー関数を持っています。\nessurveyパッケージの使い方は簡単です。関数には、import_*とshow_*という2つの主要なファミリーがあります.これらの関数のおかげでヨーロッパ社会調査(ESS)のウェブサイトにアクセスする必要はほとんどありません.\n\n3.2.1 事前準備-ESSの認証とインストール\n\n3.3.1.1 ESSの認証\nESSを利用するためには事前にアカウントを作成する必要があります.登録ページに入り、アカウントを作成してください。登録が完了したら、メールアカウントにアクセスしてアカウントを認証すると、データにアクセスする準備が整います。essurveyの機能の中には、メールアドレスを必要とするものがあります.\n\n\n3.3.1.2 essurveyのインストール\n\ninstall.packages(\"essurvey\")\n\nESSのデータをダウンロードするには、データをダウンロードするたびにEメールを認証する必要があります。Eメールを環境変数として設定するには、set_emailを使用します.\n\nset_email(\"自分のメールアドレス\")\n\n一度これを実行すると,上の行を削除できます.たとえばimport_*を呼び出した場合、環境変数として保存された電子メールを自動的に探します.\nESSで利用可能な国やラウンドが分からないとします.そうした場合show_* 関数群が役に立ちます.どの国が参加しているかを調べるには、show_countries()を使います。\n\nshow_countries()",
    "crumbs": [
      "3 ミクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html",
    "href": "MacroData.html",
    "title": "R & Socio Econ",
    "section": "",
    "text": "今では国際機関，政府,研究組織によって多くのデータが提供されています。そ うしたデータを取得するには，その機関・組織のサイトにアクセスし，csv,EXCEL等のファイルを直接ダウンロードすることによっても，もちろん可能です。し かし，すでに述べたように，Rには，国際機関，研究組織等の提供するデータベースからデータを取得するパッケージが多く開発されています。そうしたパッケージを利用すれば，シームレスかつ再現可能な形でのデータの読み込みが可能となります。本資料では最初に，以下のマクロ経済統計データベースをとりあげます．\n\n\n\n\n\n\n\n\nDB提供機関\nマクロデータ概要\n対応する節\n\n\n\n\nフローニンゲン大学成長・発展センター\n所得，経済発展データ等\n2.1\n\n\n世界銀行\n世界開発指標\n2.2\n\n\nEU統計局\nEUデータ（人口，経済，インフラ等）\n2.3\n\n\nEuropean Commission’s Directorate General for Economic and Financial Affairs\nAMECO マクロ経済データ\n2.4\n\n\nOECD\nOECDデータ\n2.5\n\n\nIMF\n国際金融等のデータ\n2.6\n\n\nILO\n労働統計\n2.7\n\n\nDBnomics\nデータベース集\n2.8",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#マクロデータ",
    "href": "MacroData.html#マクロデータ",
    "title": "R & Socio Econ",
    "section": "",
    "text": "今では国際機関，政府,研究組織によって多くのデータが提供されています。そ うしたデータを取得するには，その機関・組織のサイトにアクセスし，csv,EXCEL等のファイルを直接ダウンロードすることによっても，もちろん可能です。し かし，すでに述べたように，Rには，国際機関，研究組織等の提供するデータベースからデータを取得するパッケージが多く開発されています。そうしたパッケージを利用すれば，シームレスかつ再現可能な形でのデータの読み込みが可能となります。本資料では最初に，以下のマクロ経済統計データベースをとりあげます．\n\n\n\n\n\n\n\n\nDB提供機関\nマクロデータ概要\n対応する節\n\n\n\n\nフローニンゲン大学成長・発展センター\n所得，経済発展データ等\n2.1\n\n\n世界銀行\n世界開発指標\n2.2\n\n\nEU統計局\nEUデータ（人口，経済，インフラ等）\n2.3\n\n\nEuropean Commission’s Directorate General for Economic and Financial Affairs\nAMECO マクロ経済データ\n2.4\n\n\nOECD\nOECDデータ\n2.5\n\n\nIMF\n国際金融等のデータ\n2.6\n\n\nILO\n労働統計\n2.7\n\n\nDBnomics\nデータベース集\n2.8",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#groningen-growth-and-development-centre",
    "href": "MacroData.html#groningen-growth-and-development-centre",
    "title": "R & Socio Econ",
    "section": "2.1 Groningen Growth and Development Centre",
    "text": "2.1 Groningen Growth and Development Centre\n1992年にフローニンゲン大学の経済学部内に設立されたGroningen Growth and Development Centre（GGDC）は,現在ではグローバリゼーション、テクノロジー、制度的変化の相互作用と、それが長期的な経済成長、構造変化、生産性、不平等に与える影響を研究する研究センターとなっています。同センターは次のようなデータベースを公開しています。\n\n\n\n\n\n\n\n\nデータベース名\n提供データ\nRパッケージ\n\n\n\n\nPenn World Table\n所得，産出高，投入および生産性\npwt10.0\n\n\n10 Sector Database\nセクター別産出，投入，生産性\n\n\n\nWorld Input-Output Database\nグローバル・バリューチェーン\n\n\n\nThe Maddison Project Database\n歴史的発展\nmaddison\n\n\n\nこのうちRパッケージが開発されている２つのデータベース-Penn World TableとThe Maddison Project Database-を紹介しましょう。\n\n2.1.1 Penn World Table ― pwt10\nPenn World Tableは経済研究においてもっとも頻繁に利用されているデータベースの１つと言えるでしょう。これは所得，産出高，投入および生産性に関する情報を提供するデータベースです。1950年から2017年の182ヵ国をカバーしています（基準年は2011年）1。 pwt10.01はデータパッケージです。country（国名），isocode（3桁の国コード）, year（年）, currency（各国の通貨単位）の変数の他に，rgdpe（支出面の実質GDP），rgdpo（生産面の実質GDP）,hc(1人あたり人的資本指数)などを含む48の時系列データが提供されています。それではinstall.packages()を使ってRにインストールしましょう。\n\n# Rパッケージpwtのインストール\n    install.packages(\"pwt10\")\n\nRパッケージptw10はデータだけのパッケージです。library()，data()関数で読み込みます。ス クリプトに次のように入力し，[Run]をクリックしてください。\n\n# pwt10の読み込み\n    library(pwt10)\n    data(\"pwt10.01\")\n# pwt10.1のデータを表示させる\n    pwt10.01\n# pwtデータの変数名を表示させる\n    glimpse(pwt10.01)\n\nデータ自体は更新され，現在，バージョン10.01となっています。glimplse(pwt10.01)を実行することにより，12,810の観察値×52の変数のデータが確認されます。データセットの最終数行を表示させるtail()関数を使ってこのデータセットの最後の部分を見てみましょう。ちなみにtail()関数と反対の結果を出力するのがhead()関数です。head()関数はデータフレームの冒頭部分を表示させます。\n\n tail(pwt10.01)\n\n\nここでpwt10データを使ってジンバブエ経済を観察してみましょう。そ のためにジンバブエ経済だけ取り出し，zweというオブジェクトに容れます。\n\n# ジンバブエデータを取り出す。\nzwe &lt;- pwt10.01 |&gt; \n  filter(isocode == \"ZWE\")\n\nここではfilter()関数を利用し、isocodeが”ZWE”に一致する行だけを抽出しています。つまりジンバブエの行を取り出しています。filter()関数の使い方はすでに説明したように次のようになります。\n\n  filter(データフレーム名, 抽出条件)\n\nジンバブエデータの取り出しには，パイプ(|&gt;)をつかって”pwt10.01”をfilter()関数に渡しています。こ のためデータフレーム名が省略されています。\nジンバブエのマクロ状態―GDP，雇用，価格の成長率・上昇率―をグラフにし観察してみましょう。そ れぞれの変数名はrgdpe（実質GDP）, emp（就業者数）, pl_c（家計消費の価格水準）です。グラフ作成までの手順は次のようになります．\n\n３つの変数の時系列的推移を描くために，zweからこの３つの変数とyear変数を取り出します．\n３つの変数を成長率に変換します．\n最後に，３つの変数を表示するグラフを作成します．\n\n手順1：特定の変数(列)の取出し – select()関数\nselect()関数を使ってyearと３つの変数―rgdpe（実質GDP）,emp（就業者数）,pl_c（家計消費の価格水準）―を抽出します。\n\nzwe &lt;- zwe |&gt; \n   select(year, rgdpe, emp, pl_c)\n\n手順2：成長率の計算\n成長率の計算にあたっては対数差分を利用します。変 数を対数に変換するにはlog()を使います。た とえば，log(rgdpe)と入力し，実行すれば（[Run]をクリックすると），Rはrgdpeの対数を返します。さ らに，１期前の対数の値との差をとる必要があります。１期前に変換するためにlag()関数 を利用します。 lag(rgdpe)で１期前の実質GDPの値を指定できます。以上を利用すると，対数差分の計算式は以下のように表現されます。\n\n# 成長率の計算\nlog(rgdpe) - log(lag(rgdpe))\n\nこの計算式を利用し，mutate()関数を使って成長率変数を作成します．mutate()は既存の変数（列）に関数を適用し，新たな変数を作成する関数です。新 たな変数の名前はこの例では既存の変数の冒頭にg_をつけたものにしています。\n\nzwe &lt;- zwe |&gt;  \n  mutate(\n    g_rgdpe = log(rgdpe) -log(lag(rgdpe)),\n      g_emp = log(emp) -log(lag(emp)),\n      g_pl_c =  log(pl_c) -log(lag(pl_c))\n  )\n\n以上をまとめてスクリプトに書くとつぎのようになります。\n\nzwe &lt;- pwt10 |&gt; \n  filter(isocode == \"ZWE\") %&gt;% \n  select(year, rgdpe, emp, pl_c)  %&gt;% \n  mutate(\n    g_rgdpe = log(rgdpe) -log(lag(rgdpe)),\n      g_emp = log(emp) -log(lag(emp)),\n      g_pl_c =  log(pl_c) -log(lag(pl_c))\n  )\n\nこれを実行すると，３つの変数とその成長率変数をもつジンバブエデータが作成されます。V iew()関数で確認してみてください。\n\nView(zwe)\n\n手順3：グラフの作成 - ggplot2\nグラフの作成にはggplot2パッケージを利用します。\n\n# GDP成長率のグラフ作成\nzwe_growth &lt;-ggplot(data = zwe) +           \n    geom_point(mapping = aes(x =year, y = g_rgdpe))+\n     geom_line(mapping = aes(x = year,y = g_rgdpe))+\n    geom_abline(intercept = 0,slope = 0)+\n    labs(x=\"year\", y= \"Growth rate\")+\n    theme_bw()\n\nここではGDP成長率のグラフを作成し，グラフをzwe_growthと名前をつけたオブジェクトに容れています。ちなみに，コンソール画面にzwe_growthと入力してみてください。\n\nzwe_growth\n\n次のようなジンバブエの対前年比GDP成長率が表示されるはずです。\n\n同じようして，インフレ率と雇用成長率のグラフを作成してみましょう。\n\n# インフレ（価格上昇率）のグラフ作成\nzwe_inflation &lt;- ggplot(data = zwe) +　\n    geom_point(mapping = aes(x = year, y = g_pl_c))+\n    geom_line(mapping = aes(x = year,y = g_pl_c))+\n    geom_abline(intercept = 0,slope = 0)+\n     labs(x=\"year\",y=\"Inflation\")+\n     theme_bw()\n\n\n# 雇用成長率のグラフ作成\nzwe_emp &lt;- ggplot(data = zwe) +        \n    geom_point(mapping = aes(x = year, y = g_emp))+\n    geom_line(mapping = aes(x = year,y = g_emp),lty=\"dashed\")+\n    labs(x=\"year\",y=\"Employment\")+\n    geom_abline(intercept = 0,slope = 0) + \n    theme_bw()\n\npatchworkパッケージはグラフのレイアウトを操作します。操作対象の図を足し算記号（＋）や割り算記号（/）等を使って配置します。詳 細についてpatchworkパッケージサイトを参照してください。\n\ninstall.packages(\"patchwork\")\nlibrary(patchwork)\n\nlibrary(patchwork)で呼び出したのちに，次のように入力することで3つのグラフを縦に配置します。\n\n zwe_growth/zwe_inflation/zwe_emp\n\n\n\n\n2.1.2 The Maddison Project Database ― maddison\nMaddisonプロジェクトは，世界のあらゆる地域の長期的な経済パフォーマンスを初めて定量化した故Angus Maddisonの業績を引き継ぐものです。Maddisonは世界のすべての地域の長期的な経済パフォーマンスを、一貫した枠組みで定量化した著名な経済学者です。\nMaddison Project Databaseはローマ時代から現在までの世界の国々の所得の推定値を提供しています。このデータベースのおかげで成長のダイナミクスや長期的な経済成長の要因を調べることができます。\n\n2.1.2.0.1 maddisonのインストール\n次のように入力し、maddisonをインストールし、library()でロードします。\n\n# maddisonのインストール\n    install.packages(\"maddison\")\n # maddisonの呼び出し\n    library(maddison)\n\nこのパッケージは1人あたりGDPとともにマディソンプロジェクトのデータを含むデータパッケージです。str()でデータフレームの内容をみると,\n\nstr(maddison)\n\n19,873の行（観察値）と12列（変数）を持つことが分かります。主要な変数は次のとおりです。\n\n\n\n変数\n説明\n\n\n\n\ngdp_pc\n１人あたり実質GDP\n\n\niso3c\n国コード\n\n\ncontinent\n大陸別\n\n\n\nMaddisonの1人あたり実質GDPをもとに主要経済の長期歴史的推移を確認してみましょう。データフレームmaddisonからfilter()を使ってサンプル国5カ国を取り出します。またデータは17世紀以降にしています。\n\nsample5c &lt;- maddison |&gt;  \n    filter(iso3c %in% c(\"FRA\",\"JPN\",\"GBR\",\"DEU\",\"USA\"), year &gt; 1800)\n\n取り出した日本、アメリカ、イギリス、ドイツおよびフランスの長期的な成長率をグラフにしてみましょう。\n\nggplot(data = sample5c, mapping = aes(x = year, y = gdp_pc, group = country))+\n  geom_line()+\n  scale_y_log10()+\n  labs(x = NULL, y = \"GDP per capita\")+\n  theme_minimal()\n\n\n推移を見ると、私たちの生活が豊かになり始めたのが20世紀に入ってからだということ,とくに第２次大戦以後だということが分かります。データが得られる範囲内では、それまでのおよそ2世紀にわたり持続的な成長は観察されません。",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#世界銀行world-bank-wdi",
    "href": "MacroData.html#世界銀行world-bank-wdi",
    "title": "R & Socio Econ",
    "section": "2.2 世界銀行World Bank ― WDI",
    "text": "2.2 世界銀行World Bank ― WDI\n世界銀行が提供する世界開発指標WDI（World Development Indicators）は,グローバルな開発状況と貧困について国際的に比較可能な統計をまとめたものです。こ のデータベースには，217の経済と40以上の国グループの1,600の時系列指標が収録されています。ま たその多くの指標のデータは50年以上前までさかのぼることができます。\nWDIデータは，さまざまな方法で取得できるようにされています。詳 しくは世銀ホームページを参照してください。フ ァイルが大きいためダウンロードに多少時間がかかりますが，すべてのデータ（ExcelおよびCSV形式ファイル）をまとめてダウンロードすることも可能です。\nこのWDIデータを利用するためのRパッケージWDIが開発されています 。これ以外にもwbstatsというパッケージもありますが，ここではWDIを紹介します。RパッケージWDIは，世界銀行によって運営される40以上のデータベースからデータを検索・ダウンロードすることを可能にしています。そ うしたデータベースには世界開発指標(WDI）はもちろんのこと，国際債務統計，Doing Business,人的資本指数，サブナショナルな貧困指標も含まれます。\n\n2.2.1 インストール方法\nRパッケージWDIはCRAN上で公開されていますのでインストールにはinstall.packages()を利用します．コ ンソール画面に次のように入力し，エンターキーを押してください．\n\n # WDIのインストール\n install.packages(\"WDI\")\n\nWDIを利用するために，スクリプト画面にlibrary(WDI)と入力し，実行しておきます．\n\n # WDIのロード\n library(WDI)\n\n\n\n2.2.2 データを探す- WDISearch()\nデータを探すためにはWDIパッケージに用意されたWDIsearch()関数を使います。こ の関数は利用可能なWDIデータ系列のコード名，名前，説明，およびデータソースからなる行列を返します。基本的な書式は以下の通りです。\n\nWDIsearch(string = \"検索語\", field = \"name\", short = TRUE, cache = NULL)\n\nそれぞれの引数を説明しましょう．\n\nstring = ” “に検索語（文字列）を入力します。WDIsearchは文字列マッチング関数grepを使い，”検索語”を探します。またcaseを無視します（igunore.case=TRUE）ので，正規表現―簡単に言えば，通常の文字―が利用可能です。\nfield = ” “に検索するフィールドを指定します。利用可能なフィールドは”indicator”, “name”, “description”, “sourceDatabase”, “sourceOrganization”です。たとえば “name” と入力すれば，データのnameの中を検索します．\nshort = 既定値はshort=TRUEです。この場合，指標コードと名前だけを返します。short=FALSEの場合，指標コード，名前，説明およびデータソースを返します．\ncache: WDIcache関数によって作成されるデータリストを返します。省略された場合（あるいはNULLの場合），WDIseachはデータ系列のローカルリストを探します．\n\nたとえば，GDPに関するデータを探すとしましょう．こ の例では検索文字列を\"gdp\"とし，探すフィールドを\"name\"にしています。ま た詳しい説明を得るためにshort=FALSEと設定しています。検索結果をオブジェクトgdpに格納します。\n\ngdp &lt;- WDIsearch(string = \"gdp\",field = \"name\",short = FALSE, cache = NULL)\n\nこの結果をView(gdp)でみると，539×5の行列が返されます。こ こで重要なのはindicator変数です．こ れは指標コードであり，ダウンロードのさいに利用されます。\n絞り込みが不十分なため，539行のデータ系列が表示されてしまっていますが，スクロールダウンして行くと，448行めにGDP(constant 2010 US$)が見つかります。そ のindicator名はNY.GDP.MKTP.KDです。以下の例においては，これをダウンロードします．\n\n\n2.2.3 データをダウンロードする- WDI()\nデータをダウンロードするためにはWDI()関数を利用しますが，利用方法は次のようになります.\n\nWDI(country = \"all\",indicator = \"NY.GDP.MKTP.KD\",start = 1960, end = 2020, extra = FALSE, cache = NULL)\n\nこの関数は６つの引数をとります．そ れぞれを簡単に説明しましょう.\n\ncountry = ” ” : ” “の中にダウンロード対象の国名（ISO-2文字コードで表現された国名）を入力します。たとえば，”US”,“CA”,“JP”です。複数の国を指定したい場合，c()を利用します。 country = c(“US”,“CA”,“JP”) と入力します。なお，“all”と入力すると，すべての利用な国のデータがダウンロードされます。\nindicator = 指標のコード名を入力します。これは上の表のindicator列に表示されているものになります。\nstart = データの開始年です。通常整数フォーマットの年です（ただし，1960以上）。\nend = データの終了年です。言うまでもなく，start引数に指定した値より大きくなければなりません。\nextra = :TRUEの場合，地域，iso3コード，所得水準といった追加的な変数を返します。\nWDIcache()によって作成されるリストで，extra = TRUEのとき利用されます。\n\nそれではWDI()関数を使って，アメリカ経済のGDP(constant 2010 US$)をダウンロードしてみます。こ のGDPデータのindicatorコードは，上述のとおり，NY.GDP.MKTP.KDです。ダ ウンロードしたデータはgdp_usという名前をつけたオブジェクトに格納します。\n\ngdp_us &lt;- WDI(country = \"US\", indicator = \"NY.GDP.MKTP.KD\", start = 1990, end = 2019, extra = FALSE, cache = NULL) \n\nhead()やView()関数を使ってダウンロードしたデータを確認してみてください．\n\n head(gdp_us)\n\n最後に，ダウンロードしたGDPデータをggplot2を使ってグラフにしてみましょう．\n\nggplot(data = gdp_us, mapping = aes(x = year,y = NY.GDP.MKTP.KD))+\n  geom_line(color = \"gray\")+\n  geom_point(col = \"purple\",size = 2.5)+\n  scale_x_continuous(breaks = seq(1990, 2020, by = 5))+\n  labs(title = \"USA GDP, constant 2010 US$\", y = \"GDP\",x = NULL)+\n  theme_minimal()\n\nこれを実行すると，[Plots]ウィンドウに上のグラフが表示されます。",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#eu統計局eurostat---eurostat",
    "href": "MacroData.html#eu統計局eurostat---eurostat",
    "title": "R & Socio Econ",
    "section": "2.3 EU統計局Eurostat - eurostat",
    "text": "2.3 EU統計局Eurostat - eurostat\n欧州委員会の統計局であるEurostatは,オープンデータサービスを通じてヨーロッパの人口統計，経済，健康，インフラ，交通などに関する数千ものデータセットを提供しています。Rパッケージeurostatはそうした欧州統計局のオープンデータ取得のためのパッケージです。ヨーロッパ経済を実証分析の対象とする場合,とても有益なパッケージです。\n\n2.3.1 Rパッケージeurostatの利用法\n\n2.3.1.1 パッケージeurostatのインストール\n最初に，次のようにコンソール画面に入力しエンターキーを押し，eurostatをインストールします。\n\n# eurostatのインストール\ninstall.packages(\"eurostat\")\n\nさらにlibrary()でパッケージeurostatを呼び出し，利用できるようにしておきます。\n\n # eurostatの呼び出し\n library(eurostat)\n\n\n\n2.3.1.2 データを探す―get_eurostat_toc(), search_eurostat()\nget_eurostat_toc() 　関数get_eurostat_toc()はeurostatのデータセットの目次をダウンロードする関数です。最初に，この関数を使って目次をダウンロードしてみましょう。ここではダウンロードした目次をオブジェクト―euという名前にしています―に容れます. 　\n\n# eurostatの目次取得し,オブジェクトeuに格納\neu &lt;- get_eurostat_toc()\n\nスクリプト画面にView(eu)と入力し，[Run]をクリックすると，オブジェクトeuの内容が表示されます。これは10,004行×8列のデータフレームです。１列目のtitleはデータセット名，２列目のcodeはデータセットのコード番号です。このcode列の値が，選択されたデータセットをダウンロードするために使用されます。次のtype列はデータセットかフォルダかどうかを示しています。last update of data列はデータの最新の更新日，last table structure changeはテーブル構造の最新の変更時点，そして次の2つの列はデータの開始時期と終了時期を示しています。\n\nsearch_eurostat()\n特定の検索ワードを指定し,データを探すためにはsearch_eurostat()関数を使用します。たとえば,search_eurostat()関数の引数に “unemployment”と入力し，失業に関連したデータセットを探してみましょう。ここではその結果をパイプ(|&gt;)でView()関数につなげてViewウィンドウで表示させています。\n\n# \"unemployment\"の検索\nsearch_eurostat(\"unemployment\") |&gt;  View()\n\n\nsearch_eurostat()関数の基本的な書き方は以下のとおりです。\n\nsearch_eurostat(pattern=\"検索語\", type = \"dataset\", fixed = TRUE)\n\nこのように引数にpattern,type,fixedの３つをとります。\n\npattern=” “,” “の部分に探したいデータに関連したキーワードを入力します。これによりtype=引数で指定した内容に応じてデータセットやテーブルが返されます。\ntype= ” “にはdataset, folder, table, もしくは以上のすべてを指定するallのいずれかを入力します。これにより対応したEurostatのテーブルが出力されます。デフォルトではdatasetです。\nfixedにはTRUE, FALSEの論理値をとります。TRUEの場合,patternはマッチされる文字列となります。より複雑なregexマッチングが必要とされる場合,FALSEをとります。\n\n\n\n2.3.1.3 データをダウンロードする―get_eurostat()\nデータをダウンロードするにはget_eurostat()を使います。もっとも基本的な書式は次のようになります。\n\nget_eurostat(id, time_format = \"\", filters = \"\", type = \"\")\n\nこの関数はおもな引数として次のものをとります.\n\nid= ” “:” “にデータセットのコード名を指定します。\ntime_format= ” “: eurostatフォーマットの時間列をどのタイプに変換するかを指定します。”date”（既定値）と入力した場合,期間の最初のデータによって日付フォーマットDateへと変換されます。“num”を指定すると,数値へと変換されます。テーブルが年次データの場合,デフォルトの日付フォーマットDateを使用するよりも,数値numの時間変数を使用した方が便利です，\nfilters = ” “:”none”を指定した場合,データセット全体が取得されます.一部分を取得したい場合,ここにリストを入れます（以下の例を参照してください），\ntype= ” “: 変数のタイプを指定します。具体的には”code”（デフォルト）もしくは “label”となります.これは変数の値を知りたいときに便利です（以下の例を参照してください）。\n\nそれでは具体的な例を使ってデータをダウンロードしてみましょう。ここでは EUの「住宅価格」データを探すことにします。最初に，上で説明したsearch_eurostat()関数を使って取得するデータのidを確認します。その上でget_eurostat()関数を利用し,イギリス,フランス,スペインの「住宅価格」データを取得してみましょう。\n検索結果をオブジェクトhouseに容れます。\n\nhouse &lt;- search_eurostat(\"House\",type= \"table\") \n\nView(house)の結果をみると,13行めにHouse price index - annual data（住宅価格指数,年次データ）が表示されています。これをダウンロードします.\nキーワード”House”の検索結果\nここではダウンロードしたデータをhouse_priceと名前をつけたオブジェクトに容れます。get_eurostat()の引数id = ” “には、検索結果のcode変数のtipsho20 を利用します。引数time_format=”num”では数値を指定しています。\n\nhouse_price&lt;-get_eurostat(id=\"tipsho20\",time_format = \"num\",type = \"code\")\n\nこれにより４つの変数,1,483の観察値がダウンロードされます。結果をstr()で表示してみます。\n\nstr(house_price)\n\n\n\n\nhouse_priceのデータ構造\n\n\n最初の変数unit（単位），２番目の変数geoは地理情報,３番目の変数timeは年，最後の変数valuesが住宅価格指数を示しています。しかし,実はこれだけではそれぞれの変数がとる値が何を意味しているかは分かりません。少なくとも分かりづらい表示になっています。とりわけ,unit変数がコード名で表記されているため, “INX_A_AVG”等がわかりません。ダウロードするさいの引数type = “label”とした方が良いでしょう。デフォルトではコード名で表示されます（引数type = “code”）。変数の値の意味を知るには変数のラベルを表示させた方がコード名よりも便利です。\n\nhouse_price &lt;- get_eurostat(id=\"tipsho20\",time_format = \"num\",type = \"label\")\n\ntype = “label”でダウンロードした上で，次に，以下のように入力し,変数unitがどのような値を持つか確認してみて下さい。\n\nhouse_price |&gt; distinct(unit)\n\nunit変数は1,403行から形成されますが,すべて異なった値をとるわけではありません。distinct()関数はデータフレームから()内に指定した変数のうちユニークな,つまり異なった値（行）だけを選択します。つまりユニークな値は―以下のdistinct()関数の結果をみると―３種類だけです。\n\n\n\ndistinct()関数の出力結果\n\n\n以下の例でunit変数の値を抽出条件とすることによって特定の行を抽出します。\n\n\n2.3.1.4 住宅価格上昇率のグラフを描く\nいくつかのヨーロッパ経済をピックアップし，住宅価格（年平均変化率）の推移と１時点における住宅価格変化率をみてみましょう。このために次のような作業を行います。\n\n複数の国を指定し,住宅データをダウンロードする.\nunit変数にもとづき年平均変化率を示す値（行）を抽出する.\nggplot2を利用し,ダウンロードしたデータの時系列グラフを作成する.\n地理情報を利用し,ヨーロッパ地図上に2018年の住宅価格（年平均変化率）を表示させる.\n\n1.複数の国を指定し，住宅データをダウンロードする\n最初に,国コードを容れたベクトルを作成しておきます―isoという名前にします。直接get_eurostat()関数において指定しても良いのですがスクリプトが見づらくなりますので,事前に,この作業を行っておきます。\n\n# オブジェクトisoに利用する国を容れる\niso &lt;- c(\"FR\",\"DE\",\"ES\",\"IT\",\"SE\")\n\n2. unit変数にもとづき年平均変化率を示す値（行）およびサンプル国を抽出する\n\nhouse_price_eu &lt;- house_price |&gt; \nfilter(unit == \"RCH_A_AVG\", geo %in% iso)\n\n変数unitのとる値のうち年平均変化率を表現するラベルは”RCH_A_AVG”ですのでfilter()関数の中の抽出条件の１つにunit == “RCH_A_AVG”を指定しています。また,国を示す変数はgeoですが,このうちベクトルisoに容れた複数の国を選択するためgeo %in% isoを利用しています。この表記が意味しているのは,「geo変数がisoベクトルの中のいずれかに等しい国コードをとる行を選択しなさい」ということを意味しています。これによりgeo変数のうちisoベクトルの中の国のいずれかに等しい行だけが選択されます。\nこれで行の抽出条件にマッチする行だけが選択され,house_price_euというオブジェクトに格納されます。View(house_price_eu)やstr(house_price_eu)を利用し,house_price_euの内容を確認してみてください。\n3. ggplot2を利用し,ダウンロードしたデータの時系列グラフを作成する\n\nggplot(data = house_price_eu, mapping = aes(x = time, y = values))+\ngeom_point(mapping = aes(shape = geo))+ \n# 点の形状で国別を示すためにaes()の中でshpae = geoと指定\ngeom_line(mapping = aes(lty=geo))+\n# さらにgeom_line()で線を重ねる\n# 線の種類で国別表示するため,aes()の中でlyt=geoと指定\nlabs(x=\"year\", \n    y=\"Housing price\",\n    subtitle = \"Housing price (Annual average rate of change %)\")+\ntheme_bw()\n\nこのスクリプトを実行すると,以下のようなグラフが出力されます.\n\n\n\nヨーロッパ主要経済の住宅価格の推移,2001~2019\n\n\n4. 地理情報を利用し,ヨーロッパ地図上に2015年の住宅価格（年平均変化率）を表示させる\n上のグラフでは各国の住宅価格上昇率の時間的推移を比較しましたが,次に2015年の１時点をとり各国を比較してみましょう。そのさいeurostatの提供する地理空間情報2を利用し,2015年の住宅価格をヨーロッパの地図上に描きます。最初に出力されるグラフを示しておきましょう。地理情報の使い方の詳細については2.3.2で説明します。\n\n\n\nヨーロッパ経済の住宅価格上昇率,2015年\n\n\n出力される結果は上のようになります。この図を描くための詳しい説明は2.3.2に譲り,ここではスクリプトだけ示しておきます。手順は４つです。\n\n手順① ヨーロッパの地図データの取得\n手順② 住宅価格データから特定の国と2015年のデータを抽出\n手順③ ２つのデータフレームの結合\n手順④ geom_sf()の利用\n\n①ヨーロッパの地図データを取得し,そのデータをshp_0という名前をつけたオブジェクトに容れる\n\nshp_0 &lt;- get_eurostat_geospatial(resolution = 10, nuts_level = 0, year = 2016)\n\n②上で取得した住宅価格データからヨーロッパ諸国と2015年のデータを抽出する\nそしてその結果をhousing2015というオブジェクトに容れます。最初に,上記のisoベクトルを次のように書き換え,サンプル国を拡充しておきます。\n\niso &lt;- c(\"AT\", \"BE\", \"CY\",\"CZ\", \"DE\", \"DK\", \"EL\", \"ES\", \"FI\", \"FR\", \"HR\", \"IE\", \"IT\", \"LT\",\"LU\", \"LV\", \"MT\", \"NL\", \"PT\", \"SE\")\n\n\nhousing2015 &lt;- house_price |&gt; \nfilter (unit == \"RCH_A_AVG\", geo %in% iso, time == 2015)\n\n③オブジェクトshp_0とhousing2015を結合する\nマージしたデータは地理データと住宅価格データを持つことになります。マージしたデータにはmap_housingというオブジェクト名を与えています。２つのオブジェクトの結合にはinner_join()関数を使っています。\n\nmap_housing &lt;- inner_join(shp_0,housing2015, by = \"geo\")\n\n④ggplot2―geom_sf()―を利用し,ヨーロッパ地図上に,住宅価格上昇率を描く\n\nggplot(data = map_housing) +\ngeom_sf(mapping = aes(fill=values),color = \"white\",size = 0.5)+\nxlim(c(-10,37))+\nylim(c(34,70))+\nscale_fill_continuous_tableau(palette = \"Classic Gray\")+\nlabs (\n  subtitle = \"Housing price (Annual average rate of change), 2015\",\n  fill = \"% Annual average\\nrate of change\") +\n  theme_classic()\n\n全体のスクリプトをまとめると,次のようになります.\n\n# ヨーロッパの地理空間データをダウンロード\nshp_0 &lt;- get_eurostat_geospatial(resolution = 10,nuts_level = 0,year = 2016)\n\n# サンプル国を指定\niso &lt;- c(\"AT\", \"BE\", \"CY\",\"CZ\", \"DE\", \"DK\", \"EL\", \"ES\", \"FI\", \"FR\", \"HR\", \"IE\",\"IT\", \"LT\",\"LU\", \"LV\", \"MT\", \"NL\", \"PT\", \"SE\")\n\n# サンプル国の住宅価格（年平均変化率）データを取得.\nhousing2015 &lt;- house_price |&gt; \nfilter (unit == \"RCH_A_AVG\", geo %in% iso), time == 2015)\n\n# 地理空間データと住宅価格データを結合\nmap_housing &lt;- inner_join(shp_0,housing2015, by = \"geo\")\n\n# ヨーロッパの地図上に住宅価格を表示.\nggplot(data = map_housing) +\ngeom_sf(mapping = aes(fill=values),color = \"white\",size = 0.5)+\nxlim(c(-10,37))+\nylim(c(34,70))+\nscale_fill_continuous_tableau(palette = \"Classic Gray\")+\nlabs (\n  subtitle = \"Housing price (Annual average rate of change), 2015\",\n  fill = \"% Annual average\\nrate of change\") +\n  theme_classic()\n\nこのようにRパッケージeurostatを利用することにより,わずか10数行のスクリプトを書くだけで上のグラフを描くことができます。\n\n\n\n2.3.2 Eurostatの応用例 ― 地理空間情報の利用\n北欧諸国は多くのミステリー小説の傑作を生み出しています。そうした背景には社会経済的要因はもちろんのこと犯罪を身近なものと受け止める社会不安があるのかもしれません。そこで欧州委員会統計局Eurostatが提供する犯罪や暴力に対する不安度を示す指標によって,そうした社会的不安を代理させ観察することにします。そして同指標を視覚的に示すためにEurostatの提供する地理空間情報と結合し,ヨーロッパ地図上に表示します.主な手順は次のようになります,\n\n地理空間情報(シェイプ・ファイル)をダウンロードし,ヨーロッパ地図を描く.\n犯罪・暴力・破壊行為に対する不安度を示す指標をダンロードする.\n1と2のファイルを結合し,不安度指標を表示した北欧地図を描く.\n\n\n2.3.2.1 地理空間情報のダウンロードとggplot2による描画―sfパッケージ\n地理空間データ分析用のRパッケージとしてsfパッケージがあります。sfパッケージはsimple featuresというGIS(geographic information system)データ規格をRで扱うためのパッケージです。Eurostatの提供する地理空間情報データを扱うために，最初に，このパッケージをインストールしておきます。コンソール画面に次のように入力し,エンターキーを押してください。次いでlibrary( )で呼び出しておきます。\n\n # sfパッケージのインストール\n  install.packages(\"sf\")\n # sfパッケージの呼び出し\n  library(sf)\n\nこのパッケージを利用することによって地理空間データのさまざまな処理が可能となります。\nすでに幾度も登場しているggplot2も,バージョン3.0.0以後sfクラスのデータを扱えるようになりました。sfクラスのオブジェクトのプロットにはgeom_sf()という関数を使います.\nEurostatの地理空間情報は,国レベルの情報にとどまらず,それ以上に詳細な行政単位レベルの情報も提供しています。1970年代初頭,Eurostatは欧州連合（EU）の地域統計を作成するために,EUの領土を分割するための統一された,一貫したシステムとしてNUTS (Nomenclature of territorial units)分類を設定しました。イタリアを例にとれば,NUTSレベル0はイタリアという国そのものの（イタリア全土）,NUTSレベル１はNord-Ovest（北西部）, Sud（南部）といった地域です。さらにNUTSレベル２はPiemonte（ピエモンテ）, Liguria（リグーリア）, Lombardia（ロンバルディア）といった州です。さらに細かいレベルのNUTSレベル３はTorino（トリノ）, Genova（ジェノバ）, Milano（ミラノ）等の都市空間を示します。これにより,たとえば,個人世帯の可処分所得の地理的分布を調べたいとき,NUTSレベル2すなわち各国の州レベルまで調べること（グラフで表示すること）も可能です。\nそれでは最初に,NUTSレベル１と２のヨーロッパ地図を描いてみましょう。地図を描くためにはシェイプファイルshapefileという図形情報と属性情報を入れたファイルをダウンロードする必要があります。RパッケージeurostatはGISGOからヨーロッパの地理情報を取得する関数get_eurostat_geospatial()を用意しています.この関数の基本的な用法は次のようになります。\n\nget_eurostat_geospatial(\n  output_class = \"sf\",\n  resolution = ,\n  nuts_level = ,\n  year = 2016\n  )\n\n以下はこの関数がとる引数の概要です.\n\noutput_class　= ” “:” “に sf, df,もしくはspdfのいずれかの文字列を指定することで返されるオブジェクトのクラスを選択します。sfはsimple features,dfは data_frame, spdfはSpatialPolygonDataFrameを表現します。デフォルトは”sf”です。\nresolution = : 地理空間データの解像度を指定します。利用可能な解像度は60（1:6,000万）,20（1:2,000万）,10（1:1,000万）,03（1:3,000万）,01（1:1,000万）のいずれかです。\nnuts_level = : NUTS分類のレベルを指定します。0,1, 2, 3, allのいずれかをとります。\nyear = : NUTSのリリース年を指定します。具体的には,2003, 2006, 2010, 2013, 2016 のいずれかを入力します。\n\nそれでは地理空間情報をダウンロードしてみましょう。ここではNUTSレベルの異なる２つのオブジェクトを作成します.\n\n# NUTS分類のレベル0で地図情報を取得し,オブジェクトshp0に容れる\nshp0 &lt;- get_eurostat_geospatial(output_class = \"sf\", resolution = 10, nuts_level = 0, year = 2016)\n\n\n # NUTS分類のレベル2で地図情報を取得し,オブジェクトshp2に容れる\n shp2 &lt;- get_eurostat_geospatial(output_class = \"sf\", resolution = 10, nuts_level = 2, year = 2016)\n\nオブジェクト―shp0, shp2―は,引数output_class=“sf”を指定していますからsfクラスです。geom_sf()はsfクラスのオブジェクトを扱いますのでこの指定が必要となります（ただし,デフォルトでもsfクラスですから,指定しなくとも結果はsfクラスのオブジェクトとなります）。\nNUTSレベル0は国単位を意味します。NUTSレベル２は,上述のように,イタリアで言えばロンバルディアといった州レベルの行政単位まで描かれます。ヨーロッパの地図情報が取得できましたので,ggplot2を利用しヨーロッパ地図を描いてみましょう。ggplot2にはsfクラスのオブジェクトを描くためにgeom_sf()が開発されています。グラフの作成はこれまで紹介したggplot2の利用方法に同じです。基本はggplot(オブジェクト名)+geom_sf()です。\n\nggplot(shp0)+    # オブジェクト名を入力\ngeom_sf()        # sfクラスのオブジェクトを指定\n\nこれだけでヨーロッパ地図がプロット画面に出力されます。しかし,かなり広いヨーロッパ地域が表示されてしまいます。そこでx軸,y軸の範囲を限定し,わたしたちが通常目にするヨーロッパを描くとしましょう。そのためにはxlim()を利用し,x軸の範囲を決定します。xlim（c（西に-10度, 東に37度））のように東西の経度を入力します。y軸の範囲も同様に,ylim(c(,))を利用し,緯度を入力します。あるいはggplot2のcoord_map()という関数を使っても良いでしょう。引数xlim=()で経度,ylim=()で緯度の範囲を指定することができます。たとえば,coord_map(xlim = c(-30, 45), ylim = c(30, 75))と入力することによってヨーロッパ地域を指定することができます。\n\nnuts0 &lt;- ggplot(shp0) +\ngeom_sf()+\nxlim(c(-10, 37))+\nylim(c(34, 65))\n\nわずか数行の入力で以下のグラフのようなヨーロッパ地図を描くことができます。あわせてNUTレベル2の地図も描いてみましょう。上述のグラフ作成との違いはggplot()にsfオブジェクト名shp2を指定するだけです。\n\nnuts2 &lt;- ggplot(shp2) +\ngeom_sf()+\nxlim(c(-10, 37))+\n ylim(c(34, 65))\n\n\n\n\n異なったNUTSレベルの地理情報\n\n\n北欧地域だけを描く場合には,x軸範囲とy軸の範囲を以下のように限定すれば,北欧地域だけの地図を描くことができます.\n\nn_euro &lt;- ggplot(shp0)+\ngeom_sf()+\nxlim(c(0,32))+     #　北欧地域の範囲を経度で指定\nylim(c(54,70))+    #　北欧地域の範囲を緯度で指定\n\n\n\n2.3.2.2 犯罪・暴力・破壊行為に対する不安度データのダウンロード\n次に,犯罪や暴力に対する不安度データを地図上に表示するために,犯罪に関連するデータを探します。これはすでに紹介したsearch_eurostat()関数を利用します。 “crime（犯罪）”をキーワードにデータを探してみましょう.\n\nsearch_eurostat(\"crime\",type=\"table\") |&gt; Vie()\n\n上のスクリプトを実行すると,search_eurostat()の結果をView()関数に渡しているため,crimeに関連した検索結果が表示されます。関連するデータテーブルは１つだけでsdg_16_20というファイルです。このデータは地域における犯罪・暴力・破壊行為を報告した人の比率を示しています。そうした点では人々の犯罪や暴力に対する不安度を代理する指標として良いでしょう。\n次に,データ・テーブルsdg_16_20をダウンロードし,結果をcrimeというオブジェクトに容れます。\n\ncrime&lt;-get_eurostat(id=\"sdg_16_20\",time_format = \"num\")\n\nこれによりヨーロッパ諸国の犯罪・暴力・破壊行為の報告者比率データを取得できます。ここから第１に,北欧４カ国とバルト３国の７ヵ国だけを抽出します。このために変数のgeoの値が”DK”,“SE”,“NO”,“FI”,“LV”,“EE”,“LT”のどれかをとる行を抽出します.\n\nfilter(geo %in% c(\"DK\",\"SE\",\"NO\",\"FI\",\"LV\",\"EE\",\"LT\"))\n\nここで”geo %in% c()“は「geo変数がc（国コード）の中のいずれかに等しい国コードをとる行を選択しなさい」を意味しています。また,このデータは,incgrpという変数を持っていますが,これはincome group（所得グループ）を示し，所得階層別情報を提供しています。しかし,ここでは所得階層別情報は使いませんのでincgrp変数のうち値がTOTALの行だけを抽出します。そこで上の抽出条件にくわえて次の抽出条件も入力します。\n\nfilter(incgrp == \"TOTAL\")\n\n２つの抽出条件をあわせると,次のようになります.\n\nfilter(geo %in% c(\"DK\",\"SE\",\"NO\",\"FI\",\"LV\",\"EE\",\"LT\"), incgrp == \"TOTAL\")\n\nさらに,時間も2017年に指定し ― time == 2017 ―,最終的に次のように入力します。\n\nne_crime &lt;- crime |&gt;\nfilter(time == 2017, geo %in% c(\"DK\",\"SE\",\"NO\",\"FI\",\"LV\",\"EE\",\"LT\"), incgrp == \"TOTAL\")\n\nfilter()の基本コードはfilter(データフレーム名,抽出条件)ですが,ここではパイプ( |&gt;)を利用し,データフレームcrimeを関数filter()に渡していますのでデータフレーム名が省略されています。.最終的に,ne_crimeというオブジェクトに容れます.\n以上で,北欧地域の犯罪や暴力に対する不安度を示す指標が取得できました。これを地図上に表示させるために地図情報の入ったshp0と結合します。\n3 シェイプファイルshp0と犯罪データファイルne_crimeの結合\nここではヨーロッパの地図情報の入った”shp0”ファイルと,北欧地域の犯罪不安度情報の入った”ne_crime”ファイルを結合します。データフレームの結合にあたってはinner_join()関数を使います。ジョイン_join()は２つのデータテーブルの変数を結合します。inner_join()はby= “キー変数”にしたがってキーの値が等しい観察値が結合されます。したがってキー変数にマッチしない観察値は除外されます.\ninner_join()のもっとも簡単な書き方は次のようになります.２つのデータフレームa,bがある場合,\n\ninner_join(データフレームa,データフレームb, by = \"キー変数\")\n\nそれではinner_join()を利用し,shp0とne_crimeを,両データフレームに共通のgeo変数を基準に結合します。その上でshp_neというオブジェクトに容れます。\n\nshp_ne &lt;- inner_join(shp_0, ne_crime, by = \"geo\") \n\nこれで不安度指標と地理空間情報の入った,74行×17列のデータフレームが作成されました。残りの作業はggplot2を使って不安度指標を色の濃淡で示した北欧地図を描くだけです。\nshp_neはsfクラスのオブジェクトです。このため描画にあたってはgeom_sf()関数に渡すだけです。この場合,何よって色分けするかをaes() で指定します。この例では犯罪・暴力・破壊行為の報告者比率を示すvalues変数の値の大きさで色分けします。このために fill = valuesとします。\n具体的には,まず最初に,ggplot()にデータフレーム名を指定します。\n\n ggplot(shp_ne) +\n\n次に,geom_sf()関数を使ってデータを地図に描きますが,変数valuesを地図上の色の濃淡で表現するためにaes(fiill = )で指定します。\n\ngeom_sf(mapping = aes(fill=values),color = \"white\",size = 0.5)+\n\nvalues変数は犯罪・暴力・破壊行為の報告者比率です。さらにcolor = ” “でボーダー（国境）をwhite(白)で描き,その線の太さをsize = で指定しています。これで基本的な作業は終わりです。実行すると,犯罪・暴力・破壊行為の報告者比率がデフォルトの色の濃淡によって描かれた北欧地図が出力されます。この例ではさらに,scale_fill_continuous_tableau()を使って犯罪・暴力・破壊行為の報告者比率を描く色の濃淡をグレイに変更します。この関数によって連続したカラースケールを指定することができます。引数palett =” “部分に”Blue”, “Red”のように入力します。ここでは白黒印刷にあわせ,グレイの色を採用しています。\n\nscale_fill_continuous_tableau(palette = \"Classic Gray\")+\n\n次に,labs()を使ってタイトルをつけます。\n\nlabs(title = \"The share of the population who reported \\nthat they face the problem of crime, violence or vandalism, 2017\",　fill = \"% the respondent \\nfeels crime\") +\n\n英文タイトルの中のthatの前に\"\\n\"が挿入されていることに気づいたと思います.これはその部分で文書の改行を命令する記号です。またfill = ” “によって色の濃淡を表示するバーのタイトルを指定しています。 最後に,背景のテーマを設定します。\n\ntheme_classic()\n\n以上のスクリプトをまとめると,つぎのようになります,\n\nggplot(shp_ne) +\ngeom_sf(aes(fill=values),color = \"white\",size = 0.5)+\nscale_fill_continuous_tableau(palette = \"Classic Gray\")+\nlabs(title = \"The share of the population who reported \\nthat they face the problem of crime, violence or vandalism, 2017\",　fill = \"% the respondent \\nfeels crime\") +\ntheme_classic()\n\nこれを実行すると,次のようなグラフが描かれます.\n\n\n\n犯罪や暴力,破壊行為の問題に直面していると回答した人の割合（％\n\n\n見られるように,サンプル経済の中では編集者ミカエル3の活躍するスウエーデンがもっとも高く,リガの犬4が蠢くラトビア等のバルト３国が続きます。バルト海を挟む諸国において犯罪や暴力,破壊行為の問題に直面している人々が多そうです。こうした社会的不安が犯罪小説の創造に寄与しているのかもしれません 。\n\n\n2.3.2.3 地理空間情報― NUTSレベル3の利用\nさらに,スウェーデンに注目し,こうした犯罪の背景―犯罪や暴力,破壊行為―を地域レベルでみてみましょう。これまで地理空間をNUTSレベル０としてきました。つまり国単位で情報を扱っていました。次に,北欧社会の中でも,犯罪や暴力,破壊行為の問題にもっとも強く直面しているスウェーデンに注目し,NUTSレベルを3までブレークダウンし,より詳細な犯罪情報を地図上に描いてみます。\n上で利用したデータはNUTSレベル２の情報を提供していませんが,犯罪に関連したNUTSレベル２,3のデータとしては「犯罪記録件数」(Crimes recorded by the police by NUTS 3 regions)があります。このデータをget_eurostat()を利用し,ダウンロードします。これをcrimeという名前をつけたオブジェクトに容れます。本データのidはcrim_gen_regです。\n\ncrime &lt;- get_eurostat(id = \"crim_gen_reg\")\n\n最初に,スウェーデンをピックアップします。このためgeo変数にfilter()をかけます。抽出条件をgeo == “SE”とすると,スウェーデンの国内の行政単位のデータ―たとえば,SE1,SE2という記号で表示―は抽出条件に合致しないため,削除されてしまいます。そこで最初にstr.detect()関数を使って”SE”という文字列を持つgeo変数の行を探します。そしてそれと一致したgeo変数の行を抽出します。\n\nfilter(str.detect(geo,\"SE\"))\n\nstr.detect(geo, “SE”)はgeo変数が “SE”という文字列を含む場合,真TRUEを返します。これにfilter()を適用することによって,str.detect()関数がTRUEを返す行を抽出します。.データは2009年と2010年のみですが,ここでは2010年を採用します。\n\nfilter(Date == \"2010-01-01\")\n\n以上,必要な行の抽出が終わりです。これまでのスクリプトをまとめると,以下のようになります。抽出結果をcrime_sweという名前をつけたオブジェクトに容れてあります。\n\ncrime_swe &lt;- crime |&gt;  \nfilter(str_detect(geo, \"SE\"), time == \"2009-01-01\")\n\n次に,NUTSレベル３のデータをダウンロードし,shp3という名前のオブジェクトに容れます\n\n# NUTS分類のレベル3で地図情報を取得し,オブジェクトshp3に容れる\nshp3 &lt;- get_eurostat_geospatial(resolution = 10, nuts_level = 3, year = 2016) \n\nそれでは,crime_sweとNUTSレベル3のシェイプファイルをinner_join()関数を使って結合します。そして結合したファイルをshp3_crime_sweという名前のオブジェクトに容れます。\n\nshp3_crime_swe &lt;- inner_join(shp3,crime_swe, by = c(\"NUTS_ID\"=\"geo\")) \n\nby = “キー変数”の部分がこれまでと異なります。２つのファイルを結合するさいに,異なる変数を利用する場合,上述のようにby = c(“NUTS_ID”=“geo”)とします。NUTS_IDはshp_2の中の変数,geoはcrime_sweの中の変数です。\nこれで地図を作成するデータが出来上がりました。あとはggplot２を利用するだけです。スクリプトは次のようになります。\n\nggplot(shp3_crime_swe) +\ngeom_sf(aes(fill=values),color = \"white\",size = 0.5)+\n xlim(c(7,25))+\n scale_fill_continuous_tableau(palette = \"Classic Gray\")+\n labs(\n  title = \"Crimes recorded by the police,2010\",\n  fill = \"% the number of \\ncrimes recorded by the police\")+\n  theme_classic()\n\n\n\n\nスウェーデンにおける犯罪記録件数, 2010\n\n\nここでは単純に犯罪件数を表示させているだけですから,スウェーデンの中でも大都市圏―Stockholms県,Västra Götalands県やSkåne県等―で犯罪件数が多いことが理解されます。またグラフから理解されるように,犯罪件数には地理的な関連があるかもしれません。犯罪が多発する県の隣接する県でも多そうです。これは空間的なデータが相関していることを示唆しており,空間情報を分析するさいに注意を要する点です。",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#european-commision-annual-macro-eocnomicデータベースameco---ameco",
    "href": "MacroData.html#european-commision-annual-macro-eocnomicデータベースameco---ameco",
    "title": "R & Socio Econ",
    "section": "2.4 European Commision Annual macro-eocnomicデータベース(AMECO) - ameco",
    "text": "2.4 European Commision Annual macro-eocnomicデータベース(AMECO) - ameco\nAMECOはEUの年次マクロ経済データ集です。EU地域のマクロデータが主ですが，それ以外のOECD諸国も含まれており，40カ国を超える国のマクロデータが提供されています。AMECOサイトからはcsv,xlsx形式等でデータをダンロードすることもできます。\n\n2.4.1 amecoのインストールと読み込み\namecoはデータパッケージです。インストールし，読み込むと利用可能になります。Rパッケージamecoのインストールはinstall.packages(” “), ロードはlibrary()関数を使います。\n\n# amecoのインストール\ninstall.package(\"ameco\")\n\n# amecoのロード\nlibrary(ameco)\n\nこれでデータが利用可能になります。glimpse()関数を使ってデータをみると，8変数列×2,018,002行から構成されていることが分かります。\n\n# データ構造の概観\nglimpse(ameco)\n\nどのようなデータセットが含まれているかは，sub.chapter変数を見ればわかります。そこで同じデータセットを表示させないように，unique( )関数を利用し，sub.chapterを見てみましょう。\n\nunique(ameco$sub.chapter)\n\nこれによって102のデータのタイトルを確認できます。たとえば，93行目の”02 Factor productivity, total economy”",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#経済協力開発機構---oecd",
    "href": "MacroData.html#経済協力開発機構---oecd",
    "title": "R & Socio Econ",
    "section": "2.5 経済協力開発機構 - OECD",
    "text": "2.5 経済協力開発機構 - OECD\nOECDが提供するデータは，もちろん，OECDのサイトOECD.Stat からも取得できます。同 サイトに入ると，左側のウィンドウにテーマ別データ一覧が表示されており，ここから目的のデータを探すことができます。ウ ィンドウ上部にある検索ウィンドウからキーワード検索も可能です。\nしかし、この方法ではRから離れブラウザでデータを検索し，データをダウンロードすることになります。これは煩わしい作業であることは言うまでもなく，データ分析のための再現性も難しくなるかもしれません。こうした問題に対処するために，RパッケージOECDを利用することが推奨されます。こ のパッケージによってOECDのAPIから動的で再現性の高い方法でデータをダウンロードすることができます。\n\n2.5.1 RパッケージOECDの利用方法\nそれでは同パッケージをインストールしましょう。コ ンソール画面に次のように入力し、エンターキーを押してください。\n\n# RパッケージOECDのインストール\ninstall.packages(\"OECD\")\n\nパッケージを利用するにはlibrary()で呼び出しておく必要があります。ス クリプト画面に次のように入力し、実行しておきます。\n\n# RパッケージOECDの呼び出し\nlibrary(OECD)\n\n\n2.5.1.1 データを探す - get_datasets(), search_dataset()\nOECDのデータをダウンロードするにはデータ系列のidコードが必要となります。し かし，ほとんどの場合，正確なidコード情報を事前に保有していることは少ないと思います。そ こで最初に，利用可能なデータセットとその説明を含むデータフレームをダウンロードし，その上で検索を始めるのがベストの方法です。こ れはget_datasets()関数で実行できます。\n\n# OECDのデータフレームのリストを取得\nget_datasets() |&gt; \nhead().  # head()関数でデータフレームの冒頭部分を表示\n\nhead()関数によって最初の６行を表示させています。全 体で1,392行×2列のデータフレームが取得されます。１列目はデータセットのid，２列目titleはデータセットのタイトル名です。こ れによってOECDにおいて、どのようなデータセットが利用可能かが分かります。\nデータセットの検索方法としてはsearch_dataset()関数を使ってキーワードで検索する方法もあります。たとえば，失業”unemployment”をキーワードに検索してみましょう。こ れを実行すると，コンソール画面に”unemployment”を含んだデータ等の一覧が表示されます。デフォルトでは大文字小文字を区別しません。\n\nsearch_dataset(\"unemployment\")\n\n\n\n2.5.1.2 データセットのダウンロード - get_dataset()\nそれでは最初のデータセットDUR_I―Incidence of unemployment by duration (期間別の失業者発生比率％)をダウンロードしてみましょう。データのダウンロードにはget_dataset()関数を使います。基本的な使い方は次のようになります,\n\nget_dataset(\"dataset\", filter = NULL, start_time = NULL, end_time = NULL,pre_formatted = FALSE)\n\nこの関数がとる主要な引数は以下のとおりです.\n\ndataset : ダウンロードするデータセットのidを入力します.\nfilter= : NULLの場合、すべてダウンロードします.\nstart_time = : データの開始時点.\nend_time = : データの終了時点.\n\nこの関数を使ってDUR_Iデータを取得し，それをunempというオブジェクトに容れるとします。もっとも簡単なコードは次のとおりです.\n\nunemp&lt;- get_dataset(\"DUR_I\")\n\nstr(unemp)でデータフレームの中をみると，8変数，155,924の観察値のデータセットがダウンロードされたことが分かります。str()関数はデータフレームの変数（列）や観測値（行）についての情報を出力させる関数です.\n\nstr(unemp)\n\n引数を指定した形でデータをダウンロードしてみましょう。引数filterを使って日本とドイツのデータ，引数start_tim,end_timeで期間を1990年から2019年のデータをダウンロードするとします。このためにはスクリプトに次のように入力するだけです，\n\nunemp &lt;- get_dataset(\"DUR_I\",filter=list(c(\"JPN\",\"DEU\")),start_time = 1990,end_time = 2019)\n\nまた，たとえば，filter = “age”のように、変数についてもfilterを適用できます。\n\n\n2.5.1.3 データ構造を調べる - get_data_structure()\nダウンロードしたデータの内容は，上述のように，str()関数やView()関数を利用して確認することができます。しかし，これだけではそれぞれの変数が何を意味するのか分からない場合があります。たとえば、DURATION変数が「（失業）期間」を表現していることは分かりますが，しかし，その変数がとる “UN1”, “UN3”といった値が何を意味しているかは分かりません。このためデータ構造をチェックする必要があります。\nデータ構造のチェックにはget_data_structure()関数を利用します。同関数は指定したデータシリーズの変数名とその説明を返します。\n\n# DUR_Iのデータ構造の説明を取得、data_strに容れます.\ndata_str&lt;-get_data_structure(\"DUR_I\")\n# str()関数でdata_strの中を見ます.\nstr(data_str,max.level = 1)\n\nこのケースでは表示レベルをmax.level = 1を使い，１に指定しています。max.level=を利用せずに，str(data_str)と入力しても，類似した情報が得られますが，出力画面が煩雑になるので，この例ではmax.level=1に抑えています。\nコンソール画面に上のように入力し，エンターキーを押すと，図のような出力結果が得られます。DUR_Iの説明を見ると，VAR_DESCをはじめとし，あわせて12の変数があることが分かります。ここでDURATION変数の詳細を確認してみましょう。コンソール画面にdata_str$DURATIONと入力し，エンターキーを押してみてください。.$記号はデータフレームの中の変数を指定する方法です。つまり、data_str$DURATIONは「データフレームdata_strの中の変数DURATIONを指定」を意味します。\n\n#データフレームdata_strの中の変数DURATIONを指定.\ndata_str$DURATION\n\nこれにより変数DURATIONのとる値が何を意味しているかを示した一覧が出力されます。これをみると，変数DURATIONの値”UN1”は１月未満,“UN2”は１月以上３ヶ月未満の失業期間を示すことが分かります。\n続けて変数AGEのデータ構造も確認しておきましょう。コンソール画面にdata_str$AGEと入力し、エンターキーを押します。\n\n#データフレームdata_strの中の変数AGEを指定.\ndata_str$AGE\n\nこのように，AGE変数はid列に記載されているように1519や1524など７つの値をとります。そしてlabelに示されているように，それぞれ年齢階層に対応しています。たとえば、6599という値は65+と表示されていますので，65歳以上ということが分かります。つまり65歳以上の失業者数です。年齢に関係ない総数は900000という数値で表現されています。\nさらに失業者の性別を表現する変数SEXをチェックしておきましょう。\n\n# データフレームdata_strの中の変数SEXを指定\ndata_str$SEX\n\n変数SEXは３つの値をとることが分かります。MEN(男性)，WOMAN(女性)およびMW(両者の合計)です。",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#金融データを取得する-imf",
    "href": "MacroData.html#金融データを取得する-imf",
    "title": "R & Socio Econ",
    "section": "2.6 金融データを取得する ― IMF",
    "text": "2.6 金融データを取得する ― IMF\n\n2.6.1 国際通貨基金(IMF) - imfr\n国際通貨基金IFMは金融データを中心に多くのデータを公開しています。Rにはそうしたデータを取得するために便利なRパッケージimfrが開発されています。最初にインストールします。\n\ninstall.packages(\"imfr\")\n\n続けて、library()関数で呼び出します.\n\nlibrary(imfr)\n\nこれでRパッケージimfrが利用可能となります。I MFがAPIをつうじて公開するデータをダウンロードするには関数imf_data()を利用します.\nこのimf_data()は以下の引数をとります.\n\nimf_data(\ndatabase_id = \"\",\nindicator = \"\",\ncountry = \"\",\nstart = 2000,\nend = current_year(),\n)\n\n\ndatabase_id = ” ” :ダウンロードしようとする特定のデータベースのIDを指定します。\nindicator = ” “: ダウンロードしようとするIMFの指標IDを指定します。\ncountry = ” “: ISOの２桁コードを使って国を指定します。.country = ’all’とした場合、利用可能な国すべてのデータがダウンロードされます。\nstart =, end = : データの開始年と終わりの年を指定します。\nfreq: 年次データ(A)、四半期データ(Q)および月次データ(M)かを指定します。たとえば、年次データを取得する場合には、freq = \"A\"と指定します。\n\nそれではimfrを利用し，IMFからデータをダンロードしてみましょう。ここでの例では，アメリカ，中国および日本の実効為替レートデータをダウンロードし，exch_rateというオブジェクトに容れます。\n\nexch_rate &lt;- imf_data(database_id = \"IFS\",\nindicator = \"EREER_IX\",\ncountry = c(\"US\", \"CN\", \"JP\"),\nfreq =\"A\")\n\n上のスクリプトを実行することでアメリカ，中国および日本の実効為替レートがダウンロードされます。この実効為替レートは消費者物価にもとづく指数です。ダウンロードされたデータはデータフレーム形式で保存されます。str(exch_rate)でデータの構造・内容を確認してみます。\n\nstr(exch_rate)\n\n\n\n2.6.2 imfrの利用方法\n上の例で理解されるように，データをダウンロードするためにはdatabase_id = ““に入力するデータベースID、およびindicator =”“に入力する指標IDの情報を取得しておく必要があります。このために３つの手順をとります.\n\n手順1 データベースを探す― imf_ids( )\n手順2 特定のデータベースのコードリストを取得する - imf_codelist()\n手順3 指標IDを取得する - imf_codes()\n\n以下の例ではデータベースInternational Financial Statistics(IFS)から実効為替レートをダウンロードすることを想定した手順を紹介します。\n手順1 どのようなデータベースがあるのか ― imf_ids( )*\nデータベースのIDを取得するための関数imf_ids（）を利用します。これを実行した結果をdbIDという名前をつけたオブジェクトに容れるとします。\n\ndbID &lt;- imf_ids(return_raw = FALSE, times = 3)\n\nimf_ids()は２つの引数を取ります.\n\n引数return_rawは論理値すなわちTRUEかFALSEを取ります。上の例のように，return_raw = FALSEと指定した場合，IDとその説明が入ったデータフレームが返されます。return_raw = TRUEの場合には，生のデータフローのリストが返されます.\ntimesは要求の最大回数を指定します.\n\n\nView(dbID)\n\nView()関数によってdbIDの内容を見てみましょう。次のようなデータベース一覧が出力されます。\nIMFデータベース一覧\nimf_ids()の結果を容れたオブジェクトdbIDの中には260行×２列のデータフレームが入っています。つまり260のデータベースIDが表示されます。View(dbID)によってデータフレームdbIDを内容を見てください。２列の変数すなわちデータベースIDとその説明が表示されます。これを下にスクロールしていくと，IFSというデータベースIDとその説明 ―International Financial Statistics―が見つかります。このIFSがデータをダウンロードするさいimf_data()関数の引数database_id = ““に入力するデータベースIDとなります。\n手順2 IFSデータセットの中の指標名を探す ― imf_codelist()\n次に，個別のIMFデータベース―この例では”IFS”―からコードリストを取得します。基本的なスクリプトの書き方は次のようになります. 　\n\nimf_codelist(database_id, return_raw = FALSE, time = 3)\n\nこれを使って手順１で取得したdatabase_id ―“IFS”― を利用し，データセットの中のcodeリストを取得します。ここではその結果をcodeListという名前をつけたオブジェクトに容れます。\n\ncodeList &lt;- imf_codelist(database_id = \"IFS\", return_raw = FALSE, times = 3)\n\nimf_codelist()関数は個別IMFデータベースのコードリストを取得しますが，この関数は次の３つの引数をとります.\n\ndatabase_id: imf_ids()で取得したデータベースID（文字列）を入力します.\nreturn_raw: TRUEかFALSEかの論理値をとります。TRUEを指定した場合、もとのデータ構造リストを返し、FALSEを指定した場合、コードリストのコードと説明の入ったデータフレームを返します.\ntimes: 要求回数を入力します.\n\nこれによってデータベースIFSが持つコードリストが取得されます。View(codeList)で中身をみると，次のような一覧が表示されます.\nコードリスト\nこのコードリストのdescription(説明)から理解されるように、指標IDは４行目のcode CL_INDICATOR_IFSに入っていることがわかります.\n手順3. 指標IDを取得する ― imf_codes( )\n最後に、“CL_INDICATOR_IFS”を使って指標IDを取得します.このためにはifm_codes()関数を利用します。こ の書式はつぎのようになります.\n\nimf_codes(codelist = \"\", return_raw = FALSE, times = 3)\n\nこれによってimf_data()関数の引数indicator = \"\"に指定する指標コードを取得することができます.この関数を利用し、IFSの中の指標コードを取得してみましょう.関数imd_codes()は個別のデータベースのコードを取得しますが、この関数もimf_codelist()と同様の引数をとります.ただし引数codelist = ““にはimf_codelist()によって取得したコード名を入力します.\n\nindicatorID &lt;- imf_codes(codelist = \"CL_INDICATOR_IFS\", return_raw = FALSE, times = 3)\n\nこれによって1679行×２列のデータフレームが得られます.View(indicatorID)によって内容を表示すると、指標コード名とその説明の一覧をみることができます.これによってimf_data()を使ってデータをダウンロードするさいに必要な情報、すなわち引数indicator =　““に入力する指標コードの情報が得られます.２列目の指標の説明を下にスクロールさせ、Exchange Rates, Nominal Effective Exchange Rate, Indexを見つけてください.これに対応する１列目の指標コードENEER_IXが入力する情報です.\n指標コード一覧\n以上の情報にもとづいてデータそのものがダウンロードできます.再度、スクリプトを表示しておきます.\n\nexch_rate &lt;- imf_data(database_id = \"IFS\",\nindicator = \"ENEER_IX\",\nindicator = \"ENEER_IX\",\ncountry = c(\"US\", \"CN\", \"JP\"),\nfreq =\"A\")\n\nダウンロードした情報をもとにggplot2を利用して描いたグラフを描いてみましょう.\n\nggplot(data = exch_rate, mapping = aes(x= year, y = ENEER_IX))+\ngeom_line(aes(lty = iso2c))+\ntheme_minimal()\n\n2000年台初頭、３カ国とも実効為替レートは低下傾向にありますが、2000年台半ばより、まず最初に中国、そして日本の為替レートが上昇し始めます.その後、アメリカと中国の実効為替レートは上昇し続けますが、日本は両国に比べ大きく低下し、明確に異なった為替レートの軌跡を描きます.\n2011年に東日本大震災が発生し、日本経済はリーマンショックを超える大幅な落ち込みを見せ、不況に突入しました.2012年末に発足した第2次安倍政権は、デフレ経済からの脱却を目指し、大胆な金融緩和を実行しましたが、その結果が実効為替レートの低下に反映されたと考えられます.「日本株」はお買い得となり、海外からの投資が増加し、日経平均株が上昇します.同時に、円安は輸出を刺激し、輸出に牽引され日本経済は回復に向かいます.",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#iloデータベース---riolstat",
    "href": "MacroData.html#iloデータベース---riolstat",
    "title": "R & Socio Econ",
    "section": "2.7 ILOデータベース - Riolstat",
    "text": "2.7 ILOデータベース - Riolstat\nこのRパッケージは、ILO統計局のオンラインデータベースであるILOSTATに含まれるデータにアクセスし、ダウンロードし、操作するためのツールを提供します。ILOSTATのデータと関連するメタデータは、ILOSTATのウェブサイトからも直接入手できます。\nILOのILOSTATは労働市場統計の世界最大のリポジトリです。このデータベースには雇用、失業、賃金、労働時間、労働生産性など、すべての国と地域と幅広い労働関連のトピックをカバーしています。これには、1938年までさかのぼる時系列、年次、四半期、毎月の労働統計、国レベル、地域、世界の推定値等が含まれます。\nILOstat Rパッケージ('Rilostat')を利用することで、ILOSTATデータベースにアクセスし、データを検索し、ダウンロードすることができます。さらにはそうしたデータの可視化をすることも可能です。\n最初に，Rパッケージilostatをインストールし，ロードしておきましょう。\n\n# Rilostatのインストール\n instatll.packages(\"Rilostat\")\n# Rilostatの読み込み\n libarry(Rilostat)\n\n\n2.7.1　データを探す\n第1のステップはデータを探すことです。このためにはダウンロードしようとするデータの指標コードもしくは参照領域(参照領域 - 国や地域)の情報が必要とります。そうした情報を取得するためにはget_ilostat_toc( )関数を利用します。\n\n# ILOSTATで利用可能な全指標を表示\nget_ilosta_toc()\n\nこの結果次のような16列×1,670行のデータセットの一覧が表示されます。id 列がデータをダウンロードするさいに利用する指標コードとなります。1,670の指標が提供されていることが理解できます。\n\n\n\nget_ilostat_toc()の出力結果\n\n\nより絞り込んでデータセットを探すにはget_ilostat_toc()のとる引数を指定します。この関数は5つの引数をとります。\n\nsegment = ” “: 指標を探す場合，”indicator”（デフォルト）を入力，国・地域のデータを探す場合は”ref_area”を指定します。searchでindicatorを探す場合，indicatorがデフォルトですの指定は不要となります。\nlang = ” “: 英語の場合en（デフォルト）, フランス語の場合fr，スペイン語の場合esを入力します。デフォルトで利用すると思いますので，指定しなくとも問題はありません。\nsearch = ” “:”none”がデフォルトになります。“検索語が入力された場合，その文字列と一致するデータセットが抽出されます。\nfilters = ” “: リスト; none(デフォルト)でtoc全体を取得し、フィルタの名前付きリストでテーブルの一部だけを取得します。リストオブジェクトの名前は ilostat toc( ) の変数コード、値は観測コードのベクトル\nfixed = ” “: 真の場合（デフォルト）, より複雑な正規表現のマッチングが必要な場合は FALSE に変更します。\n\nいくつかの例を示しましょう\n\n# \"education\"を含むデータセットを探す\nget_ilostat_toc(search = \"education\")\n\n# アルバニアのデータセットを探す\nget_ilostat_toc(segment = \"ref_area\", search = \"Albania\")\n\n# searchに\"youth\"と\"\"adult\"を含むデータセットを探す\nget_ilostat_toc(search = \"youth | adult\", fixed = FALSE)\n\n# 失業または若者のデータセットを探す\nget_ilostat_toc(search = \"unemployment | youth\", fixed = FALSE)\n\n\n\n2.7.2 データをダウンロードする\nデータをダウンロードするためにはget_ilostat( )関数を使います。この関数の主要な引数は次のようになります。\n\nid = ” “: データセットのid名を入力します。たとえば id =”LUU_XLU2_SEX_EDU_RT_A”\nsegment = ” ” : “indicator”（デフォルト）もしくは”ref_area”を入力します。\nfilters = : データセット全体を取得する場合は none (デフォルト)，データテーブルの一部だけを取得する場合はフィルタの名前付きリスト. リストオブジェクトの名前はilostatの変数コードであり、値は観測コードのベクトル. フィルターは変数を検出するので、部分的である可能性がある。追加オプション：\ntimefrom : データセットの開始年.\ntimeto : データセットの終了年.\n\nfiltersについては以下の例を参考にしてください。それではこの関数を利用してILOSTATのデータをダウンロードしてみましょう。\n１つのデータセットを取得する\n\nget_ilostat(\"UNE_2UNE_SEX_AGE_NB_A\"), segment = \"indicator\")\n # segmentのindicatorはデフォルトですので省略可能 \n\n複数のデータセットを取得する\n\n# ２つのデータをダウンロードする\nget_ilostat(c(\"CPI_ACPI_COI_RT_M\", 'CPI_ACPI_COI_RT_Q'), cache = FALSE)\n\n# ２つの地域－アフガニスタンとトリニダード・トバゴ－の年次データをダウンロードする\nget_ilostat(id = c(\"AFG_A\",\"TTO_A\"), segment = \"ref_area\")\n\nfiltersを使ってデータセットを取得する\n\nget_ilostat(id = c(\"UNE_2UNE_SEX_AGE_NB_A\",'EMP_2EMP_SEX_AGE_NB_A'), \n        filters = list( ref_area = \"FRA\", \n        classif1 = \"AGE_YTHADULT_YGE15\", \n        time = \"2016\",\n        sex = c(\"T\", 'SEX_F')), quiet = TRUE)",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#オープンデータポータル---dbnomics",
    "href": "MacroData.html#オープンデータポータル---dbnomics",
    "title": "R & Socio Econ",
    "section": "2.8 オープンデータポータル - DBnomics",
    "text": "2.8 オープンデータポータル - DBnomics\nフランスの数理経済計画予測研究所(CEPREMAP)のマクロ経済分析チーム「マクロ経済観測所」に所属するCEPREMAPモデリングチームは、広範囲な経済モデルを扱うためのソフトウェアDynareの開発と同時に、国内外の公開された経済データを集約したオープンデータポータルDBnomicsを運営しています.\nDBnomicsは世界の経済データを一箇所に集め、しかも無料で一般に公開することを目的としたオープンソースプロジェクトです.具体的には、国内機関や国際機関 ― Eurostat, World Bank, IMF, ECB等、87のデータ提供組織・機関 ― から収集された何百万ものデータ系列が提供されています.すでにこれまでに紹介したEurostat, OECD, IMF, BISおよびPenn World Tableも提供されています.\nたとえば、2-5でダウンロードしたデータはDBnomicsにおいても取得できます.imfrを使って得た実行為替レートは次のように入力することで得ることできます.\n\nexch_rate_3c &lt;- rdb(ids = c(\"IMF/IFS/A.CN.ENEER_IX\",\"IMF/IFS/A.JP.ENEER_IX\",\"IMF/IFS/A.US.ENEER_IX\"))\n\nBISによって取得した長期政策利子率を取得するためには次のように入力します.\n\npolicyrate3c &lt;-rdb(ids = c(\"BIS/cbpol/M.JP\", \"BIS/cbpol/M.SE\",\"BIS/cbpol/M.US\"))\n\n\n2.6.1 Rパッケージ - rdbnomics\nこのデータの利用を容易にするためにrdbnomicsと呼ばれるRパッケージが開発されています.rdbnomicsパッケージは、DBnomics データシリーズへのアクセスを提供します. ダウンロードするデータ系列の指定にあたっては統一的な方法が採用されています.後で示すように、データの取得にあたってはrdb()関数のidb = 引数で指定しますが、そのさい、データ提供組織名/データセット名/データ系列名という形で指定します.たとえば、rdb = WHO/WHS6/WHS6_102.DEU.Aは、データを提供する組織がWHO, データセット名がWHS６、データ系列名はWHS6_102.DEU.Aです.また系列名の末尾のDEUはドイツを示す３文字の国コード、Aは年次データであることを示しています.\n\n2.6.1.1 rdbnomicsのインストール\nRパッケージDBnomicsをインストールするには他のRパッケージと同様に次のように入力します。\n\n install.packages(\"rdbnomics\")\n library(rdbnomics)\n\n\n\n\n2.6.2 rdbnomicsの利用方法\n\n2.6.2.1 rdb()関数を利用したデータ系列の取得\nデータをダウンロードするためには、rdb()関数を利用します。こ の関数の利用にあたっては３つの情報が必要となります.\n\nデータの提供機関のコードprovider_code\nデータセット・コードdataset_code\nデータ系列コードseries_code\n\nこの３つの情報をrdb()関数の引数ids = において指定します.ids引数の書き方は次のようになります.\n\nids = 提供機関コード/データセット・コード/データ系列コード\n\n実際に世界保健機構WHOが提供するドイツの「病床数（人口１万人あたり）」データを取得してみましょう.このためには上の３つの情報が必要となります.データ提供機関コードはWHO, データセット・コードはWHS6, データ系列コードはWHS6_102.DEU.Aです.取得したドイツ病床数データをbeds_deuというオブジェクトに容れるとすると、次のようなスクリプトでダウンロードすることができます.\n\nbeds_deu &lt;- rdb(ids = \"WHO/WHS6/WHS6_102.DEU.A\")\n\n結果をstr()関数を使い、beds_deuの変数を確認してみましょう。\n\nstr(beds_deu)\n\n21の変数（列）がbeds_deuに格納されていることが分かります.ids()関数を利用し、データを取得すると、少なくとも次の10の変数を得ることができます.\n\ndataset_code\nprovider_code\ndataset_name\nseries_code\noriginal_period\nperiod\noriginal_value\nvalue\n@frequency\n\nデータベースごとに異なりますが、上記以外に単位unit、地理情報geo、年次、四半期別等の情報freqを取得することもできます.\n以下のグラフはデータフレームbeds_deuのデータををもとggplotを利用し、ドイツの病床の時系列変化のグラフを描いたものです.\n\nggplot(data = beds_deu, mapping = aes(x = period,y = value))+\n geom_line()+\n labs(x = \"year\",\n y = \"per 10000 pupulation\", subtitle = \"Hospital beds (per 10 000 population) in German\")+\n theme_bw()\n\n\n\n\n\nドイツの病床数\n\n\n繰り返しになりますが、上述のように、データ系列を取得するためは３つの情報が必要となります.そこで３つの情報を取得するための方法を順番に紹介して行きましょう.\n\nデータを提供する機関のコード名\nその機関の提供するデータセットのコード名\nデータ系列のコード名\n\n1. 機関のコード名の取得\n機関コード名はrdb_providers()関数を利用することで取得できます.\n\nrdb_providers(code = TRUE)\n\ncode = 引数はTRUEかFALSEの論理値をとり、既定値はFALSEです.上のように、code = TRUEとした場合、提供機関のコード名が表示されます.既定値FALSEにした場合、機関コード名の他に機関名nama、カバー地域region、ホームページアドレスweb site等が表示されます.\n2. データセットコードの取得\nこのコードの取得のためにはrdb_datasets()関数を使います.この関数では特定の機関を指定せずに、すべてのデータセットのリストをダウンロードすることもできますが、rdb_providers()で取得した機関コード指定した方が効率的です.\n\nrdb_datasets(provider_code = \"IMF\")\n\nこれでIMFの提供するデータセット一覧を取得できます.\n3. データ系列リストの取得\n次に、提供機関IMFのデータセットIFSに、どのようなデータ系列が保存されているかをみます.このためにはrdb_series()関数を利用します.\n\nrdb_series(provider_code = \"IMF\", dataset_code = \"IFS\")\n\n以上の手順1 ~3はDBnomicsのホームページにおいても行うことができます.ホームページにおいて下の方にスクロールすると、[DBnomics providers]一覧が掲載されています.[IMF]International Monetary Fund選択すると、データセットの一覧を見ることができます.さらに、ここでデータセットInternational Financial statistics (IFS) [IMF/IFS]を選択すると、IFSが有するデータ系列を選択し、ダウンロードすることができるようになっています.\n以上でDBnomicsの基本的な利用法の説明は終了です.続けていくつかの利用パタンを紹介しましょう。\n\n\n2.6.2.2 同一のデータセットから複数のデータ系列を取得する\n次に、複数のデータ系列をダウンロードする方法を紹介しましょう.これはc( )を使い、その中にデータ系列名を並べて書くことで簡単にダウンロードできます.以下のスクリプトがその例です.ダウンロードした結果は、beds3cというオブジェクトに格納されています.\n\nbeds3c &lt;- rdb(ids = c(\"WHO/WHS6/WHS6_102.DEU.A\", \"WHO/WHS6/WHS6_102.JPN.A\", \"WHO/WHS6/WHS6_102.USA.A\"))\n\nここでは、WHOのWorld Health Statistics[WHS6]からドイツ、日本およびアメリカの病床データ -―WHS6_102.DEU.A、WHS6_102.JPN.A、WHS6_102.USA.A ―-をダウンロードし、オブジェクトbeds3cに容れています.\nbeds3cのデータをもとに３カ国のプロットを描くと、ドイツの病床の水準は日本とアメリカの中間にあるようです.一般的に言われているように、日本の病床数は多く、アメリカの病床数は低い水準にあることが分かります.また、いずれの国も傾向的には病床数は減少しているようです.\n\n\n\nドイツ，日本およびUSAにおける病床数\n\n\nこのグラフは次のスクリプトによって描くことができます.\n\nggplot(data = beds3c, mapping = aes(x = period, y = value))+\ngeom_line()+\nfacet_wrap(~Country)+\ntheme_minimal(base_size = 9)+\nlabs(x = NULL, y = NULL)\n\nこのスクリプトでも、facet_wrap()関数を利用し、国別の複数のグラフを作成しています.facet_wrap()は使い方は次のようになります.\n\nfacet_wrap(vars(分類する基準となる変数))\n\nまた、テーマはtheme_minimal()を利用し、シンプルなテーマを選択しています.表示文字のサイズはbase_size = を利用し、９ポイントに指定しています.\nこの例ではWHOのWorld Health Statistics[WHS6]というデータセットを利用しました.この他にWHOからは次の４つのデータセットが提供されています.International Health Regulations (2005) monitoring network, Sustainable development goals, Health workforceおよびRoad Safetyです。\n\n\n2.6.2.3 異なったデータセットから異なったデータ系列の取得\n次に異なったデータセットから異なったデータ系列をダンロードしてみましょう.同じWHOの中にHealth workforce[WHO/HWV]というデータセットがあり、その中に「医師数（人口１万人あたり）」のデータが提供されています.病床数と一緒に、このデータも取得してみましょう.いずれも日本のデータです.この例では結果をbed_mdというオブジェクトに容れます.\n\nbeds_md &lt;- rdb(ids = c(\"WHO/WHS6/WHS6_102.JPN.A\",\"WHO/HWF/HWF_0001.JPN.A\"))\n\nnames()関数を利用し、beds_mdが持つ変数一覧を表示させてみましょう.\n\n names(beds_md)\n\nデータフレームbeds_mdが25変数（列）を持っていることが分かります.変数（列）はDBnomicsでは統一されています、つまり病床数データと医師数データは同一の変数の中にあります（異なる場合、変数列が追加されます）.このため病床数データの行が終了すると、医師数データの行が追加されてます.\nこのためデータを処理するさい、INDICATORもしくはseries_code変数によって識別する必要があります.\nデータフレーム名$変数名を使ってデータフレームの変数を指定し、INDICATORを表示させると、19行めまではWHS6_102ですが、20行めからはHWF_0001であることが分かります.つまり19行めまではベッド数データ、20行めからは医師数のデータであることが分かります.\n\n beds_md$INDICATOR\n\n次に、このデータを使って医師数とベッド数の推移のグラフを描いていみましょう.\n最初に、このINDICATORをもとにベッド数と医師数データをそれぞれ別のデータフレーム―beds_jpn, doctor_jpn―に容れます.\n\n beds_jpn &lt;- beds_md |&gt; filter(INDICATOR == \"WHS6_102\")\n\n\ndoctor_jpn &lt;- beds_md |&gt;  filter(INDICATOR == \"HWF_0001\")\n\nいずれもfilter()関数を使ってベッド数のデータの入っている行（もしくは医師数のデータの入っている行）を抽出しています.なお、filter()関数の書き方は\n\nfilter(データフレーム名、抽出条件)\n\nです.ただし、この例ではパイプ(|&gt;)で連結していますので、データフレーム名は省略しています。抽 出条件はINDICATOR == \"WHS6_102\"です。こ れはINDICATOR変数が文字列”WHS6_102”に等しい行だけを抽出しなさいということを意味します。\n最後に、抽出した結果つまりデータフレームをggplot()に渡します。そ してggplot2を使って描いたグラフをオブジェクトbeds_figに容れます。\n\nbeds_fig &lt;- ggplot(data = beds_jpn, mapping = aes(x = original_period, y = value, group = INDICATOR)) +\n\n\ngeom_line()+\nlabs(subtitle = \"Hospital beds (per 10 000 population)\",\nx = NULL, y = NULL)+\nscale_x_discrete(breaks = seq(2000, 2019,5))+\ntheme_minimal()\n\nbeds_figの作成にあたってはscale_x_discrete()を利用し、x軸のラベルを変更しています.x軸の変数’orignal_period’は見た目では連続変数ですが、じっさいには文字列変数です.データフレームbeds_jpnの中のoriginal_period変数にclass()を適用すると、\n\nclass(beds_jpn$original_period)\n\n’orignal_period’変数が文字列であることが分かります。変 数の型を変換しても良いのですが、ここではそのまま文字列として扱い、x軸のラベルを変更します。こ のためにscale_x_discrete()を利用します. discreteは離散変数を意味し、x軸を離散変数として扱うことを示しています. 引数breaks =によってラベルの表示範囲を指定します. seq(2000, 2019, 5)は開始年を2000年とし、最後の年を2019とし、5年おきにラベルをつけるということを指示しています.\nさらに、annotate()関数を使い、注釈をグラフに入れてあります.annotate(“text”, x = 12, y = 145, label = ““)が示しているように、annotate()関数を使ってテキスト注釈を挿入する場合は、”text”,そしてテキストの位置をx軸とy軸の座標で指定します。そ の上で挿入する注釈をlabel = \"\"に記入します。\n同様に、医師数データを表示するスクリプトは次のようになります\n\ndoctor_fig &lt;- ggplot(data = doctor_jpn, mapping = aes(x = original_period, y = value, group = INDICATOR))+\ngeom_point(shape = 16, size = 2)+\n labs(subtitle = \"Medical doctors (per 10,000)\",\n  x = NULL, y = NULL)+\n  scale_x_discrete(breaks = seq(1990, 2019, 5))+\n theme_minimal()\n\n以上の2つのグラフ – beds_figとdoctor_fig – を表示させますが、そのさい、グラフのレイアウトを調整するRパッケージ’patchwork’を使い、2つのグラフを縦に並べています.\n\nbeds_fig/doctor_fig\n\n\n\n\n日本における病床数と医師数\n\n\n\n\n2.6.2.4 異なったデータ提供機関および異なったデータセットからデータ系列を取得する\nこれまではWHOという同一の機関からデータを取得してきましたが、最後に、異なった機関からのデータを取得する方法を紹介しておきましょう.\nたとえば、アメリカにおける2000年台以降の失業率と自殺率の関連を知りたいとします.このためにWDIからは自殺率、ILOから失業率をダウンロードするとします.各種の機関・組織からデータを収集しているDBnomicsではデータベース横断的なデータの取得がとても簡単です.上で紹介した方法と同様に、rdb()関数を利用し、引数ids =にWDIとILOのデータを指定するだけです.\nWDIの提供するアメリカの自殺率データのDBnomics形式の指標名は次のとおりです.ここでは性別の２種類のデータが指定されています.“WB/WDI/SH.STA.SUIC.MA.P5-US”と“WB/WDI/SH.STA.SUIC.FE.P5-US”です.\nダウンロードには上述のようにrdb(ids = \"\")を利用します.\n\nsuicide &lt;- rdb(ids = c(\"WB/WDI/SH.STA.SUIC.MA.P5-US\",\"WB/WDI/SH.STA.SUIC.FE.P5-US\"))\n\n\nggplot(data = suicide, mapping = aes(x = as.integer(original_period), y = value,group = series_name ))+\ngeom_line(aes(color = series_name))+\nlabs(\nsubtitle = \"Suicide mortality rate (per 100,000 female population)\",\n x = NULL, y = NULL\n)+\nscale_color_hue(name = \"\",labels = c(\"Female\", \"Male\"))+\nxlim (2000,2020)+\ntheme_minimal()\n\nこのグラフは自殺率データをもとに描いたグラフです.グラフのx軸にはoriginal_period変数が利用されています.この変数original_periodは文字列型です.\n\nclass(suicide$original_period)\n\nグラフのx軸にするにはこのデータ型は扱いづらいのでグラフ作成にあたってはas.integer()関数によって整数型に変化しています.\n\n class(as.integer(suicide$original_period))\n\nケース・ディートン著『絶望死のアメリカ―資本主義がめざすべきもの』は、おもにアメリカ疾病予防管理センター（CDC）のデータをもとに1990年台から低学歴白人アメリカ人中年男性の自殺率だけが急増している事実を報告しています.グラフは学歴別ではありませんが、男性の自殺率が、女性に比べ、高い水準にあり、とりわけリーマンショック後に急増していることが伺えます.\nまた、失業率データは45-54歳年齢の男性データを利用します.これは学歴別の失業率データです.\n\n“ILO/UNE_DEAP_SEX_AGE_EDU_RT/USA.BA_453.AGE_10YRBANDS_Y45-54.EDU_ISCED11_3.SEX_M.A”\n“ILO/UNE_DEAP_SEX_AGE_EDU_RT/USA.BA_453.AGE_10YRBANDS_Y45-54.EDU_ISCED11_6.SEX_M.A”\n\n\nunemp &lt;- rdb(ids =c( \"ILO/UNE_DEAP_SEX_AGE_EDU_RT/USA.BA_453.AGE_10YRBANDS_Y45-54.EDU_ISCED11_3.SEX_M.A\",\"ILO/UNE_DEAP_SEX_AGE_EDU_RT/USA.BA_453.AGE_10YRBANDS_Y45-54.EDU_ISCED11_6.SEX_M.A\"))\n\n学歴別の中年(45-54歳)男性の失業率の推移を見てみましょう.期待どおりですが、低学歴グループが高い失業率を示しています.\n\nggplot(data = unemp, mapping = aes(x = original_period, y = value,group = classif2))+\ngeom_line(aes(color = classif2))+\nlabs(\nsubtitle = \"Male unemployment rate, by education level\", x = NULL, y = NULL\n)+\nscale_color_hue(name = \"\",labels = c(\"Upper secondary \\neducation\", \"Bachelor's \\nor equivalent level\"))+\nscale_x_discrete(breaks = seq(1990, 2019,5))+\ntheme_minimal()\n\n\n\n\n学歴別失業率\n\n\nグラフから理解されるように、あきらかに低学歴グループの失業率が、学士卒のグループよりも高いことが分かります.つまり、このデータは労働市場のショックが不均等に低学歴グループに影響を与えることを示しています.\n最後に、こうした低学歴失業率と自殺率の単純な相関を観察してみます.このために次の4つの手順を踏みます.\n\n自殺率データから男性の自殺率だけを抽出する\n失業率のデータから低学歴男性の失業率を抽出する\n上の２つのデータを結合する\n必要な変数のみ取り出し、ggplot2によって散布図を描く\n\n\n1. 自殺率データから男性の自殺率だけを抽出する\nデータフレームsuicideにfilter()関数を適用し、series_code が “WB/WDI/SH.STA.SUIC.MA.P5-US” に一致する行を取り出します.そしてその結果をsuicide_maleという名前のオブジェクトに容れます.\n\nsuicide_male &lt;- suicide |&gt; \nfilter(series_code == \"WB/WDI/SH.STA.SUIC.MA.P5-US\" )\n\n2. 失業率のデータから低学歴男性の失業率を抽出する\n　　同様に、filter()関数を使い、データフレームsuicideから低学歴中年男性の失業率を抽出します.具体的には、classif2が”EDU_ISCED11_3”に一致する行を取り出します.ここでは抽出された結果はunemp_low_edというオブジェクトに容れます.\n\nunemp_low_ed &lt;- unemp |&gt; \nfilter( classif2 == \"EDU_ISCED11_3\")\n\n3. 上の２つのデータを結合する\n　上で抽出した２つのデータフレームを結合します.このためにはinner_join()関数を利用します.たとえば、A,Bという２つのデータフレームを結合するとします.この場合、inner_join()は次のように書きます. 　\n\ninner_join(データフレームA、データフレームB, by = \"結合の基準となる変数名\")\n\nそれではこの関数を使い、２つのデータフレーム — suicide_maleとunemp_low_ed — を結合します.結合にあたっての共通の変数はoriginal_periodになります.結合されたデータフレームはsuicide_unemploymentというオブジェクトに容れます.\n\nsuicide_unemployment &lt;- inner_join(suicide_male,unemp_low_ed,by = \"original_period\")\n\n4　必要な変数のみ取り出し、ggplot2によって散布図を描く\n次に、select()関数を利用し、必要な変数を取り出します.その際、変数名も変更しておきます.select()関数は引数に抽出する変数名を入力するだけですが、変数名を変更する場合は新しい変数名 = 古い変数名と入力します.\n\nsu &lt;- suicide_unemployment |&gt; \nselect(original_period,suicide_rate = value.x, unemp_rate = value.y)\n\nこの例では結果をsuというオブジェクトに格納しています.このデータフレームを利用し、最後に、ggplot2で自殺率と失業率の散布図を描くとします.\n\nggplot(data = su, mapping = aes(x = unemp_rate, y = suicide_rate))+\n geom_point(size = 1)+\n geom_smooth(se = FALSE,size = 1,color = \"gray\")+\n scale_y_continuous(\n labels = scales::number_format(accuracy = 0.1))+\n scale_x_continuous(\n labels = scales::number_format(accuracy = 0.1))+\n labs(\n x = \"Male unemployment rate (45-54), \\nupper secondary education \", y = \"Male suicide mortality rate \\n(per 100,000)\"\n )+\n theme_minimal()+theme(text = element_text(size = 9))\n\n\n\n\n男性自殺率vs.低学歴中年労働者失業率\n\n\nグラフ作成にあたって利用されたデータがそれほど適切なものではないため、とくに男性失業率の年齢階層別データを利用していないために、失業率と自殺率の間に何らかの関連を見出すことはできませんでした。",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#footnotes",
    "href": "MacroData.html#footnotes",
    "title": "R & Socio Econ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n詳細については，http://www.ggdc.net/pwt/ で提供されている Feenstra, Inklaar, and Timmer (2016, 2015) を参照してください。↩︎\nChris Brunsdon, Lex Comber著(湯谷啓明・工藤和奏・市川太祐訳)『Rによる地理空間データ解析入門』共立出版, 2018年.↩︎\nスティーグ・ラーソン著『ミレニアム』（早川文庫）シリーズの主人公.↩︎\nヴァルランダーシリーズ,ヘニング・マンケル著『リガの犬たち』（創元社）.↩︎\nHamilton NE and Ferry M (2018). “ggtern: Ternary Diagrams Using ggplot2.” Journal of Statistical Software, Code Snippets, 87(3), pp. 1-17. doi: 10.18637/jss.v087.c03 (URL:http://doi.org/10.18637/jss.v087.c03)↩︎\npivot_wider(), pivot_longer()を利用したデータセットの変形についてはWickham et al. “R for Data Science”, 2nd edの第５章および宋・矢内氏のWeb書籍「わたしたちのR」の17 整然データ構造を参照してください。また，vignette(“pivot”, package = “tidyr”)とコンソールに入力することによって詳細な説明を得ることができます。↩︎",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "DemState.html",
    "href": "DemState.html",
    "title": "R & Socio Econ",
    "section": "",
    "text": "中国をはじめとする新興経済の台頭とともに国家（政府）の役割がふたたび注目されつつあります. 他方で権威主義的な国家の台頭は民主主義の優位性が失われつつある、という論調もみられるようになりました1.こうした問題を考える上でも「国家」や「民主主義」を測る指標が必要となります.そこで本項ではそうしたデータを提供するデータベースをいくつか紹介します.\n\n\nスウェーデンのイェーテボリ大学政治学科のV-Dem研究所のVarieties of Democracy(V-Dem)データベースは大規模な社会科学データベースです。データセットの最新バージョンv14は1789年から2019年までの202カ国をカバーしています。本データベースはその名が示すとおり、民主主義をめぐるデータセットを提供しています。アンケート調査にもとづいたミクロデータが基礎となっていますが、それらのデータから作成されたマクロデータが提供されています。\nデータはcsv, Stata,Spssの３つの形式で提供されています。また、本研究所じしんがデータセットRパッケージvdemdataを公開しています。これは最新のV-Dem (Varieties of Democracy) とV-partyのデータパッケージです。くわえて検索、グラフ作成機能も提供しています.\n\n\nRパッケージvdemdataパッケージは開発版であるため,vdemdataは同研究所のGithubサイトからインストールする必要があります。このため、最初に、devtoolsをインストールします。\n\n# devtoolsのインストール\ninstall.packages(\"devtools\")\n# devtoolsのロード\nlibrary(devtools)\n\n# vdemdataのインストール\ndevtools::install_github(\"vdeminstitute/vdemdata\")\n# vemdemdataのロード\nlibrary(vdemdata)\n\n本パッケージが提供する基本的な関数は以下のとおりです.使い方については後で説明します.\n\nvdem:データセットを読み込みます.\nvparty: V-Partyデータセットを読み込みます.\nvar_info :コードブックで指定された特定の変数の基本情報をコンソールに表示します.\nfind_var:キーワードで変数を検索します.\nfill_vars: 特定の選挙の変数をしまします.\n\nグラフ作成機能も提供されています.\n\nplot_indicator: V-Dem指標のグラフを描きます.\n\n\n\n\n\n\n\nV-Demデータセットの読み込むためにはvdem関数を使います.ここでは読み込んだデータセットをv_dataという名前をつけたオブジェクトに容れます.\n\nv_data &lt;- vdem\n\n[Environment]をみると，V-Demデータセットは非常に大きく、27,734の観察値、4,607の変数を持つことが分かります.ここからデータを探すことは大変です.最初に, vdemdataのcodebookを利用した方法を紹介しましょう.\nデータフレームv_dataは4,607の変数を有します.ほとんどの変数名がV-Dem特有の変数名です。たとえばv2x_polyarchyという変数がありますが、これが何を表現しているかは分かりません。そうした情報はcodebookから得られます.\nVdemdataには、変数の情報を提供する簡易版codebookがついています。codebookじたい859の観察値、46の変数から構成されるdata.frameデータフレームです。View()関数を使ってデータフレームcodebookの変数名を一覧表示してみてください. ここではさらにarrange(name)で変数nameをベースに並べ替えています。\n\n View(codebook) |&gt; arrange(name)\n\nたとえば，並び替えたデータフレームcodebookの最初の変数は変数tagによればv2smdefabuですが，これが何を表現する変数かはname変数によって理解することができます。“Abuse of defamation and copyright law by elites”\nこのように変数の意味を理解するためには、vdemdata付属のcodebookでも十分ですが、pdf版のフルバージョンもあります.また変数の情報はvar_info()関数を使っても得ることができます.\n\nvar_info(\"変数タグtag名\")\n\n“変数タグtag名”にはV-demデータセットの変数名もしくはcodebookのtag名を入力します.たとえば，v2x_feduniを情報を取得してみましょう。詳細な説明が表示されます。\n\n var_info(\"v2x_feduni)\n\n\n\n\ncodebookをベースにデータを探す方法の他に、find_var()関数を利用した検索方法もあります.むしろ,この方法の方が便利です. find_()の使い方は次のようになります.\n\n   find_var(\"検索キーワード\")\n\nたとえば「市民社会」“civil society”をキーワードにデータを探してみましょう.\n\n find_var(\"civil society\") |&gt; \n View()\n\nここでは検索結果をパイプ”|&gt;“を使ってView( )関数に渡しています。その結果，７行（変数の数）×47列（それぞれの変数の説明）のデータフレームが表示されます。\nname変数列をみると、7行目に“Core civil society index”というデータがあることが分かります。じっさいにデータをダウンロードするためには変数列tagの値が必要となります. この変数に対応するtag名はv2xcs_ccsi です. また変数列questionをみると、このデータが“How robust is civil society?”に対する回答にもとづいていることが分かります。さらに変数列scaleからは0から1の値を取る間隔データでることも分かります。\nそれではこのCore civil society indexデータを取得してみましょう。じっさいにはvdemによってすでにV-demのデータセットをダウンロードしています。したがってこのデータセットを格納したデータフレームv_dataからCore civil society indexデータを抽出することになります.\nCore civil society index はv_dataではtag名すなわちv2xcs_ccsiで表現されています。そこで実際の作業としてはこの変数列を抽出することになります。変数列を選択し、抽出するためにはselect()関数を利用します. あわせて国名country_name、国コードcountry_text_id、年yearといった一連の変数も選択・抽出します. そして結果をcivil_societyと名前をつけたオブジェクトに容れます。\n\ncivil_society &lt;- v_data |&gt;  \n  select(\"v2xcs_ccsi\", \"country_name\", \"country_text_id\", \"year\")\n\nこれでV-demの提供する市民社会指標core civil society indexが取得できました.つぎに市民社会指標の推移をグラフに描いてみましょう.\n\n\n\n市民社会\n市民社会指標core civil society indexの推移を描くために，ここではさらにcountry_name変数を利用し、日本とスウェーデンだけを取り出してみましょう. このためにfilter( )関数を利用します.\n\ncivil_society &lt;- v_data |&gt;\n    select(\"v2xcs_ccsi\", \"country_name\", \"country_text_id\", \"year\") |&gt; \n    # filter()関数を利用\n    filter(country_name == c(\"Japan\",\"Sweden\"))\n\nggplot2を利用し、日本とスウェーデンの市民社会指標Core civil society indexの推移を比較してみましょう。\n\nggplot(data = civil_society, mapping = aes(x = year,y = v2xcs_ccsi))+\n  geom_line(aes(color = country_name))+\n  geom_point(aes(color = country_name))+\n  labs(\n    subtitle = \"Core civil society index\",\n    x = NULL,\n    y = NULL\n  )+\n  theme_minimal()\n\nこれを実行すると，次のようなグラフが描かれます。\n\n容易に想像がつくことですが、明治維新から第２次以前の期間においてはスウェーデンと日本は大きく異なっています.第２次世界大戦後にようやくスウェーデンに近づいていきます.\nリベラル・デモクラシー\n同じグラフはvdemdataパッケージのplot_indicator()関数でも描くことができます. plot_indicator()関数の基本的な使い方は次のようになります.\n\nplot_indicator(\n  indicator = \"\",\n  countries = NULL,\n  min_year = min(vdemdata::vdem$year),\n  max_year = max(vdemdata::vdem$year),\n  uncertainty = TRUE\n)\n\nplot_indicator()がとる５つの引数を説明しておきましょう.\n\nindicator = ” “:” “にV-Demデータセットのtag名（文字列ベクトル）を入力します. tag名についてはcodebookを参照してください.\ncountries= プロットされる国名（文字列ベクトル）を指定します. ただし、国名はV-Demデータのcountry_name列の国だけが指定可能です. NULLの場合、グローバルな平均がプロットされます。\nmin_year = プロットする期間の開始年(数値)を指定します.　なお、min(vdemdata::vdem$year)は、min()関数を使ってvdemデータセットの年の最小値を返すよう指示することになります。\nmax_year = プロットする期間の最終年(数値)を指定します.\nuncertainty = TRUEもしくはFALSEの論理値をとり、TRUEを指定したとき、利用可能な場合には信頼区間がポイント推定値に追加されます.\n\nplot_indictor()によるグラフ作成ではリベラル・デモクラシー指標”v2x_libdem”を利用してみましょう。\n\nplot_indicator(indicator= \"v2x_libdem\", countries = c(\"Japan\", \"Sweden\"),min_year = 1912, max_year = 2015)\n\nこれによって以下のグラフが出力されます。\n\nスェーデンと比較すると、第２次世界大戦以前の日本がいかにリベラル・デモクラシーからかけ離れていたか、また、1945年に劇的に政治体制が変化したか、ということを理解できます.",
    "crumbs": [
      "4 民主主義・国家データ"
    ]
  },
  {
    "objectID": "DemState.html#民主主義国家データ",
    "href": "DemState.html#民主主義国家データ",
    "title": "R & Socio Econ",
    "section": "",
    "text": "中国をはじめとする新興経済の台頭とともに国家（政府）の役割がふたたび注目されつつあります. 他方で権威主義的な国家の台頭は民主主義の優位性が失われつつある、という論調もみられるようになりました1.こうした問題を考える上でも「国家」や「民主主義」を測る指標が必要となります.そこで本項ではそうしたデータを提供するデータベースをいくつか紹介します.\n\n\nスウェーデンのイェーテボリ大学政治学科のV-Dem研究所のVarieties of Democracy(V-Dem)データベースは大規模な社会科学データベースです。データセットの最新バージョンv14は1789年から2019年までの202カ国をカバーしています。本データベースはその名が示すとおり、民主主義をめぐるデータセットを提供しています。アンケート調査にもとづいたミクロデータが基礎となっていますが、それらのデータから作成されたマクロデータが提供されています。\nデータはcsv, Stata,Spssの３つの形式で提供されています。また、本研究所じしんがデータセットRパッケージvdemdataを公開しています。これは最新のV-Dem (Varieties of Democracy) とV-partyのデータパッケージです。くわえて検索、グラフ作成機能も提供しています.\n\n\nRパッケージvdemdataパッケージは開発版であるため,vdemdataは同研究所のGithubサイトからインストールする必要があります。このため、最初に、devtoolsをインストールします。\n\n# devtoolsのインストール\ninstall.packages(\"devtools\")\n# devtoolsのロード\nlibrary(devtools)\n\n# vdemdataのインストール\ndevtools::install_github(\"vdeminstitute/vdemdata\")\n# vemdemdataのロード\nlibrary(vdemdata)\n\n本パッケージが提供する基本的な関数は以下のとおりです.使い方については後で説明します.\n\nvdem:データセットを読み込みます.\nvparty: V-Partyデータセットを読み込みます.\nvar_info :コードブックで指定された特定の変数の基本情報をコンソールに表示します.\nfind_var:キーワードで変数を検索します.\nfill_vars: 特定の選挙の変数をしまします.\n\nグラフ作成機能も提供されています.\n\nplot_indicator: V-Dem指標のグラフを描きます.\n\n\n\n\n\n\n\nV-Demデータセットの読み込むためにはvdem関数を使います.ここでは読み込んだデータセットをv_dataという名前をつけたオブジェクトに容れます.\n\nv_data &lt;- vdem\n\n[Environment]をみると，V-Demデータセットは非常に大きく、27,734の観察値、4,607の変数を持つことが分かります.ここからデータを探すことは大変です.最初に, vdemdataのcodebookを利用した方法を紹介しましょう.\nデータフレームv_dataは4,607の変数を有します.ほとんどの変数名がV-Dem特有の変数名です。たとえばv2x_polyarchyという変数がありますが、これが何を表現しているかは分かりません。そうした情報はcodebookから得られます.\nVdemdataには、変数の情報を提供する簡易版codebookがついています。codebookじたい859の観察値、46の変数から構成されるdata.frameデータフレームです。View()関数を使ってデータフレームcodebookの変数名を一覧表示してみてください. ここではさらにarrange(name)で変数nameをベースに並べ替えています。\n\n View(codebook) |&gt; arrange(name)\n\nたとえば，並び替えたデータフレームcodebookの最初の変数は変数tagによればv2smdefabuですが，これが何を表現する変数かはname変数によって理解することができます。“Abuse of defamation and copyright law by elites”\nこのように変数の意味を理解するためには、vdemdata付属のcodebookでも十分ですが、pdf版のフルバージョンもあります.また変数の情報はvar_info()関数を使っても得ることができます.\n\nvar_info(\"変数タグtag名\")\n\n“変数タグtag名”にはV-demデータセットの変数名もしくはcodebookのtag名を入力します.たとえば，v2x_feduniを情報を取得してみましょう。詳細な説明が表示されます。\n\n var_info(\"v2x_feduni)\n\n\n\n\ncodebookをベースにデータを探す方法の他に、find_var()関数を利用した検索方法もあります.むしろ,この方法の方が便利です. find_()の使い方は次のようになります.\n\n   find_var(\"検索キーワード\")\n\nたとえば「市民社会」“civil society”をキーワードにデータを探してみましょう.\n\n find_var(\"civil society\") |&gt; \n View()\n\nここでは検索結果をパイプ”|&gt;“を使ってView( )関数に渡しています。その結果，７行（変数の数）×47列（それぞれの変数の説明）のデータフレームが表示されます。\nname変数列をみると、7行目に“Core civil society index”というデータがあることが分かります。じっさいにデータをダウンロードするためには変数列tagの値が必要となります. この変数に対応するtag名はv2xcs_ccsi です. また変数列questionをみると、このデータが“How robust is civil society?”に対する回答にもとづいていることが分かります。さらに変数列scaleからは0から1の値を取る間隔データでることも分かります。\nそれではこのCore civil society indexデータを取得してみましょう。じっさいにはvdemによってすでにV-demのデータセットをダウンロードしています。したがってこのデータセットを格納したデータフレームv_dataからCore civil society indexデータを抽出することになります.\nCore civil society index はv_dataではtag名すなわちv2xcs_ccsiで表現されています。そこで実際の作業としてはこの変数列を抽出することになります。変数列を選択し、抽出するためにはselect()関数を利用します. あわせて国名country_name、国コードcountry_text_id、年yearといった一連の変数も選択・抽出します. そして結果をcivil_societyと名前をつけたオブジェクトに容れます。\n\ncivil_society &lt;- v_data |&gt;  \n  select(\"v2xcs_ccsi\", \"country_name\", \"country_text_id\", \"year\")\n\nこれでV-demの提供する市民社会指標core civil society indexが取得できました.つぎに市民社会指標の推移をグラフに描いてみましょう.\n\n\n\n市民社会\n市民社会指標core civil society indexの推移を描くために，ここではさらにcountry_name変数を利用し、日本とスウェーデンだけを取り出してみましょう. このためにfilter( )関数を利用します.\n\ncivil_society &lt;- v_data |&gt;\n    select(\"v2xcs_ccsi\", \"country_name\", \"country_text_id\", \"year\") |&gt; \n    # filter()関数を利用\n    filter(country_name == c(\"Japan\",\"Sweden\"))\n\nggplot2を利用し、日本とスウェーデンの市民社会指標Core civil society indexの推移を比較してみましょう。\n\nggplot(data = civil_society, mapping = aes(x = year,y = v2xcs_ccsi))+\n  geom_line(aes(color = country_name))+\n  geom_point(aes(color = country_name))+\n  labs(\n    subtitle = \"Core civil society index\",\n    x = NULL,\n    y = NULL\n  )+\n  theme_minimal()\n\nこれを実行すると，次のようなグラフが描かれます。\n\n容易に想像がつくことですが、明治維新から第２次以前の期間においてはスウェーデンと日本は大きく異なっています.第２次世界大戦後にようやくスウェーデンに近づいていきます.\nリベラル・デモクラシー\n同じグラフはvdemdataパッケージのplot_indicator()関数でも描くことができます. plot_indicator()関数の基本的な使い方は次のようになります.\n\nplot_indicator(\n  indicator = \"\",\n  countries = NULL,\n  min_year = min(vdemdata::vdem$year),\n  max_year = max(vdemdata::vdem$year),\n  uncertainty = TRUE\n)\n\nplot_indicator()がとる５つの引数を説明しておきましょう.\n\nindicator = ” “:” “にV-Demデータセットのtag名（文字列ベクトル）を入力します. tag名についてはcodebookを参照してください.\ncountries= プロットされる国名（文字列ベクトル）を指定します. ただし、国名はV-Demデータのcountry_name列の国だけが指定可能です. NULLの場合、グローバルな平均がプロットされます。\nmin_year = プロットする期間の開始年(数値)を指定します.　なお、min(vdemdata::vdem$year)は、min()関数を使ってvdemデータセットの年の最小値を返すよう指示することになります。\nmax_year = プロットする期間の最終年(数値)を指定します.\nuncertainty = TRUEもしくはFALSEの論理値をとり、TRUEを指定したとき、利用可能な場合には信頼区間がポイント推定値に追加されます.\n\nplot_indictor()によるグラフ作成ではリベラル・デモクラシー指標”v2x_libdem”を利用してみましょう。\n\nplot_indicator(indicator= \"v2x_libdem\", countries = c(\"Japan\", \"Sweden\"),min_year = 1912, max_year = 2015)\n\nこれによって以下のグラフが出力されます。\n\nスェーデンと比較すると、第２次世界大戦以前の日本がいかにリベラル・デモクラシーからかけ離れていたか、また、1945年に劇的に政治体制が変化したか、ということを理解できます.",
    "crumbs": [
      "4 民主主義・国家データ"
    ]
  },
  {
    "objectID": "DemState.html#政府の質を測る---rgog",
    "href": "DemState.html#政府の質を測る---rgog",
    "title": "R & Socio Econ",
    "section": "4.2 「政府の質」を測る - rgog",
    "text": "4.2 「政府の質」を測る - rgog\n2004年にBo Rothstein教授とSören Holmberg教授によって設立されたQuality of Government(QoG)研究所は優れた政府Good Governanceと政府の質Quality of Governanceの原因、結果、性質に関するデータを提供しています.\nQoG研究所が提供するデータセットは次の5つです.\n\nQoG基本データ(Basic Data)\nQoG標準データ(Standard Data)\nQoG OECDデータ(OECD Data)\nQoG 専門家サーベイ・データ(Expert Survey Data)\nQoG EU 地域データ(Eu Regional Data)\n\nオープン政府データと関連トピックに関するRパッケージ開発者のコミュニティrOpengoveによって、QoGのデータを取得するためのRパッケージrqogが開発されています.rqogは、read_qog()関数によりBasic、Standard、OECDデータセットへのアクセスを提供しています.Standardデータには、Basicデータと同じ指標（367変数）に加え、約1600の指標が追加されています。Basicデータ、Standardデータともに、194の国がカバーされています.rqogは、デフォルトでは、大部分の指標と国の様々な期間の時系列を持つ縦断的データセットを利用します.",
    "crumbs": [
      "4 民主主義・国家データ"
    ]
  },
  {
    "objectID": "DemState.html#footnotes",
    "href": "DemState.html#footnotes",
    "title": "R & Socio Econ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n成田悠輔「民主主義の未来(上) 優位性後退、崩壊の瀬戸際に」『日本経済新聞』2021年8月21日付.↩︎",
    "crumbs": [
      "4 民主主義・国家データ"
    ]
  },
  {
    "objectID": "industry.html",
    "href": "industry.html",
    "title": "5 産業連関データ",
    "section": "",
    "text": "本項では、産業間の投入・産出関係を捉える投入産出データを読み込み，分析を容易にするRパッケージを紹介します。Rは行列計算に優れており、もともと投入・産出分析と親和的です。\n\n\n今日の国際貿易においては生産工程のグローバル化にともない中間財の輸出入が完成品の輸出入以上に盛んに行われています。従来の貿易統計ではそうしたグローバリゼーション現象を十分に捉えることはできませんでした。貿易統計では輸入品の最終出荷地をその原産地として記録します。有名なiPhoneの例では中国が最終出荷地（原産地）ですが，iPhoneという完成品が部品を含めてすべて中国で製造されたかのように扱うことは，生産工程がグローバル化した現代では妥当な取り扱いとは言えません。異なる国の異なるセクターが互いにどのように相互作用しているかを捉えるためには国際産業連関表を利用した付加価値貿易の分析が不可欠です2。\n簡単な数値例で考えてみましょう。中国が日本から90ドル分の中間財タッチパネルを輸入し、アメリカに最終完成製品iPadを100ドルで輸出したとします。これまでのグロスベースの貿易統計では日本の貿易統計には中国への輸出によって生み出された90ドルの価値が計上されます。同時に、中国の貿易統計にはアメリカに完成品iPadを輸出したことによって100ドルの価値が計上されます。この場合、日本が生み出した90の付加価値が、中国の輸出にも含まれて計算され、二重に計上されてしまいます。付加価値貿易では日本の90、中国の（二重計算を避けた）10の付加価値が別個に計上され、各々がアメリカへの輸出となります。\n本項で紹介するRパッケージexvatoolsはこれまで紹介してきたようなデータへのアクセス・取得のツールではではありませんが，付加価値貿易の分析を容易にする数多くの機能を備えた非常に優れたパッケージです3。\nexvatoolsは以下の投入産出表を扱うことができます：\n\nOECDの付加価値取引データベース(TiVA)が基づいているOECD諸国間の投入産出表(OECD Inter-Country Input-Output: ICIO)\n世界投入産出表(WIOD)\nFIGARO EU投入産出表(EU IC-SUIOT)\nADBマルチリージョン投入産出表(ADB MRIO)\n\n\n\n\n# exvatoolsのインストール\ninstall.packages(\"exvatools\")\n\n# exvatoolsのロード\n library(exvatools)\n\nexvatoolsは，(1)標準的な国際的な投入産出表の原データ, (2) exvatoolsパッケージに含まれるテストデータ, (3)カスタムデータの３種類のデータから基本的な投入産出行列－投入係数行列やレオンチェフの逆行列など－のリストを作成します。\nもちろん学習目的にはパッケージ付属の(2)の投入産出データも有益ですが，じっさいに分析に利用するのは(1)標準的な国際的な投入産出表の原データだと思われます。以下の説明では(1)の取り扱いを紹介して行きます。上述のように，exvatoolsでは現在４つのソース－OECD ICIO, WOID, EU IC-SUIOT, およびADB MRIO－がサポートされています。データはカンマ区切りファイル(.csv)、Excelファイル(.xlsx)、またはRデータファイル(.rData)を含む圧縮ファイルとしてサポート機関のWebページに公開されており，直接ダウンロードできます。\n1) OECD ICIO\nOECD ICIOテーブルを使用する場合は、ICIO Webページからソースファイル2016-2020.zipをコンピュータにダウンロードします。ここで注意を要するのは，make_wio()関数を利用したwioクラスのオブジェクトの作成にあたってはダウンロードしたファイルがzip形式でなければならないということです。そこでzipを解凍せずに，フォルダに保存します。\nそれではevatoolsのmake_wio()コマンドを使用し，ソースファイルすなわちダウンロードしたzipファイルから標準的な投入産出行列を作成します。make_wio()の基本的な文法は次のようになります：\n\nmake_wio(\n  wiotype = \" \",\n  year = NULL,\n  src_dir = NULL,\n  quiet = FALSE\n)\n\nmake_wio( )は上述のように，５つの引数をとりますが，とくにwiotypeが重要です。wiotypeの引数は具体的には以下のようになります,\n\nwiotype = \" \"には利用する投入産出表の名称と版editionを指定する，以下のような文字列を入力します：\n\nOECD ICIO表の2023年版（1995-2020年）については \"icio2023\"，同一版の小型版については \"icio2023s\"\n2016年版WIOD表（2000-2014）については \"wiod2016\" . 長期WIOD表（1965-2000年）の2022年版については \"lrwiod2022\". 後者は歴史分析に有益.\nFIGARO EU投入産出表（EU IC-SUI）の2023年版, industry-by-industry(2010-2021)については\"figaro2023i\", また同データベースのproduct-by-productバージョンについては\"figaro2023p\".\n2023年版の62カ国ADB MRIO表の2023版については\"mrio2023\", 不変価格の同一版については\"mrio2023k\", 72カ国版（2022年まで）については\"mrio2023x\".\n\nyear = : 参照年を指定する整数を入力. NULL(デフォルト)の場合，利用可能な最新年が指定される.\nsrc_dir = : 国際投入産出表のソースファイルが保存されているユーザーのディレクトリ（フォルダ）を指定する文字列を入力. ソースファイルは通常zipファイルもしくはcsv, xlsxファイル. make_wio()を利用するさいにはファイルの名称を変更しないこと. またscr_dirが指定されない場合，make_wio()は作業ディレクトリ内を探します.\n\n以下の例では，wiotypeに”icio2023”, yearに”2020”, src_dirに”C:/Users/data”（ソースzipファイルが保存されている架空のフォルダ）を指定しています。\n\nwio &lt;- make_wio(wiotype = \"icio2023\", \n                year = 2020, \n                src_dir = \"C:/Users/data\")\n\nこれによってexvatoolsが，zipファイルから.csvファイルを取り出し，基本的な投入産出行列を作成します。そしてデータを割り当て演算子（←）によってwioと名付けたオブジェクトに格納しています。これによって基本的な投入産出テーブルのリストからなるwioクラスオブジェクトが作成されます。。\n作成されたwioオブジェクトの内容はsummary()関数でチェックできます。\n\nsummary(wio)\n\nsummary(wio)の実行によって以下のリストがコンソール画面に表示されます.\n\n\n\n一部のみ表示.\n\n\n3645x3645次元の中間財投入行列Zをはじめとし，投入産出分析で利用される行列が作成されます。たとえば，以下の例で利用するグローバル・レオンチェフ逆行列はBという名前になっています。コンソール画面を下にスクロールすると，81カ国，45のセクターが利用可能であることが分かります。また，需要項目として6つが提供されていることも分かります。\n2) 世界投入産出表WIOD\nWIODについては”wiod2016”（バージョン2016、2000年から2014年）、“wiod2013”、“lrwiod2022”（ロングランWIOD表、バージョン2022、1965年から2000年）が含まれています。これらはすべて、フローニンゲン大学のGrowth and Development CentreのWebページから入手可能です。\nOECD ICIOの場合と同様に，ダウンロードしたzipファイルを自分のPCのワーキングディレックトリに保存しておきます。以下の例ではmake_wio()関数の引数src_dir() = NULLです，つまり指定していません。指定しない場合，make_wio()は現在のワーキングディレクトリをチェックします。\n\nwiod &lt;- make_wio(wiotype = \"wiod2016\", year = 2014)\n\nこれによりwioクラスのリスト（基本的な投入産出行列のリスト）を容れたオブジェクトwiodが作成されます。summary()で確認してみましょう。\n\nsummary(wiod)\n\n\n\n\n一部のみ表示.\n\n\n3) FIGARO EU投入産出表\nFIGARO EU投入産出テーブルでは製品×製品product by productと産業×産業industry by industryの２つが利用可能です。ここでの例ではproduct by productを利用します。最初に，WebページFigaro tables: EU inter-country supply, use and input-output tables→ CSV matrix format (FIGARO 2023 edition)→ Annual EU inter-country input-output tables product by producto の2021をダウンロードし，作業ディレクトリに保存しておきます。ファイル名はmatrix_eu-ic-io_prod-by-prod_23ed_2021.csvです。\n2つのFIGARO EU投入産出テーブルに対応して引数wiotypeには次のいずれかを指定します。\n\nproduct by productの場合　wiotype = “figaro2023p”\nindustry by industryの場合　wiotype = “figaro2023i”\n\nここではproduct by productを利用しますから，引数wiotype = \"figaro2023p\"を入力します。これによってcsvファイルからmake_wio()関数が投入産出分析のために必要な基本的な行列を作成します。\n\nfigaro &lt;- make_wio(wiotype = \"figaro2023p\", year = 2021)\n\nfigaroと名前をつけたオブジェクトの中に基本的な行列が保管されます。結果をsummary(figaro)でみると，次のような行列の一覧が表示されます。\n\n4) ADB MRIO投入産出表\n最初に，ADB Multiregional Input-Output Databaseからデータをダウンロードします。ADBではxlsx形式でデータが提供されています。ここでの例ではADB, MRIO, 62economicesバージョンの\"ADB MRIO(2014)(Updated on June 2022)\"xlsxファイルをダウンロードします。その上で，make_wio()関数を使って行列を作成し，mrioと名前をつけたオブジェクトに容れます。\n\nmrio &lt;- make_wio(wiotype = \"mrio2023\", year = 2014)\n\nsummary(mrio)を使って行列のリストを表示させると，以下のようになります。\n\n\n\n一部のみ表示.\n\n\n最後に他の投入産出データを読み込む際にも利用するmake_wio()関数の引数wiotypeに指定するzipファイル（もしくはcsv, Excelファイル名）とエジション名の対応をまとめておきます。\n\n\n\n\n\n\n\n\n機関名\nzip名（csv, xlsxファイル名）\nエジション名\n\n\n\n\nOECD ICIO\nxxxx-xxxx.zip\n“icio2023”\n\n\nOECD ICIO\nICIO_XXXX-XXXX.zip\n“icio2021”\n\n\nOECD ICIO\nICIO2018_XXXX.zip\n“icio2018”\n\n\nOECD ICIO\nICIO2016_XXXX.zip\n“icio2016”\n\n\nWIOT\nWIOTS_in_R.zip\n“wiod2016”\n\n\nEU\nmatrix_eu-ic-io_prod-by-prod_23ed_2021.csv\n“figaro2023p”\n\n\nEU\nmatrix_eu-ic-io_ind-by-ind_23ed_2021.csv\n“figaro2023i”\n\n\nADB\nADB-MRIO-2014_Mar2022.xlsx(62カ国版)\n“mrio2023”\n\n\nADB\nADB-MRIO-2014_(72カ国版)\n“mrio2023x”\n\n\nADB\nADB-\n“mrio2023k”\n\n\n\nここまで４つの投入産出テーブルをダウンロードし，make_wio()関数を使ってダウンロードしたデータから投入産出分析に必要な行列の作成方法を示してきました。次に，そうした行列を使ったいくつかの操作の例を示して行きます。\n\n\n\nexvatoolsは、国際投入産出表を取り扱う操作を容易にする複数のコマンドを提供しています4。一例を示すと次のような関数があります：\n\ndmult()：対角行列を行列によって乗数倍する.\nmultd()：行列を対角行列によって乗数倍する.\nhmult()：行列のアダマール積\nbkd()：ブロック対角行列－対角ブロックがゼロではなく，非対角ブロックがゼロである行列－を作成.\nbkoffd()：ブロックオフ対角行列－対角ブロックがゼロであり，非対角ブロックがゼロでない行列－を作成.\nrsums(): 行を合計する\ncsums(): 列を合計する\nsumnrow(): 行列のn番目の行を合計する\nsumncol(): 行列のn番目の列を合計する\n\nこうした関数を利用して実際に産業連関表を使って作業してみます。以下の例ではOECD ICIOの投入産出テーブルから作成した，オブジェクトwioに格納された行列を利用し，逆行列の操作，付加価値輸出の計算を行っています：\n\n例1 グローバル・レオンチェフの逆行列\n例2 付加価値輸出\n\n例1　グローバル・レオンチェフ逆行列\nレオンチェフ逆行列を利用した需要誘発モデルの基本的な行列は、すでに示したコマンドmake_wio()によって原データから簡単に取得できます。\n\nwio &lt;- make_wio(wiotype = \"icio2023\", year = NULL, src_dir = NULL, quiet = FALSE)\n\nsummary(wio)の表示内容をみると、Bがグローバル・レオンチェフ逆行列（Global Leontief inverse)であり、またYが最終需要です。BもYもmake_wio()関数で作成された行列です。class()関数でオブジェクトwioがwioクラスであり，BもYも行列であることを確認できます。なお，wio$Bは「wioオブジェクトの中の行列B」を指しています。\n\nレオンチェフ逆行列は，最終需要が1単位増加したときに，直接間接に誘発される生産量を示します。したがってグローバル・レオンチェフ逆行列はある国のあるセクターにおいて最終需要が1単位増加したときに，他セクターの生産量がどれだけ誘発されるか－簡単に言えば，他産業の生産に与える影響の大きさ－を示します。\nmake_wio()関数で作成された行列リストにおいて，Aが投入係数行列，Xが生産，最終需要がYです。したがって国際投入産出テーブルは\n\\(AX + Y = X\\)\nと表現できます。ここから最終需要と生産の関係は\n\\(X = (I-A)^{-1}Y\\)\nこの関係は技術を一定とし，一定水準の最終需要Yのために必要とされる，各国の各セクターの産出高Xがいかにして生み出されるかを示しています。ここで\\((I-A)^{-1}\\)はグローバル・レオンチェフ逆行列であり，作成された行列リストにおいてはBで表記されています。したがって生産Xはグローバル・レオンチェフ逆行列Bと最終需要Yの積と同じになります。\n行列の積の演算子は%*%です。レオンチェフ逆行列と最終需要の積で生産を求めます。そしてその結果をBYと名前をつけたオブジェクトに容れます。BYも行列です。\n\nBY &lt;- wio$B %*% wio$Y\n\nBYとXが一致することを確認してみてください。\nグローバル・レオンチェフ行列の行和と列和\n次に，グローバル・レオンチェフ行列の行和を求めみます。このためにはrsums()関数を利用します。文法は以下のようになります：\n\nrsums(df, col_name = NULL)\n\n・引数dfは行と列を持つ行列の名前を入力します。\n・引数col_nameは作成される列につけられる名前・文字列です。\nこれを使ってグローバル・レオンチェフ行列の行の合計を求めます。 wio$Bは”オブジェクトwioの中の行列B”を意味します，またcol_name =で列の名前をFLにしています。\n\n# グローバル・レオンチェフ行列の行和\nrsums(wio$B, col_name = \"FL\")\n\nこれによってセクターと各行の和を得ることができます。たとえば，以下の表ではARG_01T02はアルゼンチン（ARG）の’Agriculture, hunting, forestry’産業, ARG_03は同じくアルゼンチンの’Fishing’産業を意味しています。2021版ではISIC Rev.4をベースにした45産業、17製造業セクター,20サービス産業セクターのデータが収録されています。\n\nこの行の和を行和全体の平均値で除した比率は「感応度係数」と呼ばれています。\n列和もcsums()関数を使って同じように求めることができます。\n\n# グローバル・レオンチェフ行列の列和\ncsums(wio$B, row_name = \"BL\")\n\nこれによって１行×3645列の，各国の各産業に対応する列和が得られます。レオンチェフ逆行列の列和は後方連関(backward linkage)指数として知られているものです。ちなみに，この産業別の列和を列和全体の平均値で除した比率を求めると，「影響力係数」が求めることができます。\n例2　付加価値輸出を計算する\n国外に吸収される付加価値(付加価値輸出)を計算するには、1)対角化された付加価値係数行列（wioではWによって表記）をグローバル逆行列Bをによって乗数倍し，2)その結果を最終需要行列Yをによって乗数倍します。こうした操作によって最終需要によって誘発される付加価値が計算できます。\n1)の操作には対角行列と行列の積が必要となります。このためにはdmult()関数を利用します。使い方は\n\ndmult(matrix1, matrix2)\n # matrix1は対角行列\n # matrix2は通常の行列\n\ndmult()関数は対角行列matrix1をベクトルに変換します、つまり対角行列matrix1を、matrix2のすべての行によって水平に乗数倍します。\n2) 需要によって誘発されるすべての付加価値を計算するために最終需要Yを掛けます:\n\nVBY &lt;- dmult(wio$W, wio$B) %*% wio$Y\n\nこれによって海外に吸収される付加価値の大きさが分かります。3645行（各国の産業部門数）×77列（Rest of Worldを含めた国の数）の大きな行列であるためコンソール画面では見づらいためViw(VBY)関数によって表示してみます。\n\n\n\n一部のみ表示.\n\n\nまた海外に吸収される付加価値だけに注目する場合，VBY行列のうちの非対角行列ブロックの表示だけで十分です。その表示ためにはbkoffd()関数を利用します。\n\nbkoffd(VBY)\n\nこれによって対角行列部分，たとえばアルゼンチンの産業を示す行とアルゼンチンという国を示す列のセルはゼロとなり，非対角部分の値だけが表示されます。\n\n\n\n輸出に体化された付加価値の分解にあたっていくつかの方法が提案されていますが，以下のようなステップで分解されます：\n最初に総輸出(Gross Exports: EXGR)を，国内コンテンツ（Domestic Content: DC）と外国コンテンツ（Foreign Content: FC）とに分離し、次に国内付加価値（Domestic Value Added: DVA）と外国付加価値（Foreign Value Added: FVA）を特定し、これらを国内ダブルカウント（Domestic Double Counting: DDC）と外国ダブルカウント（Foreign Double Counting: FDC）から分離します。そして最後に国内付加価値を，輸出された付加価値（Value added exported: VAX）とリフレクション（Reflection: REF）とに分割します（以下の図参照）。\n\n\n\nFeas E (2024), p.223\n\n\nexvatoolsを使って韓国の付加価値輸出の分解をおこなってみましょう。このためには関数make_exvadec()を使います。この関数によって異なった分解方法を使ってある１つの国もしくは国グループの輸出における付加価値を分解することができます。文法は以下のようになります：\n\nmake_exvadec(\n wio_object,\n exporter = \"all\",\n method = \"bm_src\", \n output = \"standard\",\n quiet = FALSE\n)\n\n基本的な引数は５つです。\n\nwio_object: make_wio()関数を使って取得したwioクラスのオブジェクト（標準的な世界投入産出表）を指定.\nexporter: 国または国グループを示す文字列（たとえば，“USA”,“NAFTA”など）. デフォルトは”all”であり，利用できるすべての国に関して輸出における付加価値の分解を生み出す.\nmethod: 輸出付加価値export VAの分解方法を指定する文字列.分解法としては以下の方法が利用可能.\n\n“bm_src”: Borin and Mancini(2023)にもとづく分解法. ソースベース. デフォルト\n“bm_snk”: Borin and Mancini(2023)にもとづく分解法. sinkベース.\n“wwz”: Wang et al. (2013)にもとづく分解法\n“kww”: Koopman et al. (2014)にもとづく分解法\n“my”: Miroundot and Ye (2021)にもとづく分解法\n“oecd”: OECD\n\noutput: アウトプットタイプを指定する文字列. 7つのアウトプットが用意されているが，“standard”(デフォルト)で十分.output = “standard”によってDC, DVA,DDC, FC,FVA,VAXが出力される.\nquiet : ブール値であり，TRUEの場合，メッセージは非表示. デフォルトはFALSEである。つまりメッセージが表示される.\n\nそれではmake_exvadec()関数を使って韓国の付加価値輸出の分解をおこなってみます。\n\nkor_exvadec &lt;- make_exvadec(wio, exporter = \"KOR\", method = \"bm_src\")\n\nこれを実行すると，韓国の付加価値分解の結果が表示されると同時に，結果がkor_exvadecと名付けたオブジェクトの中に格納されます。\n\n結果から総輸出(EXGR)を100パーセントとした場合，付加価値輸出(VAX)が69.4パーセントと高い割合を占めることが理解されます。韓国経済においては最終完成品の輸出よりも，中間財・部品の輸出の価値がきわめて高水準だということが推測されます。さらに，グローバルバリューチェーンに関連した貿易(GVC)が47.37パーセントを示しており，韓国経済がグローバルサプライチェーンに大きく関わっていることも分かります。\nexvatoolsの優れた点として分解を行なったのち，さらにget_exvadec_bkdown()関数を使ってセクターや仕向け国destinationを指定することもできます。以下の例はセクターとして製造業 “NANUF”，仕向け国 importerとして中国 “CHN”を指定しています。\n\nget_exvadec_bkdown(kor_exvadec, exporter = \"KOR\",\nsector = \"MANUF\", importer = \"CHN\")\n\nこれを実行すると，中国に向けた製造業輸出の付加価値分解が可能となります。\n\n結果を見ると，中国への韓国製造業の輸出総額のうち66.80が付加価値輸出だということが理解できます。\nOECDのTiVAデータベースと同様の一般的な貿易指標（輸出，輸入，付加価値，生産等）のリストを取得したい場合は引数にmethod = \"oecd\", output = \"tiva\"とし、make_exvadec()を実行すると、取得できます。\n\n kor_tiva &lt;- make_exvadec(wio, \n                  exporter = \"KOR\",\n                  method = \"oecd\",\n                  output = \"tiva\")\n\n\nここにはGVCへの参加度指標も出力されます。自国で生産された中間財が，国外の輸出財生産により多く投入されることはGVCへの前方への参加度が高い理解され，GVCへの前方参加度(Forward participation in GVC)と呼ばれます。他方，自国の輸出財の生産にあたって輸入中間財がより多く投入されることはGVCへの後方への参加度が高いと解釈されます。これはGVCへの後方参加度(Backward participation in GVC) と呼ばれます。\n韓国の例をみると，GVCへの後方参加度は29.70, 他方GVCへの前方参加度は21.66であり，いずれの参加度も比較的高いのですが，後方への参加度の方が高く，韓国経済の輸出財生産にあたっては他国からの輸入中間財が多く投入されていることが理解できます。\n\n\n\nmake_exvadec()の分解では、付加価値がどこで生み出され(origin)、どこに行き着く(destination)かを分析することはできませんが，make_exvadir()関数を利用すれば、この点も分析できます。\nふたたび、韓国の例を使って考えてみます。韓国の輸出における外国コンテンツForeign Content in VA(FC)は171125.82でした。この国外コンテンツ(FC)はどこから来たのでしょうか。付加価値輸出の地理的な原産地、セクター別原産地の情報はmake_exvadir()で取得できます。\n\nkor_exvadir &lt;- make_exvadir(wio, \n  exporter = \"KOR\",\n  va_type = \"FC\",\n  flow_type = \"EXGR\")\n\nsummary(kor_exvadir)によって詳細を表示させると、\n\n出力結果をみると，原産地origin国としてROWも含めて77カ国，セクターとしては45セクターが利用可能であることが分かります。\nFCデータはオブジェクトkor_exvadirの中に収納されており，kor_exvadir$FCで表示させることができます。head()関数を使って最初の数行だけ出力します。\n\nkor_exvadir$FC |&gt; head()\n\n\nこれによって韓国の付加価値輸出における外国コンテンツ(FC)がどの国の，どのセクターから生まれたものかが理解できます。",
    "crumbs": [
      "5 産業連関データ"
    ]
  },
  {
    "objectID": "industry.html#産業データ",
    "href": "industry.html#産業データ",
    "title": "R & Socio Econ",
    "section": "",
    "text": "本項では、産業間の投入・産出関係を捉える投入産出データを読み込み，分析を容易にするRパッケージを紹介します。Rは行列計算に優れており、もともと投入・産出分析と親和的です。\n\n\n今日の国際貿易においては生産工程のグローバル化にともない中間財の輸出入が完成品の輸出入以上に盛んに行われています。従来の貿易統計ではそうしたグローバリゼーション現象を十分に捉えることはできませんでした。貿易統計では輸入品の最終出荷地をその原産地として記録します。有名なiPhoneの例では中国が最終出荷地（原産地）ですが，iPhoneという完成品が部品を含めてすべて中国で製造されたかのように扱うことは，生産工程がグローバル化した現代では妥当な取り扱いとは言えません。異なる国の異なるセクターが互いにどのように相互作用しているかを捉えるためには国際産業連関表を利用した付加価値貿易の分析が不可欠です2。\n簡単な数値例で考えてみましょう。中国が日本から90ドル分の中間財タッチパネルを輸入し、アメリカに最終完成製品iPadを100ドルで輸出したとします。これまでのグロスベースの貿易統計では日本の貿易統計には中国への輸出によって生み出された90ドルの価値が計上されます。同時に、中国の貿易統計にはアメリカに完成品iPadを輸出したことによって100ドルの価値が計上されます。この場合、日本が生み出した90の付加価値が、中国の輸出にも含まれて計算され、二重に計上されてしまいます。付加価値貿易では日本の90、中国の（二重計算を避けた）10の付加価値が別個に計上され、各々がアメリカへの輸出となります。\n本項で紹介するRパッケージexvatoolsはこれまで紹介してきたようなデータへのアクセス・取得のツールではではありませんが，付加価値貿易の分析を容易にする数多くの機能を備えた非常に優れたパッケージです3。\nexvatoolsは以下の投入産出表を扱うことができます：\n\nOECDの付加価値取引データベース(TiVA)が基づいているOECD諸国間の投入産出表(OECD Inter-Country Input-Output: ICIO)\n世界投入産出表(WIOD)\nFIGARO EU投入産出表(EU IC-SUIOT)\nADBマルチリージョン投入産出表(ADB MRIO)\n\n\n\n\n# exvatoolsのインストール\ninstall.packages(\"evatools\")\n\n# exvatoolsのロード\n library(evatools)\n\nexvatoolsは，(1)標準的な国際的な投入産出表の原データ, (2) exvatoolsパッケージに含まれるテストデータ, (3)カスタムデータの３種類のデータから基本的な投入産出行列－投入係数行列やレオンチェフの逆行列など－のリストを作成します。\nもちろん学習目的にはパッケージ付属の(2)の投入産出データも有益ですが，じっさいに分析に利用するのは(1)標準的な国際的な投入産出表の原データだと思われます。以下の説明では(1)の取り扱いを紹介して行きます。上述のように，exvatoolsでは現在４つのソース－OECD ICIO, WOID, EU IC-SUIOT, およびADB MRIO－がサポートされています。データはカンマ区切りファイル(.csv)、Excelファイル(.xlsx)、またはRデータファイル(.rData)を含む圧縮ファイルとしてサポート機関のWebページに公開されており，直接ダウンロードできます。\n1) OECD ICIO\nOECD ICIOテーブルを使用する場合は、ICIO Webページからソースファイル2016-2020.zipをコンピュータにダウンロードします。ここで注意を要するのは，make_wio()関数を利用したwioクラスのオブジェクトの作成にあたってはダウンロードしたファイルがzip形式でなければならないということです。そこでzipを解凍せずに，フォルダに保存します。\nそれではevatoolsのmake_wio()コマンドを使用し，ソースファイルすなわちダウンロードしたzipファイルから標準的な投入産出行列を作成します。make_wio()の基本的な文法は次のようになります：\n\nmake_wio(\n  wiotype = \" \",\n  year = NULL,\n  src_dir = NULL,\n  quiet = FALSE\n)\n\nmake_wio( )は上述のように，５つの引数をとりますが，とくにwiotypeが重要です。wiotypeの引数は具体的には以下のようになります,\n\nwiotype = \" \"には利用する投入産出表の名称と版editionを指定する，以下のような文字列を入力します：\n\nOECD ICIO表の2023年版（1995-2020年）については \"icio2023\"，同一版の小型版については \"icio2023s\"\n2016年版WIOD表（2000-2014）については \"wiod2016\" . 長期WIOD表（1965-2000年）の2022年版については \"lrwiod2022\". 後者は歴史分析に有益.\nFIGARO EU投入産出表（EU IC-SUI）の2023年版, industry-by-industry(2010-2021)については\"figaro2023i\", また同データベースのproduct-by-productバージョンについては\"figaro2023p\".\n2023年版の62カ国ADB MRIO表の2023版については\"mrio2023\", 不変価格の同一版については\"mrio2023k\", 72カ国版（2022年まで）については\"mrio2023x\".\n\nyear = : 参照年を指定する整数を入力. NULL(デフォルト)の場合，利用可能な最新年が指定される.\nsrc_dir = : 国際投入産出表のソースファイルが保存されているユーザーのディレクトリ（フォルダ）を指定する文字列を入力. ソースファイルは通常zipファイルもしくはcsv, xlsxファイル. make_wio()を利用するさいにはファイルの名称を変更しないこと. またscr_dirが指定されない場合，make_wio()は作業ディレクトリ内を探します.\n\n以下の例では，wiotypeに”icio2023”, yearに”2020”, src_dirに”C:/Users/data”（ソースzipファイルが保存されている架空のフォルダ）を指定しています。\n\nwio &lt;- make_wio(wiotype = \"icio2023\", \n                year = 2020, \n                src_dir = \"C:/Users/data\")\n\nこれによってexvatoolsが，zipファイルから.csvファイルを取り出し，基本的な投入産出行列を作成します。そしてデータを割り当て演算子（←）によってwioと名付けたオブジェクトに格納しています。これによって基本的な投入産出テーブルのリストからなるwioクラスオブジェクトが作成されます。。\n作成されたwioオブジェクトの内容はsummary()関数でチェックできます。\n\nsummary(wio)\n\nsummary(wio)の実行によって以下のリストがコンソール画面に表示されます.\n\n\n\n一部のみ表示.\n\n\n3645x3645次元の中間財投入行列Zをはじめとし，投入産出分析で利用される行列が作成されます。たとえば，以下の例で利用するグローバル・レオンチェフ逆行列はBという名前になっています。コンソール画面を下にスクロールすると，81カ国，45のセクターが利用可能であることが分かります。また，需要項目として6つが提供されていることも分かります。\n2) 世界投入産出表WIOD\nWIODについては”wiod2016”（バージョン2016、2000年から2014年）、“wiod2013”、“lrwiod2022”（ロングランWIOD表、バージョン2022、1965年から2000年）が含まれています。これらはすべて、フローニンゲン大学のGrowth and Development CentreのWebページから入手可能です。\nOECD ICIOの場合と同様に，ダウンロードしたzipファイルを自分のPCのワーキングディレックトリに保存しておきます。以下の例ではmake_wio()関数の引数src_dir() = NULLです，つまり指定していません。指定しない場合，make_wio()は現在のワーキングディレクトリをチェックします。\n\nwiod &lt;- make_wio(wiotype = \"wiod2016\", year = 2014)\n\nこれによりwioクラスのリスト（基本的な投入産出行列のリスト）を容れたオブジェクトwiodが作成されます。summary()で確認してみましょう。\n\nsummary(wiod)\n\n\n\n\n一部のみ表示.\n\n\n3) FIGARO EU投入産出表\nFIGARO EU投入産出テーブルでは製品×製品product by productと産業×産業industry by industryの２つが利用可能です。ここでの例ではproduct by productを利用します。最初に，WebページFigaro tables: EU inter-country supply, use and input-output tables→ CSV matrix format (FIGARO 2023 edition)→ Annual EU inter-country input-output tables product by producto の2021をダウンロードし，作業ディレクトリに保存しておきます。ファイル名はmatrix_eu-ic-io_prod-by-prod_23ed_2021.csvです。\n2つのFIGARO EU投入産出テーブルに対応して引数wiotypeには次のいずれかを指定します。\n\nproduct by productの場合　wiotype = “figaro2023p”\nindustry by industryの場合　wiotype = “figaro2023i”\n\nここではproduct by productを利用しますから，引数wiotype = \"figaro2023p\"を入力します。これによってcsvファイルからmake_wio()関数が投入産出分析のために必要な基本的な行列を作成します。\n\nfigaro &lt;- make_wio(wiotype = \"figaro2023p\", year = 2021)\n\nfigaroと名前をつけたオブジェクトの中に基本的な行列が保管されます。結果をsummary(figaro)でみると，次のような行列の一覧が表示されます。\n\n4) ADB MRIO投入産出表\n最初に，ADB Multiregional Input-Output Databaseからデータをダウンロードします。ADBではxlsx形式でデータが提供されています。ここでの例ではADB, MRIO, 62economicesバージョンの\"ADB MRIO(2014)(Updated on June 2022)\"xlsxファイルをダウンロードします。その上で，make_wio()関数を使って行列を作成し，mrioと名前をつけたオブジェクトに容れます。\n\nmrio &lt;- make_wio(wiotype = \"mrio2023\", year = 2014)\n\nsummary(mrio)を使って行列のリストを表示させると，以下のようになります。\n\n\n\n一部のみ表示.\n\n\n最後に他の投入産出データを読み込む際にも利用するmake_wio()関数の引数wiotypeに指定するzipファイル（もしくはcsv, Excelファイル名）とエジション名の対応をまとめておきます。\n\n\n\n\n\n\n\n\n機関名\nzip名（csv, xlsxファイル名）\nエジション名\n\n\n\n\nOECD ICIO\nxxxx-xxxx.zip\n“icio2023”\n\n\nOECD ICIO\nICIO_XXXX-XXXX.zip\n“icio2021”\n\n\nOECD ICIO\nICIO2018_XXXX.zip\n“icio2018”\n\n\nOECD ICIO\nICIO2016_XXXX.zip\n“icio2016”\n\n\nWIOT\nWIOTS_in_R.zip\n“wiod2016”\n\n\nEU\nmatrix_eu-ic-io_prod-by-prod_23ed_2021.csv\n“figaro2023p”\n\n\nEU\nmatrix_eu-ic-io_ind-by-ind_23ed_2021.csv\n“figaro2023i”\n\n\nADB\nADB-MRIO-2014_Mar2022.xlsx(62カ国版)\n“mrio2023”\n\n\nADB\nADB-MRIO-2014_(72カ国版)\n“mrio2023x”\n\n\nADB\nADB-\n“mrio2023k”\n\n\n\nここまで４つの投入産出テーブルをダウンロードし，make_wio()関数を使ってダウンロードしたデータから投入産出分析に必要な行列の作成方法を示してきました。次に，そうした行列を使ったいくつかの操作の例を示して行きます。\n\n\n\nexvatoolsは、国際投入産出表を取り扱う操作を非常に簡単にする複数のコマンドを提供しています4。一例を示すと次のような関数があります：\n\ndmult()：対角行列を行列によって乗数倍する.\nmultd()：行列を対角行列によって乗数倍する.\nhmult()：行列のアダマール積\nbkd()：ブロック対角行列－対角ブロックがゼロではなく，非対角ブロックがゼロである行列－を作成.\nbkoffd()：ブロックオフ対角行列－対角ブロックがゼロであり，非対角ブロックがゼロでない行列－を作成.\nrsums(): 行を合計する\ncsums(): 列を合計する\nsumnrow(): 行列のn番目の行を合計する\nsumncol(): 行列のn番目の列を合計する\n\nこうした関数を利用して実際に産業連関表を使って作業してみます。以下の例ではOECD ICIOの投入産出テーブルから作成した，オブジェクトwioに格納された行列を利用し，逆行列の操作，付加価値輸出の計算を行っています：\n\n例1 グローバル・レオンチェフの逆行列\n例2 付加価値輸出\n\n例1　グローバル・レオンチェフ逆行列\nレオンチェフ逆行列を利用した需要誘発モデルの基本的な行列は、すでに示したコマンドmake_wio()によって原データから簡単に取得できます。\n\nwio &lt;- make_wio(wiotype = \"icio2023\", year = NULL, src_dir = NULL, quiet = FALSE)\n\nsummary(wio)の表示内容をみると、Bがグローバル・レオンチェフ逆行列（Global Leontief inverse)であり、またYが最終需要です。BもYもmake_wio()関数で作成された行列です。class()関数でオブジェクトwioがwioクラスであり，BもYも行列であることを確認できます。なお，wio$Bは「wioオブジェクトの中の行列B」を指しています。\n\nレオンチェフ逆行列は，最終需要が1単位増加したときに，直接間接に誘発される生産量を示します。したがってグローバル・レオンチェフ逆行列はある国のあるセクターにおいて最終需要が1単位増加したときに，他セクターの生産量がどれだけ誘発されるか－簡単に言えば，他産業の生産に与える影響の大きさ－を示します。\nmake_wio()関数で作成された行列リストにおいて，Aが投入係数行列，Xが生産，最終需要がYです。したがって国際投入産出テーブルは\n\\(AX + Y = X\\)\nと表現できます。ここから最終需要と生産の関係は\n\\(X = (I-A)^{-1}Y\\)\nこの関係は技術を一定とし，一定水準の最終需要Yのために必要とされる，各国の各セクターの産出高Xがいかにして生み出されるかを示しています。ここで\\((I-A)^{-1}\\)はグローバル・レオンチェフ逆行列であり，作成された行列リストにおいてはBで表記されています。したがって生産Xはグローバル・レオンチェフ逆行列Bと最終需要Yの積と同じになります。\n行列の積の演算子は%*%です。レオンチェフ逆行列と最終需要の積で生産を求めます。そしてその結果をBYと名前をつけたオブジェクトに容れます。BYも行列です。\n\nBY &lt;- wio$B %*% wio$Y\n\nBYとXが一致することを確認してみてください。\nグローバル・レオンチェフ行列の行和と列和\n次に，グローバル・レオンチェフ行列の行和を求めみます。このためにはrsums()関数を利用します。文法は以下のようになります：\n\nrsums(df, col_name = NULL)\n\n・引数dfは行と列を持つ行列の名前を入力します。\n・引数col_nameは作成される列につけられる名前・文字列です。\nこれを使ってグローバル・レオンチェフ行列の行の合計を求めます。 wio$Bは”オブジェクトwioの中の行列B”を意味します，またcol_name =で列の名前をFLにしています。\n\n# グローバル・レオンチェフ行列の行和\nrsums(wio$B, col_name = \"FL\")\n\nこれによってセクターと各行の和を得ることができます。たとえば，以下の表ではARG_01T02はアルゼンチン（ARG）の’Agriculture, hunting, forestry’産業, ARG_03は同じくアルゼンチンの’Fishing’産業を意味しています。2021版ではISIC Rev.4をベースにした45産業、17製造業セクター,20サービス産業セクターのデータが収録されています。\n\nこの行の和を行和全体の平均値で除した比率は「感応度係数」と呼ばれています。\n列和もcsums()関数を使って同じように求めることができます。\n\n# グローバル・レオンチェフ行列の列和\ncsums(wio$B, row_name = \"BL\")\n\nこれによって１行×3645列の，各国の各産業に対応する列和が得られます。レオンチェフ逆行列の列和は後方連関(backward linkage)指数として知られているものです。ちなみに，この産業別の列和を列和全体の平均値で除した比率を求めると，「影響力係数」が求めることができます。\n例2　付加価値輸出を計算する\n国外に吸収される付加価値(付加価値輸出)を計算するには、1)対角化された付加価値係数行列（wioではWによって表記）をグローバル逆行列Bをによって乗数倍し，2)その結果を最終需要行列Yをによって乗数倍します。こうした操作によって最終需要によって誘発される付加価値が計算できます。\n1)の操作には対角行列と行列の積が必要となります。このためにはdmult()関数を利用します。使い方は\n\ndmult(matrix1, matrix2)\n # matrix1は対角行列\n # matrix2は通常の行列\n\ndmult()関数は対角行列matrix1をベクトルに変換します、つまり対角行列matrix1を、matrix2のすべての行によって水平に乗数倍します。\n2) 需要によって誘発されるすべての付加価値を計算するために最終需要Yを掛けます:\n\nVBY &lt;- dmult(wio$W, wio$B) %*% wio$Y\n\nこれによって海外に吸収される付加価値の大きさが分かります。3645行（各国の産業部門数）×77列（Rest of Worldを含めた国の数）の大きな行列であるためコンソール画面では見づらいためViw(VBY)関数によって表示してみます。\n\n\n\n一部のみ表示.\n\n\nまた海外に吸収される付加価値だけに注目する場合，VBY行列のうちの非対角行列ブロックだけが必要となります。このためにはbkoffd()関数を利用します。\n\nbkoffd(VBY)\n\nこれによって対角行列部分，たとえばアルゼンチンの産業を示す行とアルゼンチンという国を示す列のセルはゼロとなり，非対角部分の値だけが表示されます。\n\n\n\n輸出に体化された付加価値の分解にあたっていくつかの方法が提案されていますが，以下のようなステップで分解されます：\n最初に総輸出(Gross Exports: EXGR)を，国内コンテンツ（Domestic Content: DC）と外国コンテンツ（Foreign Content: FC）とに分離し、次に国内付加価値（Domestic Value Added: DVA）と外国付加価値（Foreign Value Added: FVA）を特定し、これらを国内ダブルカウント（Domestic Double Counting: DDC）と外国ダブルカウント（Foreign Double Counting: FDC）から分離します。そして最後に国内付加価値を，輸出された付加価値（Value added exported: VAX）とリフレクション（Reflection: REF）とに分割します（以下の図参照）。\n\n\n\nFeas E (2024), p.223\n\n\nexvatoolsを使って韓国の付加価値輸出の完全な分解を作成してみましょう。このためには関数make_exvadec()を使います。この関数によって異なった分解方法を使ってある１つの国もしくは国グループの輸出における付加価値を分解することができます。記述方法は以下のようになります：\n\nmake_exvadec(\n wio_object,\n exporter = \"all\",\n method = \"bm_src\", \n output = \"standard\",\n quiet = FALSE\n)\n\n基本的な引数は５つです。\n\nwio_object: make_wio()関数を使って取得したwioクラスのオブジェクト（標準的な世界投入産出表）を指定.\nexporter: 国または国グループを示す文字列（たとえば，“USA”,“NAFTA”など）. デフォルトは”all”であり，利用できるすべての国に関して輸出における付加価値の分解を生み出す.\nmethod: 輸出付加価値export VAの分解方法を指定する文字列.分解法としては以下の方法が利用可能.\n\n“bm_src”: Borin and Mancini(2023)にもとづく分解法. ソースベース. デフォルト\n“bm_snk”: Borin and Mancini(2023)にもとづく分解法. sinkベース.\n“wwz”: Wang et al. (2013)にもとづく分解法\n“kww”: Koopman et al. (2014)にもとづく分解法\n“my”: Miroundot and Ye (2021)にもとづく分解法\n“oecd”: OECD\n\noutput: アウトプットタイプを指定する文字列. 7つのアウトプットが用意されているが，“standard”(デフォルト)で十分.output = “standard”によってDC, DVA,DDC, FC,FVA,VAXが出力される.\nquiet : ブール値であり，TRUEの場合，メッセージは非表示. デフォルトはFALSEである。つまりメッセージが表示される.\n\nそれではmake_exvadec()関数を使って韓国の付加価値輸出の分解をおこなってみます。\n\nkor_exvadec &lt;- make_exvadec(wio, exporter = \"KOR\", method = \"bm_src\")\n\nこれを実行すると，韓国の付加価値分解の結果が表示されると同時に，結果がkor_exvadecと名付けたオブジェクトの中に格納されます。\n\n結果から総輸出(EXGR)を100パーセントとした場合，付加価値輸出(VAX)が69.4パーセントと高い割合を占めることが理解されます。韓国経済においては最終完成品の輸出よりも，中間財・部品の輸出の価値がきわめて高水準だということが推測されます。さらに，グローバルバリューチェーンに関連した貿易(GVC)が47.37パーセントを示しており，韓国経済がグローバルサプライチェーンに大きく関わっていることも分かります。\nexvatoolsの優れた点として分解を行なったのち，さらにget_exvadec_bkdown()関数を使ってセクターや仕向け国destinationを指定することもできます。以下の例はセクターとして製造業 “NANUF”，仕向け国 importerとして中国 “CHN”を指定しています。\n\nget_exvadec_bkdown(kor_exvadec, exporter = \"KOR\",\nsector = \"MANUF\", importer = \"CHN\")\n\nこれを実行すると，中国に向けた製造業輸出の付加価値分解が可能となります。\n\n結果を見ると，中国への韓国製造業の輸出総額のうち66.80が付加価値輸出だということが理解できます。\nOECDのTiVAデータベースと同様の一般的な貿易指標（輸出、輸入、付加価値、生産）のリストを取得したい場合は引数にmethod = “oecd”, output = “tiva”とし、make_exvadec()を実行すると、取得できます。\n\n kor_tiva &lt;- make_exvadec(wio, exporter = \"KOR\",\n                  method = \"oecd\",\n                  output = \"tiva\")\n\n\n\n\n\nmake_exvadec()の分解では、付加価値がどこで生み出され(origin)、どこに行き着く(destination)かを分析することはできません。しかしmake_exvadir()関数を利用すれば、この点を分析できます。\nふたたび、韓国の例を使って考えてみます。韓国の輸出における外国コンテンツForeign Content in VA(FC)は171125.82でした。国外コンテンツはどこから来たのでしょうか。付加価値輸出の地理的な起源、セクター起源の情報はmake_exvadir()で取得できます。\n\nkor_exvadir &lt;- make_exvadir(wio, exporter = \"KOR\",\n  va_type = \"FC\",\n  flow_type = \"EXGR\")\n\nsummary(kor_exvadir)によって詳細を表示させると、\n\nFCデータはオブジェクトkor_exvadirの中に容れられており、kor_exvadir$FCで表示させることができます。",
    "crumbs": [
      "5 産業データ"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R & Socio Econ",
    "section": "",
    "text": "現在では多くの国際機関，研究機関, 政府組織が社会経済データを収集し、データをWeb上に公開、提供しています。 一方，統計解析向けプログラミング言語として人気の高いRのコミュニティにおいては，そうした機関から社会経済データを取得し，分析するための便利なツール(Rパッケージ)が数多く開発されています。こうした２つの変化によってデータ分析のハードルがずい分と低くなってきました。本資料はそうした「共有財産」にアプローチする方法を紹介したものです。\n\n\n\n本資料1はR（統計解析向けプログラミング言語）2を使って，政府組織，研究機関および国際機関から社会経済データの取得方法を説明することを目的としています。\n言うまでもなく，実証研究においてデータの収集と編集はとても重要です。データは個人もしくは組織で一次データを収集することが望ましいことは言うまでもありません。しかし，これには時間も費用もかかります，またマンパワーも必要となります。収集したデータが，分析にまったく適さないということもあるかもしれません。むしろ，そうしたケースが多いかもしれません。データの収集と編集はじっさいの分析よりも，骨の折れる作業かもしれません．\nRには，国際機関，政府機関および研究組織の提供するデータベースからデータを取得するパッケージが多く開発されています。そうしたパッケージを利用すれば，骨の折れる作業がかなり軽減されますし，シームレスかつ再現可能な形でのデータの読み込みが可能となります。そこで本資料では，Rパッケージを使った，経済分析において頻繁に利用される国際機関のデータの取得方法と簡単な利用方法を紹介しています。\n本資料のほとんどがデータの取得法の説明と取得したデータの可視化にあてられています。したがってRやRStudio（Rプログラミングの統合開発環境）の使い方にかんしてはそれほど多くのスペースが割かれていません。RとRStudioについては次の文献で補ってください.\n\nHadley Wickham, et al.『Rではじめるデータサイエンス』(Web翻訳版)\n松村優哉他『改訂2版 RユーザのためのRStudio[実践]入門〜tidyverseによるモダンな分析フローの世界』\n\nRを利用したデータ処理には、現在では、tidyverseが欠かせません。1はtidyverseに関するもっとも基本的な文献であり，Rを利用するさいには欠かせないテキストの１つです。2は1の日本バージョンと言えるものです。両方の著書によってR,RStudioを利用したデータ処理の基礎が身に付くことと思います\n本資料のいたるところでRパッケージggplot2を利用して，取得したデータを可視化しています。Rとggplot2を利用した可視化については以下の２つの著書が役に立ちます。\n\nWinston Chang『Rグラフィックスクックブック 第2版―ggplot2によるグラフ作成のレシピ集』\nキーラン・ヒーリー『実践Data Scienceシリーズ データ分析のためのデータ可視化入門』\n\n3はggplot2を利用した可視化の方法を学ぶ上で必読文献です。4ももちろんggplot2の説明に多く割かれていますが，同時に可視化についての基本的な考え方を学ぶこともできます。\nデータをダウンロードするさい，テキストファイル，CSVファイル，Excel，SQLデータベース，独自のデータフォーマット(dta,spss)など，多くの異なるフォーマットから大規模なデータを読み込んだり，書き込んだりしなければならないことがよくあります。そうした異なるデータ形式を扱うにはRが最も適しています。つまり，Rがあれば，ほぼすべてのデータ形式を読み込むことができます。今では多くの国際機関や研究組織によってデータベースが提供されていますが，Rを利用すれば，データの分析までシームレスに―つまりRを離れることなしに―そうしたデータを読み込むことができます。\n\n\n\n本資料で紹介される（紹介予定の）データベースと対応するRパッケージは以下の通りです。\n\n\n\nデータ提供組織\nデータベース\nRパッケージ\nRパッケージ出典\n\n\n\n\nGroningen Growth and Development Centre\npenn world table\npwt10\nFeenstra RC, Inklaar R, Timmer MP (2015). “The Next Generation of the Penn World Table.” American Economic Review, 105(10), 3150-3182.http://www.ggdc.net/pwt/\n\n\nGroningen Growth and Development Centre\nThe Maddison Project Database\nmaddison\nEric Persson (2015). maddison: Maddison Project Database. R package version 0.1. https://CRAN.R-project.org/package=maddison\n\n\n世界銀行\nWorld Development Indicator\nWDI\nVincent Arel-Bundock (2021). WDI: World Development Indicators and Other World Bank Data. R package version 2.7.4. https://CRAN.R-project.org/package=WDI\n\n\nEU統計局\nEurostat\neurostat\n(C) Leo Lahti, Janne Huovari, Markus Kainu, Przemyslaw Biecek.Retrieval and analysis of Eurostat open data with the eurostat package. R Journal 9(1):385-392, 2017. Version 3.7.5 Package URL:http://ropengov.github.io/eurostat Manuscript. URL:https://journal.r-project.org/archive/2017/RJ-2017-019/index.html\n\n\nEU\nAMECO\nameco\nPersson E (2019). ameco: European Commission Annual Macro-Economic (AMECO) Database. R package version 0.2.10, http://github.com/expersso/ameco.\n\n\n経済協力開発機構\nOEDCD.Stat\nOECD\nEric Persson (2019). OECD: Search and Extract Data from the OECD. Rpackage version 0.2.4.https://CRAN.R-project.org/package=OECD\n\n\n国際通貨基金\nIMF Data\nimfr\nChristopher Gandrud (2020). imfr: Download Data from the International Monetary Fund’s Data API. R package version 0.1.9.1. https://CRAN.R-project.org/package=imfr\n\n\nフランス数理経済計画予測研究所\nDBnomics\nrdbnomics\nThomas Brand (2020). rdbnomics: Download DBnomics Data. R package version 0.6.4. https://CRAN.R-project.org/package=rdbnomics\n\n\nイェーテボリ大学政治学科V-Dem研究所\nVarieties of Democracy(V-Dem)\nvdemdata\nSeraphine Maerz, Amanda Edgell, Sebastian Hellmeier, Nina Ilchenko.’Vdemdata - an R package to load, explore and work with the most recent V-Dem (Varieties of Democracy) and V-Party datasets’.Varieties of Democracy (V-Dem) Project. 2020.https://www.v-dem.net/en/ and https://github.com/vdeminstitute/vdemdata\n\n\nGothenburg大学QoG研究所\nQoG (Quality ofo Government) Data\nrqog\nMarkus Kainu (2021). rqog: Download data from the Quality of Government Institute data. R package version 0.4.2021.\n\n\nCenter for Systemic Peace\nPolity V\ndemocracyData\nMarshall, Monty G., Ted Robert Gurr. 2020. “Polity5: Political Regime Characteristics and Transitions, 1800-2018”. Dataset Users’ Manual. Center for Systemic Peace. Available at http://www.systemicpeace.org/inscr/p5manualv2018.pdf\n\n\nEU\nGlobal Innovation Through Company Level Data\niriR\nWarin T (2023). iriR: Global Innovation Through Company Level Data. R package version 0.2.2, https://github.com/warint/iriR/.\n\n\nILO\nILO STAT\nRilostat\nDavid Bescond (2024). Rilostat: ILO Open Data via Ilostat Bulk Download Facility. R package version 2.1.0, https://CRAN.R-project.org/package=Rilostat.\n\n\n国際産業連関分析用Rパッケージ\n\nexvatools\nFeas E (2024). exvatools: Value Added in Exports and Other Input-Output Table Analysis Tools. R package version 0.8.0, https://CRAN.R-project.org/package=exvatools.",
    "crumbs": [
      "Rで社会経済データの取得 (Work in progress)"
    ]
  },
  {
    "objectID": "index.html#rで社会経済データの取得index-1-work-in-progress",
    "href": "index.html#rで社会経済データの取得index-1-work-in-progress",
    "title": "R & Socio Econ",
    "section": "",
    "text": "現在では多くの国際機関，研究機関, 政府組織が社会経済データを収集し、データをWeb上に公開、提供しています。 一方，統計解析向けプログラミング言語として人気の高いRコミュニティにおいては，そうした機関から社会経済データを取得し，分析するための便利なツール(Rパッケージ)が数多く開発されています。こうした２つの変化によってデータ分析のハードルがずい分と低くなってきました。本資料はそうした「共有財産」にアプローチする方法を書き留めたものです。\n\n\n本資料はR（統計解析向けプログラミング言語）2を使って，政府組織，研究機関および国際機関から社会経済データの取得方法を説明することを目的としています。\n言うまでもなく，実証研究においてデータの収集と編集はとても重要です。データは個人もしくは組織で一次データを収集することが望ましいことは言うまでもありません。しかし，これには時間も費用もかかります，またマンパワーも必要となります。収集したデータが，分析にまったく適さないということもあるかもしれません。むしろ，そうしたケースが多いかもしれません。データの収集と編集はじっさいの分析よりも，骨の折れる作業かもしれません．\nRには，国際機関，政府機関および研究組織の提供するデータベースからデータを取得するパッケージが多く開発されています。そうしたパッケージを利用すれば，骨の折れる作業がかなり軽減されますし，シームレスかつ再現可能な形でのデータの読み込みが可能となります。そこで本資料では，Rパッケージを使った，経済分析において頻繁に利用される国際機関のデータの取得方法と簡単な利用方法を紹介しています。\n本資料のほとんどがデータの取得法の説明と取得したデータの可視化にあてられています。したがってRやRStudio（Rプログラミングの統合開発環境）の使い方にかんしてはそれほど多くのスペースが割かれていません。RとRStudioについては次の文献で補ってください.\n\nHadley Wickham, et al.『Rではじめるデータサイエンス』(Web翻訳版)\n松村優哉他『改訂2版 RユーザのためのRStudio[実践]入門〜tidyverseによるモダンな分析フローの世界』\n\nRを利用したデータ処理には、現在では、tidyverseが欠かせません。1はtidyverseに関するもっとも基本的な文献であり，Rを利用するさいには欠かせないテキストの１つです。2は1の日本バージョンと言えるものです。両方の著書によってR,RStudioを利用したデータ処理の基礎が身に付くことと思います\n本資料のいたるところでRパッケージggplot2を利用して，取得したデータを可視化しています。Rとggplot2を利用した可視化については以下の２つの著書が役に立ちます。\n\nWinston Chang『Rグラフィックスクックブック 第2版―ggplot2によるグラフ作成のレシピ集』\nキーラン・ヒーリー『実践Data Scienceシリーズ データ分析のためのデータ可視化入門』\n\n3はggplot2を利用した可視化の方法を学ぶ上で必読文献です。4ももちろんggplot2の説明に多く割かれていますが，同時に可視化についての基本的な考え方を学ぶこともできます。\nデータをダウンロードするさい，テキストファイル，CSVファイル，Excel，SQLデータベース，独自のデータフォーマット(dta,spss)など，多くの異なるフォーマットから大規模なデータを読み込んだり，書き込んだりしなければならないことがよくあります。そうした異なるデータ形式を扱うにはRが最も適しています。つまり，Rがあれば，ほぼすべてのデータ形式を読み込むことができます。今では多くの国際機関や研究組織によってデータベースが提供されていますが，Rを利用すれば，データの分析までシームレスに―つまりRを離れることなしに―そうしたデータを読み込むことができます。\n\n\n\n本資料で紹介される（紹介予定の）データベースと対応するRパッケージは以下の通りです。\n\n\n\nデータ提供組織\nデータベース\nRパッケージ\nRパッケージ出典\n\n\n\n\nGroningen Growth and Development Centre\npenn world table\npwt10\nFeenstra RC, Inklaar R, Timmer MP (2015). “The Next Generation of the Penn World Table.” American Economic Review, 105(10), 3150-3182.http://www.ggdc.net/pwt/\n\n\nGroningen Growth and Development Centre\nThe Maddison Project Database\nmaddison\nEric Persson (2015). maddison: Maddison Project Database. R package version 0.1. https://CRAN.R-project.org/package=maddison\n\n\n世界銀行\nWorld Development Indicator\nWDI\nVincent Arel-Bundock (2021). WDI: World Development Indicators and Other World Bank Data. R package version 2.7.4. https://CRAN.R-project.org/package=WDI\n\n\nEU統計局\nEurostat\neurostat\n(C) Leo Lahti, Janne Huovari, Markus Kainu, Przemyslaw Biecek.Retrieval and analysis of Eurostat open data with the eurostat package. R Journal 9(1):385-392, 2017. Version 3.7.5 Package URL:http://ropengov.github.io/eurostat Manuscript. URL:https://journal.r-project.org/archive/2017/RJ-2017-019/index.html\n\n\nEU\nAMECO\nameco\nPersson E (2019). ameco: European Commission Annual Macro-Economic (AMECO) Database. R package version 0.2.10, http://github.com/expersso/ameco.\n\n\n経済協力開発機構\nOEDCD.Stat\nOECD\nEric Persson (2019). OECD: Search and Extract Data from the OECD. Rpackage version 0.2.4.https://CRAN.R-project.org/package=OECD\n\n\n国際通貨基金\nIMF Data\nimfr\nChristopher Gandrud (2020). imfr: Download Data from the International Monetary Fund’s Data API. R package version 0.1.9.1. https://CRAN.R-project.org/package=imfr\n\n\nフランス数理経済計画予測研究所\nDBnomics\nrdbnomics\nThomas Brand (2020). rdbnomics: Download DBnomics Data. R package version 0.6.4. https://CRAN.R-project.org/package=rdbnomics\n\n\nイェーテボリ大学政治学科V-Dem研究所\nVarieties of Democracy(V-Dem)\nvdemdata\nSeraphine Maerz, Amanda Edgell, Sebastian Hellmeier, Nina Ilchenko.’Vdemdata - an R package to load, explore and work with the most recent V-Dem (Varieties of Democracy) and V-Party datasets’.Varieties of Democracy (V-Dem) Project. 2020.https://www.v-dem.net/en/ and https://github.com/vdeminstitute/vdemdata\n\n\nGothenburg大学QoG研究所\nQoG (Quality ofo Government) Data\nrqog\nMarkus Kainu (2021). rqog: Download data from the Quality of Government Institute data. R package version 0.4.2021.\n\n\nCenter for Systemic Peace\nPolity V\ndemocracyData\nMarshall, Monty G., Ted Robert Gurr. 2020. “Polity5: Political Regime Characteristics and Transitions, 1800-2018”. Dataset Users’ Manual. Center for Systemic Peace. Available at http://www.systemicpeace.org/inscr/p5manualv2018.pdf\n\n\nEU\nGlobal Innovation Through Company Level Data\niriR\nWarin T (2023). iriR: Global Innovation Through Company Level Data. R package version 0.2.2, https://github.com/warint/iriR/.\n\n\nILO\nILO STAT\nRilostat\nDavid Bescond (2024). Rilostat: ILO Open Data via Ilostat Bulk Download Facility. R package version 2.1.0, https://CRAN.R-project.org/package=Rilostat.",
    "crumbs": [
      "Rで社会経済データの取得[^index-1] (Work in progress)"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "R & Socio Econ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n本資料の作成にあたってはマークアップ言語の１つであるQuartoを利用しています.↩︎\nAguirre・Danielssonは「経済学研究にとってどのプログラミング言語がベストか―Julia, Matlab, PythonそれともRか？」において４つのプログラミング言語の比較をおこなっています. R言語の比較優位については本エッセイを参照してください.↩︎",
    "crumbs": [
      "Rで社会経済データの取得 (Work in progress)"
    ]
  },
  {
    "objectID": "index.html#rで社会経済データの取得-work-in-progress",
    "href": "index.html#rで社会経済データの取得-work-in-progress",
    "title": "R & Socio Econ",
    "section": "",
    "text": "現在では多くの国際機関，研究機関, 政府組織が社会経済データを収集し、データをWeb上に公開、提供しています。 一方，統計解析向けプログラミング言語として人気の高いRのコミュニティにおいては，そうした機関から社会経済データを取得し，分析するための便利なツール(Rパッケージ)が数多く開発されています。こうした２つの変化によってデータ分析のハードルがずい分と低くなってきました。本資料はそうした「共有財産」にアプローチする方法を紹介したものです。\n\n\n\n本資料1はR（統計解析向けプログラミング言語）2を使って，政府組織，研究機関および国際機関から社会経済データの取得方法を説明することを目的としています。\n言うまでもなく，実証研究においてデータの収集と編集はとても重要です。データは個人もしくは組織で一次データを収集することが望ましいことは言うまでもありません。しかし，これには時間も費用もかかります，またマンパワーも必要となります。収集したデータが，分析にまったく適さないということもあるかもしれません。むしろ，そうしたケースが多いかもしれません。データの収集と編集はじっさいの分析よりも，骨の折れる作業かもしれません．\nRには，国際機関，政府機関および研究組織の提供するデータベースからデータを取得するパッケージが多く開発されています。そうしたパッケージを利用すれば，骨の折れる作業がかなり軽減されますし，シームレスかつ再現可能な形でのデータの読み込みが可能となります。そこで本資料では，Rパッケージを使った，経済分析において頻繁に利用される国際機関のデータの取得方法と簡単な利用方法を紹介しています。\n本資料のほとんどがデータの取得法の説明と取得したデータの可視化にあてられています。したがってRやRStudio（Rプログラミングの統合開発環境）の使い方にかんしてはそれほど多くのスペースが割かれていません。RとRStudioについては次の文献で補ってください.\n\nHadley Wickham, et al.『Rではじめるデータサイエンス』(Web翻訳版)\n松村優哉他『改訂2版 RユーザのためのRStudio[実践]入門〜tidyverseによるモダンな分析フローの世界』\n\nRを利用したデータ処理には、現在では、tidyverseが欠かせません。1はtidyverseに関するもっとも基本的な文献であり，Rを利用するさいには欠かせないテキストの１つです。2は1の日本バージョンと言えるものです。両方の著書によってR,RStudioを利用したデータ処理の基礎が身に付くことと思います\n本資料のいたるところでRパッケージggplot2を利用して，取得したデータを可視化しています。Rとggplot2を利用した可視化については以下の２つの著書が役に立ちます。\n\nWinston Chang『Rグラフィックスクックブック 第2版―ggplot2によるグラフ作成のレシピ集』\nキーラン・ヒーリー『実践Data Scienceシリーズ データ分析のためのデータ可視化入門』\n\n3はggplot2を利用した可視化の方法を学ぶ上で必読文献です。4ももちろんggplot2の説明に多く割かれていますが，同時に可視化についての基本的な考え方を学ぶこともできます。\nデータをダウンロードするさい，テキストファイル，CSVファイル，Excel，SQLデータベース，独自のデータフォーマット(dta,spss)など，多くの異なるフォーマットから大規模なデータを読み込んだり，書き込んだりしなければならないことがよくあります。そうした異なるデータ形式を扱うにはRが最も適しています。つまり，Rがあれば，ほぼすべてのデータ形式を読み込むことができます。今では多くの国際機関や研究組織によってデータベースが提供されていますが，Rを利用すれば，データの分析までシームレスに―つまりRを離れることなしに―そうしたデータを読み込むことができます。\n\n\n\n本資料で紹介される（紹介予定の）データベースと対応するRパッケージは以下の通りです。\n\n\n\nデータ提供組織\nデータベース\nRパッケージ\nRパッケージ出典\n\n\n\n\nGroningen Growth and Development Centre\npenn world table\npwt10\nFeenstra RC, Inklaar R, Timmer MP (2015). “The Next Generation of the Penn World Table.” American Economic Review, 105(10), 3150-3182.http://www.ggdc.net/pwt/\n\n\nGroningen Growth and Development Centre\nThe Maddison Project Database\nmaddison\nEric Persson (2015). maddison: Maddison Project Database. R package version 0.1. https://CRAN.R-project.org/package=maddison\n\n\n世界銀行\nWorld Development Indicator\nWDI\nVincent Arel-Bundock (2021). WDI: World Development Indicators and Other World Bank Data. R package version 2.7.4. https://CRAN.R-project.org/package=WDI\n\n\nEU統計局\nEurostat\neurostat\n(C) Leo Lahti, Janne Huovari, Markus Kainu, Przemyslaw Biecek.Retrieval and analysis of Eurostat open data with the eurostat package. R Journal 9(1):385-392, 2017. Version 3.7.5 Package URL:http://ropengov.github.io/eurostat Manuscript. URL:https://journal.r-project.org/archive/2017/RJ-2017-019/index.html\n\n\nEU\nAMECO\nameco\nPersson E (2019). ameco: European Commission Annual Macro-Economic (AMECO) Database. R package version 0.2.10, http://github.com/expersso/ameco.\n\n\n経済協力開発機構\nOEDCD.Stat\nOECD\nEric Persson (2019). OECD: Search and Extract Data from the OECD. Rpackage version 0.2.4.https://CRAN.R-project.org/package=OECD\n\n\n国際通貨基金\nIMF Data\nimfr\nChristopher Gandrud (2020). imfr: Download Data from the International Monetary Fund’s Data API. R package version 0.1.9.1. https://CRAN.R-project.org/package=imfr\n\n\nフランス数理経済計画予測研究所\nDBnomics\nrdbnomics\nThomas Brand (2020). rdbnomics: Download DBnomics Data. R package version 0.6.4. https://CRAN.R-project.org/package=rdbnomics\n\n\nイェーテボリ大学政治学科V-Dem研究所\nVarieties of Democracy(V-Dem)\nvdemdata\nSeraphine Maerz, Amanda Edgell, Sebastian Hellmeier, Nina Ilchenko.’Vdemdata - an R package to load, explore and work with the most recent V-Dem (Varieties of Democracy) and V-Party datasets’.Varieties of Democracy (V-Dem) Project. 2020.https://www.v-dem.net/en/ and https://github.com/vdeminstitute/vdemdata\n\n\nGothenburg大学QoG研究所\nQoG (Quality ofo Government) Data\nrqog\nMarkus Kainu (2021). rqog: Download data from the Quality of Government Institute data. R package version 0.4.2021.\n\n\nCenter for Systemic Peace\nPolity V\ndemocracyData\nMarshall, Monty G., Ted Robert Gurr. 2020. “Polity5: Political Regime Characteristics and Transitions, 1800-2018”. Dataset Users’ Manual. Center for Systemic Peace. Available at http://www.systemicpeace.org/inscr/p5manualv2018.pdf\n\n\nEU\nGlobal Innovation Through Company Level Data\niriR\nWarin T (2023). iriR: Global Innovation Through Company Level Data. R package version 0.2.2, https://github.com/warint/iriR/.\n\n\nILO\nILO STAT\nRilostat\nDavid Bescond (2024). Rilostat: ILO Open Data via Ilostat Bulk Download Facility. R package version 2.1.0, https://CRAN.R-project.org/package=Rilostat.\n\n\n国際産業連関分析用Rパッケージ\n\nexvatools\nFeas E (2024). exvatools: Value Added in Exports and Other Input-Output Table Analysis Tools. R package version 0.8.0, https://CRAN.R-project.org/package=exvatools.",
    "crumbs": [
      "Rで社会経済データの取得 (Work in progress)"
    ]
  },
  {
    "objectID": "MacroData.html#労働市場関連データを取得する---riolstat",
    "href": "MacroData.html#労働市場関連データを取得する---riolstat",
    "title": "R & Socio Econ",
    "section": "2.7 労働市場関連データを取得する - Riolstat",
    "text": "2.7 労働市場関連データを取得する - Riolstat\nこのRパッケージは、ILO統計局のオンラインデータベースであるILOSTATに含まれるデータにアクセスし、ダウンロードし、操作するためのツールを提供します。ILOSTATのデータと関連するメタデータは、ILOSTATのウェブサイトからも直接入手できます。\nILOのILOSTATは労働市場統計の世界最大のリポジトリです。このデータベースには雇用、失業、賃金、労働時間、労働生産性など、すべての国と地域と幅広い労働関連のトピックをカバーしています。これには、1938年までさかのぼる時系列、年次、四半期、毎月の労働統計、国レベル、地域、世界の推定値等が含まれます。\nILOstat Rパッケージ('Rilostat')を利用することで、ILOSTATデータベースにアクセスし、データを検索し、ダウンロードすることができます。さらにはそうしたデータの可視化をすることも可能です。\n最初に，Rパッケージilostatをインストールし，ロードしておきましょう。\n\n# Rilostatのインストール\n instatll.packages(\"Rilostat\")\n# Rilostatの読み込み\n libarry(Rilostat)\n\n\n2.7.1　データを探す\n第1のステップはデータを探すことです。このためにはダウンロードしようとするデータの指標コードもしくは参照領域(参照領域 - 国や地域)の情報が必要とります。そうした情報を取得するためにはget_ilostat_toc( )関数を利用します。\n\n# ILOSTATで利用可能な全指標を表示\nget_ilosta_toc()\n\nこの結果次のような16列×1,670行のデータセットの一覧が表示されます。id 列がデータをダウンロードするさいに利用する指標コードとなります。1,670の指標が提供されていることが分かります。\n\n\n\nget_ilostat_toc()の出力結果\n\n\n３列目のindicator.labelが指標の簡単な説明，4列目のfreq が年次データであること，5列目のfreq.labelがそのことを示しています。7列目のdata.startが開始年を示しています。\nILOの中に特定の検索語にマッチする指標があるかどうかを調べることもできます。たとえば，労働組合を含む指標を探すとしましょう。検索語に”union”を入力します。\n\nget_ilostat_toc(search = \"union\")\n\nより絞り込んでデータセットを探すにはget_ilostat_toc()のとる引数を指定します。この関数は5つの引数をとります。\n\nsegment = ” “: 指標を探す場合，”indicator”（デフォルト）を入力，国・地域のデータを探す場合は”ref_area”を指定します。’search=’でindicatorを探す場合，indicatorがデフォルトですの指定は不要となります。\nlang = ” “: 英語の場合en（デフォルト）, フランス語の場合fr，スペイン語の場合esを入力します。デフォルトで利用すると思いますので，指定しなくとも問題はありません。\nsearch = ” “:”none”がデフォルトになります。“検索語が入力された場合，その文字列と一致するデータセットが抽出されます。\nfilters = ” “: リスト; none(デフォルト)でtoc全体を取得し、フィルタの名前付きリストでテーブルの一部だけを取得します。リストオブジェクトの名前は ilostat toc( ) の変数コード、値は観測コードのベクトル\nfixed = ” “: 真の場合（デフォルト）, より複雑な正規表現のマッチングが必要な場合は FALSE に変更します。\n\nいくつかの例を示しましょう\n\n# \"education\"を含むデータセットを探す\nget_ilostat_toc(search = \"education\")\n\n# アルバニアのデータセットを探す\nget_ilostat_toc(segment = \"ref_area\", search = \"Albania\")\n\n# \"youth\"と\"\"adult\"を含むデータセットを探す\nget_ilostat_toc(search = \"youth | adult\", fixed = FALSE)\n\n# 失業または若者のデータセットを探す\nget_ilostat_toc(search = \"unemployment | youth\", fixed = FALSE)\n\n2番目のアルバニアのデータを探す例では対象が国ですので，segment = \"ref_area\" に指定してあります。3番目の例では|が利用されていますが，これはorになります。すなわちyouthとadultのいずれかを含んだデータを探します。また，複雑なマッチングが必要となりますのでfixed = FALSEとしています。\n\n\n2.7.2 データをダウンロードする\nデータをダウンロードするためにはget_ilostat( )関数を使います。使用法は次のようになります。\n\nget_ilostat(\nid = ,\nsegement = ,\ntype = ,\ntime_format = ,\nfilters = ,\nfixed = ,\n)\n\nこの関数の主要な引数を説明しておきましょう。\n\nid = ” “: データセットのid名を入力します。たとえば id = \"LUU_XLU2_SEX_EDU_RT_A\"\nsegment = ” ” : “indicator”（デフォルト）もしくは\"ref_area\"を入力します。\nfilters = : データセット全体を取得する場合は none (デフォルト)，データテーブルの一部だけを取得する場合はフィルタの名前付きリスト. リストオブジェクトの名前はilostatの変数コードであり、値は観測コードのベクトル.\ntimefrom : データセットの開始年. timeto : データセットの終了年.\n\nfilters=については以下の例を参考にしてください。それではこの関数を利用してILOSTATのデータをダウンロードしてみましょう。\n１つのデータセットを取得する\nここでは日本と韓国の失業データをダウンロードしたいとします。まず，get_ilostat_toc()で失業データを探します。また結果をunempと名付けたオブジェクトに格納するとします。そして結果をView( )で表示させます。\n\nunemp_toc &lt;- get_ilostat_toc(search = \"unemployment\") \nView(unemp_toc)\n\n結果を容れたunemp_tocは70行×16列のデータテーブルです。すなわち70のデータ指標があります。ここでは試しに１行目の”GED_XLU1_SEX_HHT_CHL_RT_A”をダウンロードしてみましょう。\n\n\n\nunemp_tocの結果をView()で表示\n\n\n\nget_ilostat(\"GED_XLU1_SEX_HHT_CHL_RT_A\", segment = \"indicator\")\n # segmentのindicatorはデフォルトですので省略可\n\n各国の失業データが取得されます。データテーブルは141,672行の観察値と11の変数から構築されています。\n\n\n\nget_ilostat()の結果\n\n\n複数のデータセットを取得する\n\n# ２つのデータをダウンロードする\nget_ilostat(c(\"CPI_ACPI_COI_RT_M\", 'CPI_ACPI_COI_RT_Q'), cache = FALSE)\n\n# ２つの地域－アフガニスタンとトリニダード・トバゴ－の年次データをダウンロードする\nget_ilostat(id = c(\"AFG_A\",\"TTO_A\"), segment = \"ref_area\")\n\nfiltersを使ってデータセットを取得する\n\nget_ilostat(id = c(\"UNE_2UNE_SEX_AGE_NB_A\",'EMP_2EMP_SEX_AGE_NB_A'), \n        filters = list( ref_area = \"FRA\", \n        classif1 = \"AGE_YTHADULT_YGE15\", \n        time = \"2016\",\n        sex = c(\"T\", 'SEX_F')), quiet = TRUE)\n\n\n\n2.7.3 データを可視化する\nRilostatの開発者D.Bescond氏によって，三角図ternary diagramの中にデータを表現することによって国別の不完全就業labor underutilizationの特徴を描く，面白い可視化が紹介されています。最後に，これを紹介しておきましょう。ただし，ここでの例はBescond氏と異なり，protrixパッケージではなく，ggternパッケージ5を使って作図しています。\n不完全就業labor underutilizationは失業者，時間関連不完全就業者，および就業意欲喪失者から構成されます。\n\n失業者 Unemployment\n時間関連不完全就業者 Time-related underemployment\n就業意欲喪失者 Discouraged job-seekers\n\nこうした３つの不完全就業者グループは相互に排他的であり，不完全就業者を構成します。これらの不完全就業者が，サンプル国においてどのように相互に関連しているかを示すために，三角図を利用できます。\n\n# Rパッケージggternをインストール\ninstall.packages('ggtern')\n\n# ggternの読みこみ\nlibrary(ggtern)\n\nこの例では香港，日本，韓国，シンガポールおよびアメリカ合衆国の不完全就業状態を比較します。\nステップ1: 5カ国のデータのダウンロード\nそこで最初に，ILOSTATから2013年のデータをダウンロードし，labor3と名前をつけたオブジェクトに容れます。そのさい，get_ilostat()の引数filters = を使って細かな指定をしていますが，もちろん，filtersを使わずに，3カ国のデータをダウンロードした後でもdplyrを使って同じ処理をすることできます。\n\n# 5カ国のデータをダウンロード\nlabor3 &lt;- get_ilostat(id = c('EIP_WDIS_SEX_AGE_NB_A',\n                               'UNE_TUNE_SEX_AGE_NB_A',\n                               'TRU_TTRU_SEX_AGE_NB_A'), \nfilters = list(\n      ref_area = c('HKG','JPN','KOR','SGP','USA'), #国指定\n      source = 'BA', # ソースをBAに指定\n      sex = 'SEX_T', # 性別を男女計\n      classif1 = 'YGE15', # \n      time = '2013')  # 2013年に限定\n  )    \n\nこれでデータをダウンロードできました。\nステップ2: データの編集-変数の選択，指標コードをラベルに変更，wide形式への変換\n最初に, select()関数を使って必要な変数－国を表現するref_area, 指標変数indicator, および観察値obs_value－だけピックアップし ておきます。\n\nlabor3 &lt;- labor3 |&gt; \n select(ref_area, indicator,obs_value)\n\n次に，オリジナルなindicator変数名ではそれが何を表現しているのか分かりませんので，label_ilostat()関数を使ってコードを，ラベルに変更します。label_ilostat()はコードとラベルを切り替える関数です。\n\n# label_ilostat()の書式\nlabel_ilostat(\n x,\n dic = NULL,\n code = NULL\n)\n\n\nx : ラベルをつける文字・ファクターベクトルあるいはデータフレーム\ndic: NULL（デフォルト）の場合，辞書名はデータフレームの列名から取得される\ncode: どのコード列が保持されるかを示す列名のベクトル. “all”とした場合，すべてのコードが保持される\n\n\nlabor3 &lt;-labor3 |&gt; \nlabel_ilostat()\n\nこの結果，次のようにindicator変数がラベルに変わります。なお，変数名もindicator.label, ref_areaもref_area.labelに変わっていることが分かります。\n\nこれで基本的にデータの準備はできましたが，三角図を描く際に以下の表[wide形式の不完全就業者データセット]で示したような形式に変換しておく必要があります。なお，この場合，indicator.labelの変数名も変更しています。\n\n\n\nwide形式の不完全就業者データセット\n\n\n不完全就業者データをwide形式に変換するために，dplyrのpivot_wider()6を関数を使います。この関数は列を増やし，行を減らすことによってデータセットをwiderにします。\n\n# データセットlabor3をwide形式に変換し，オブジェクトwide_labor3に容れる.\n\nwide_labor3 &lt;- labor3 |&gt; \n  pivot_wider(\n    names_from = indicator.label,\n    values_from = obs_value\n  ) |&gt; \n  # rename()関数を使って変数名を変更\n  rename(D = `Discouraged job-seekers by sex and age (thousands)`,\n         U = `Unemployment by sex and age (thousands)`,\n         T = `Time-related underemployment by sex and age (thousands)`)\n\nステップ3: データの可視化- 三角図の作成\nggternはggplot2ファミリーであり，ggplotと同じ書式で作図ができます。それではggternで不完全就業者の三角図を描いてみましょう。\n\nggtern(data = wide_labor3, aes(D,U,T, colour = ref_area.label))+\n  geom_point(size = 4)+\n  theme_rgbw()+\n  labs(x = \"Dis-\\ncouraged\",\n       xarrow =\"Dicouraged\\njob-seekers\",\n       y=\"Unemployment\",\n       z=\"Time-\\nrelated-\",\n       zarrow = \"Time-related\\nunderemployment\",\n       title=\"Labor underutilization (%) ,2013\",\n       colour = \"\")+\n  theme_rgbw()\n\nこの結果，わずか数行のスクリプトで以下のような三角図が描かれます。\n\nこのグラフによって不完全就業者に占める３つの不完全就業者カテゴリーの比率を，視覚的に理解できます。たとえば，日本はシンガポールと似た特徴をもち，不完全就業者に占める失業者の割合は低く，時間関連不完全就業者の占める比率が高い，ということが理解されます。他方，韓国とアメリカは就業意欲失業者の比率，失業者の比率が他の国よりいくぶん高く，時間関連不完全就業者の比率が低いという特徴を持っているようです。",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "MacroData.html#ec-annual-macro-eocnomicデータベースameco---ameco",
    "href": "MacroData.html#ec-annual-macro-eocnomicデータベースameco---ameco",
    "title": "R & Socio Econ",
    "section": "2.4 EC Annual macro-eocnomicデータベース(AMECO) - ameco",
    "text": "2.4 EC Annual macro-eocnomicデータベース(AMECO) - ameco\nAMECOはEUの年次マクロ経済データ集です。EU地域のマクロデータが主ですが，それ以外のOECD諸国も含まれており，40カ国を超える国のマクロデータが提供されています。AMECOサイトからはcsv,xlsx形式等でデータをダンロードすることもできます。\n\n2.4.1 amecoのインストールと読み込み\namecoはデータパッケージです。インストールし，読み込むと利用可能になります。Rパッケージamecoのインストールはinstall.packages(” “), ロードはlibrary()関数を使います。\n\n# amecoのインストール\ninstall.package(\"ameco\")\n\n# amecoのロード\nlibrary(ameco)\n\nこれでデータが利用可能になります。glimpse()関数を使ってデータをみると，8変数列×2,018,002行から構成されていることが分かります。\n\n# データ構造の概観\nglimpse(ameco)\n\nどのようなデータセットが含まれているかは，sub.chapter変数を見ればわかります。そこで同じデータセットを表示させないように，unique( )関数を利用し，sub.chapterを見てみましょう。\n\nunique(ameco$sub.chapter)\n\nこれによって102のデータのタイトルを確認できます。たとえば，93行目の”02 Factor productivity, total economy”",
    "crumbs": [
      "2. マクロ・データ"
    ]
  },
  {
    "objectID": "introduction.html#rstudio-tidyverseを使う",
    "href": "introduction.html#rstudio-tidyverseを使う",
    "title": "R & Socio Econ",
    "section": "",
    "text": "Rのデータ処理には，統合開発環境のデファクト・スタンダードとも言うべきRStudioが欠かせません。以下の図はスクリプト・エジターを開いたときのRStudioの画面です。\n\n\n\nsource: Wickham, et al. (2023) p.86\n\n\n左側の[Editor]画面と[Console]画面が作業場となります。Rになれると，ほとんどの作業が[Editor]画面でのスクリプトの記述に費やされることと思います。",
    "crumbs": [
      "1. RStudio, tidyverseを使う"
    ]
  },
  {
    "objectID": "industry.html#footnotes",
    "href": "industry.html#footnotes",
    "title": "5 産業連関データ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFeas E (2024). exvatools: Value Added in Exports and Other Input-Output Table Analysis Tools. R package version 0.8.0, https://CRAN.R-project.org/package=exvatools.↩︎\n付加価値貿易の分析については猪俣哲史著『グローバル・バリューチェーン－新・南北問題へのまなざし』日本経済新聞社，2019を参照してください。↩︎\nexvatoolsの利用法については開発者Feas E (2023) exvatools: Value Added in Exports and Other Input-Output Table Analysis Tools, R Journal Vol. 15/4にもとづいています。↩︎\n詳細についてはexvatoolsのReference manualを参照してください。↩︎",
    "crumbs": [
      "5 産業連関データ"
    ]
  },
  {
    "objectID": "industry.html#国際産業連関分析ツール---exvatoolsindustry-1",
    "href": "industry.html#国際産業連関分析ツール---exvatoolsindustry-1",
    "title": "5 産業連関データ",
    "section": "",
    "text": "今日の国際貿易においては生産工程のグローバル化にともない中間財の輸出入が完成品の輸出入以上に盛んに行われています。従来の貿易統計ではそうしたグローバリゼーション現象を十分に捉えることはできませんでした。貿易統計では輸入品の最終出荷地をその原産地として記録します。有名なiPhoneの例では中国が最終出荷地（原産地）ですが，iPhoneという完成品が部品を含めてすべて中国で製造されたかのように扱うことは，生産工程がグローバル化した現代では妥当な取り扱いとは言えません。異なる国の異なるセクターが互いにどのように相互作用しているかを捉えるためには国際産業連関表を利用した付加価値貿易の分析が不可欠です2。\n簡単な数値例で考えてみましょう。中国が日本から90ドル分の中間財タッチパネルを輸入し、アメリカに最終完成製品iPadを100ドルで輸出したとします。これまでのグロスベースの貿易統計では日本の貿易統計には中国への輸出によって生み出された90ドルの価値が計上されます。同時に、中国の貿易統計にはアメリカに完成品iPadを輸出したことによって100ドルの価値が計上されます。この場合、日本が生み出した90の付加価値が、中国の輸出にも含まれて計算され、二重に計上されてしまいます。付加価値貿易では日本の90、中国の（二重計算を避けた）10の付加価値が別個に計上され、各々がアメリカへの輸出となります。\n本項で紹介するRパッケージexvatoolsはこれまで紹介してきたようなデータへのアクセス・取得のツールではではありませんが，付加価値貿易の分析を容易にする数多くの機能を備えた非常に優れたパッケージです3。\nexvatoolsは以下の投入産出表を扱うことができます：\n\nOECDの付加価値取引データベース(TiVA)が基づいているOECD諸国間の投入産出表(OECD Inter-Country Input-Output: ICIO)\n世界投入産出表(WIOD)\nFIGARO EU投入産出表(EU IC-SUIOT)\nADBマルチリージョン投入産出表(ADB MRIO)\n\n\n\n\n# exvatoolsのインストール\ninstall.packages(\"exvatools\")\n\n# exvatoolsのロード\n library(exvatools)\n\nexvatoolsは，(1)標準的な国際的な投入産出表の原データ, (2) exvatoolsパッケージに含まれるテストデータ, (3)カスタムデータの３種類のデータから基本的な投入産出行列－投入係数行列やレオンチェフの逆行列など－のリストを作成します。\nもちろん学習目的にはパッケージ付属の(2)の投入産出データも有益ですが，じっさいに分析に利用するのは(1)標準的な国際的な投入産出表の原データだと思われます。以下の説明では(1)の取り扱いを紹介して行きます。上述のように，exvatoolsでは現在４つのソース－OECD ICIO, WOID, EU IC-SUIOT, およびADB MRIO－がサポートされています。データはカンマ区切りファイル(.csv)、Excelファイル(.xlsx)、またはRデータファイル(.rData)を含む圧縮ファイルとしてサポート機関のWebページに公開されており，直接ダウンロードできます。\n1) OECD ICIO\nOECD ICIOテーブルを使用する場合は、ICIO Webページからソースファイル2016-2020.zipをコンピュータにダウンロードします。ここで注意を要するのは，make_wio()関数を利用したwioクラスのオブジェクトの作成にあたってはダウンロードしたファイルがzip形式でなければならないということです。そこでzipを解凍せずに，フォルダに保存します。\nそれではevatoolsのmake_wio()コマンドを使用し，ソースファイルすなわちダウンロードしたzipファイルから標準的な投入産出行列を作成します。make_wio()の基本的な文法は次のようになります：\n\nmake_wio(\n  wiotype = \" \",\n  year = NULL,\n  src_dir = NULL,\n  quiet = FALSE\n)\n\nmake_wio( )は上述のように，５つの引数をとりますが，とくにwiotypeが重要です。wiotypeの引数は具体的には以下のようになります,\n\nwiotype = \" \"には利用する投入産出表の名称と版editionを指定する，以下のような文字列を入力します：\n\nOECD ICIO表の2023年版（1995-2020年）については \"icio2023\"，同一版の小型版については \"icio2023s\"\n2016年版WIOD表（2000-2014）については \"wiod2016\" . 長期WIOD表（1965-2000年）の2022年版については \"lrwiod2022\". 後者は歴史分析に有益.\nFIGARO EU投入産出表（EU IC-SUI）の2023年版, industry-by-industry(2010-2021)については\"figaro2023i\", また同データベースのproduct-by-productバージョンについては\"figaro2023p\".\n2023年版の62カ国ADB MRIO表の2023版については\"mrio2023\", 不変価格の同一版については\"mrio2023k\", 72カ国版（2022年まで）については\"mrio2023x\".\n\nyear = : 参照年を指定する整数を入力. NULL(デフォルト)の場合，利用可能な最新年が指定される.\nsrc_dir = : 国際投入産出表のソースファイルが保存されているユーザーのディレクトリ（フォルダ）を指定する文字列を入力. ソースファイルは通常zipファイルもしくはcsv, xlsxファイル. make_wio()を利用するさいにはファイルの名称を変更しないこと. またscr_dirが指定されない場合，make_wio()は作業ディレクトリ内を探します.\n\n以下の例では，wiotypeに”icio2023”, yearに”2020”, src_dirに”C:/Users/data”（ソースzipファイルが保存されている架空のフォルダ）を指定しています。\n\nwio &lt;- make_wio(wiotype = \"icio2023\", \n                year = 2020, \n                src_dir = \"C:/Users/data\")\n\nこれによってexvatoolsが，zipファイルから.csvファイルを取り出し，基本的な投入産出行列を作成します。そしてデータを割り当て演算子（←）によってwioと名付けたオブジェクトに格納しています。これによって基本的な投入産出テーブルのリストからなるwioクラスオブジェクトが作成されます。。\n作成されたwioオブジェクトの内容はsummary()関数でチェックできます。\n\nsummary(wio)\n\nsummary(wio)の実行によって以下のリストがコンソール画面に表示されます.\n\n\n\n一部のみ表示.\n\n\n3645x3645次元の中間財投入行列Zをはじめとし，投入産出分析で利用される行列が作成されます。たとえば，以下の例で利用するグローバル・レオンチェフ逆行列はBという名前になっています。コンソール画面を下にスクロールすると，81カ国，45のセクターが利用可能であることが分かります。また，需要項目として6つが提供されていることも分かります。\n2) 世界投入産出表WIOD\nWIODについては”wiod2016”（バージョン2016、2000年から2014年）、“wiod2013”、“lrwiod2022”（ロングランWIOD表、バージョン2022、1965年から2000年）が含まれています。これらはすべて、フローニンゲン大学のGrowth and Development CentreのWebページから入手可能です。\nOECD ICIOの場合と同様に，ダウンロードしたzipファイルを自分のPCのワーキングディレックトリに保存しておきます。以下の例ではmake_wio()関数の引数src_dir() = NULLです，つまり指定していません。指定しない場合，make_wio()は現在のワーキングディレクトリをチェックします。\n\nwiod &lt;- make_wio(wiotype = \"wiod2016\", year = 2014)\n\nこれによりwioクラスのリスト（基本的な投入産出行列のリスト）を容れたオブジェクトwiodが作成されます。summary()で確認してみましょう。\n\nsummary(wiod)\n\n\n\n\n一部のみ表示.\n\n\n3) FIGARO EU投入産出表\nFIGARO EU投入産出テーブルでは製品×製品product by productと産業×産業industry by industryの２つが利用可能です。ここでの例ではproduct by productを利用します。最初に，WebページFigaro tables: EU inter-country supply, use and input-output tables→ CSV matrix format (FIGARO 2023 edition)→ Annual EU inter-country input-output tables product by producto の2021をダウンロードし，作業ディレクトリに保存しておきます。ファイル名はmatrix_eu-ic-io_prod-by-prod_23ed_2021.csvです。\n2つのFIGARO EU投入産出テーブルに対応して引数wiotypeには次のいずれかを指定します。\n\nproduct by productの場合　wiotype = “figaro2023p”\nindustry by industryの場合　wiotype = “figaro2023i”\n\nここではproduct by productを利用しますから，引数wiotype = \"figaro2023p\"を入力します。これによってcsvファイルからmake_wio()関数が投入産出分析のために必要な基本的な行列を作成します。\n\nfigaro &lt;- make_wio(wiotype = \"figaro2023p\", year = 2021)\n\nfigaroと名前をつけたオブジェクトの中に基本的な行列が保管されます。結果をsummary(figaro)でみると，次のような行列の一覧が表示されます。\n\n4) ADB MRIO投入産出表\n最初に，ADB Multiregional Input-Output Databaseからデータをダウンロードします。ADBではxlsx形式でデータが提供されています。ここでの例ではADB, MRIO, 62economicesバージョンの\"ADB MRIO(2014)(Updated on June 2022)\"xlsxファイルをダウンロードします。その上で，make_wio()関数を使って行列を作成し，mrioと名前をつけたオブジェクトに容れます。\n\nmrio &lt;- make_wio(wiotype = \"mrio2023\", year = 2014)\n\nsummary(mrio)を使って行列のリストを表示させると，以下のようになります。\n\n\n\n一部のみ表示.\n\n\n最後に他の投入産出データを読み込む際にも利用するmake_wio()関数の引数wiotypeに指定するzipファイル（もしくはcsv, Excelファイル名）とエジション名の対応をまとめておきます。\n\n\n\n\n\n\n\n\n機関名\nzip名（csv, xlsxファイル名）\nエジション名\n\n\n\n\nOECD ICIO\nxxxx-xxxx.zip\n“icio2023”\n\n\nOECD ICIO\nICIO_XXXX-XXXX.zip\n“icio2021”\n\n\nOECD ICIO\nICIO2018_XXXX.zip\n“icio2018”\n\n\nOECD ICIO\nICIO2016_XXXX.zip\n“icio2016”\n\n\nWIOT\nWIOTS_in_R.zip\n“wiod2016”\n\n\nEU\nmatrix_eu-ic-io_prod-by-prod_23ed_2021.csv\n“figaro2023p”\n\n\nEU\nmatrix_eu-ic-io_ind-by-ind_23ed_2021.csv\n“figaro2023i”\n\n\nADB\nADB-MRIO-2014_Mar2022.xlsx(62カ国版)\n“mrio2023”\n\n\nADB\nADB-MRIO-2014_(72カ国版)\n“mrio2023x”\n\n\nADB\nADB-\n“mrio2023k”\n\n\n\nここまで４つの投入産出テーブルをダウンロードし，make_wio()関数を使ってダウンロードしたデータから投入産出分析に必要な行列の作成方法を示してきました。次に，そうした行列を使ったいくつかの操作の例を示して行きます。\n\n\n\nexvatoolsは、国際投入産出表を取り扱う操作を容易にする複数のコマンドを提供しています4。一例を示すと次のような関数があります：\n\ndmult()：対角行列を行列によって乗数倍する.\nmultd()：行列を対角行列によって乗数倍する.\nhmult()：行列のアダマール積\nbkd()：ブロック対角行列－対角ブロックがゼロではなく，非対角ブロックがゼロである行列－を作成.\nbkoffd()：ブロックオフ対角行列－対角ブロックがゼロであり，非対角ブロックがゼロでない行列－を作成.\nrsums(): 行を合計する\ncsums(): 列を合計する\nsumnrow(): 行列のn番目の行を合計する\nsumncol(): 行列のn番目の列を合計する\n\nこうした関数を利用して実際に産業連関表を使って作業してみます。以下の例ではOECD ICIOの投入産出テーブルから作成した，オブジェクトwioに格納された行列を利用し，逆行列の操作，付加価値輸出の計算を行っています：\n\n例1 グローバル・レオンチェフの逆行列\n例2 付加価値輸出\n\n例1　グローバル・レオンチェフ逆行列\nレオンチェフ逆行列を利用した需要誘発モデルの基本的な行列は、すでに示したコマンドmake_wio()によって原データから簡単に取得できます。\n\nwio &lt;- make_wio(wiotype = \"icio2023\", year = NULL, src_dir = NULL, quiet = FALSE)\n\nsummary(wio)の表示内容をみると、Bがグローバル・レオンチェフ逆行列（Global Leontief inverse)であり、またYが最終需要です。BもYもmake_wio()関数で作成された行列です。class()関数でオブジェクトwioがwioクラスであり，BもYも行列であることを確認できます。なお，wio$Bは「wioオブジェクトの中の行列B」を指しています。\n\nレオンチェフ逆行列は，最終需要が1単位増加したときに，直接間接に誘発される生産量を示します。したがってグローバル・レオンチェフ逆行列はある国のあるセクターにおいて最終需要が1単位増加したときに，他セクターの生産量がどれだけ誘発されるか－簡単に言えば，他産業の生産に与える影響の大きさ－を示します。\nmake_wio()関数で作成された行列リストにおいて，Aが投入係数行列，Xが生産，最終需要がYです。したがって国際投入産出テーブルは\n\\(AX + Y = X\\)\nと表現できます。ここから最終需要と生産の関係は\n\\(X = (I-A)^{-1}Y\\)\nこの関係は技術を一定とし，一定水準の最終需要Yのために必要とされる，各国の各セクターの産出高Xがいかにして生み出されるかを示しています。ここで\\((I-A)^{-1}\\)はグローバル・レオンチェフ逆行列であり，作成された行列リストにおいてはBで表記されています。したがって生産Xはグローバル・レオンチェフ逆行列Bと最終需要Yの積と同じになります。\n行列の積の演算子は%*%です。レオンチェフ逆行列と最終需要の積で生産を求めます。そしてその結果をBYと名前をつけたオブジェクトに容れます。BYも行列です。\n\nBY &lt;- wio$B %*% wio$Y\n\nBYとXが一致することを確認してみてください。\nグローバル・レオンチェフ行列の行和と列和\n次に，グローバル・レオンチェフ行列の行和を求めみます。このためにはrsums()関数を利用します。文法は以下のようになります：\n\nrsums(df, col_name = NULL)\n\n・引数dfは行と列を持つ行列の名前を入力します。\n・引数col_nameは作成される列につけられる名前・文字列です。\nこれを使ってグローバル・レオンチェフ行列の行の合計を求めます。 wio$Bは”オブジェクトwioの中の行列B”を意味します，またcol_name =で列の名前をFLにしています。\n\n# グローバル・レオンチェフ行列の行和\nrsums(wio$B, col_name = \"FL\")\n\nこれによってセクターと各行の和を得ることができます。たとえば，以下の表ではARG_01T02はアルゼンチン（ARG）の’Agriculture, hunting, forestry’産業, ARG_03は同じくアルゼンチンの’Fishing’産業を意味しています。2021版ではISIC Rev.4をベースにした45産業、17製造業セクター,20サービス産業セクターのデータが収録されています。\n\nこの行の和を行和全体の平均値で除した比率は「感応度係数」と呼ばれています。\n列和もcsums()関数を使って同じように求めることができます。\n\n# グローバル・レオンチェフ行列の列和\ncsums(wio$B, row_name = \"BL\")\n\nこれによって１行×3645列の，各国の各産業に対応する列和が得られます。レオンチェフ逆行列の列和は後方連関(backward linkage)指数として知られているものです。ちなみに，この産業別の列和を列和全体の平均値で除した比率を求めると，「影響力係数」が求めることができます。\n例2　付加価値輸出を計算する\n国外に吸収される付加価値(付加価値輸出)を計算するには、1)対角化された付加価値係数行列（wioではWによって表記）をグローバル逆行列Bをによって乗数倍し，2)その結果を最終需要行列Yをによって乗数倍します。こうした操作によって最終需要によって誘発される付加価値が計算できます。\n1)の操作には対角行列と行列の積が必要となります。このためにはdmult()関数を利用します。使い方は\n\ndmult(matrix1, matrix2)\n # matrix1は対角行列\n # matrix2は通常の行列\n\ndmult()関数は対角行列matrix1をベクトルに変換します、つまり対角行列matrix1を、matrix2のすべての行によって水平に乗数倍します。\n2) 需要によって誘発されるすべての付加価値を計算するために最終需要Yを掛けます:\n\nVBY &lt;- dmult(wio$W, wio$B) %*% wio$Y\n\nこれによって海外に吸収される付加価値の大きさが分かります。3645行（各国の産業部門数）×77列（Rest of Worldを含めた国の数）の大きな行列であるためコンソール画面では見づらいためViw(VBY)関数によって表示してみます。\n\n\n\n一部のみ表示.\n\n\nまた海外に吸収される付加価値だけに注目する場合，VBY行列のうちの非対角行列ブロックの表示だけで十分です。その表示ためにはbkoffd()関数を利用します。\n\nbkoffd(VBY)\n\nこれによって対角行列部分，たとえばアルゼンチンの産業を示す行とアルゼンチンという国を示す列のセルはゼロとなり，非対角部分の値だけが表示されます。\n\n\n\n輸出に体化された付加価値の分解にあたっていくつかの方法が提案されていますが，以下のようなステップで分解されます：\n最初に総輸出(Gross Exports: EXGR)を，国内コンテンツ（Domestic Content: DC）と外国コンテンツ（Foreign Content: FC）とに分離し、次に国内付加価値（Domestic Value Added: DVA）と外国付加価値（Foreign Value Added: FVA）を特定し、これらを国内ダブルカウント（Domestic Double Counting: DDC）と外国ダブルカウント（Foreign Double Counting: FDC）から分離します。そして最後に国内付加価値を，輸出された付加価値（Value added exported: VAX）とリフレクション（Reflection: REF）とに分割します（以下の図参照）。\n\n\n\nFeas E (2024), p.223\n\n\nexvatoolsを使って韓国の付加価値輸出の分解をおこなってみましょう。このためには関数make_exvadec()を使います。この関数によって異なった分解方法を使ってある１つの国もしくは国グループの輸出における付加価値を分解することができます。文法は以下のようになります：\n\nmake_exvadec(\n wio_object,\n exporter = \"all\",\n method = \"bm_src\", \n output = \"standard\",\n quiet = FALSE\n)\n\n基本的な引数は５つです。\n\nwio_object: make_wio()関数を使って取得したwioクラスのオブジェクト（標準的な世界投入産出表）を指定.\nexporter: 国または国グループを示す文字列（たとえば，“USA”,“NAFTA”など）. デフォルトは”all”であり，利用できるすべての国に関して輸出における付加価値の分解を生み出す.\nmethod: 輸出付加価値export VAの分解方法を指定する文字列.分解法としては以下の方法が利用可能.\n\n“bm_src”: Borin and Mancini(2023)にもとづく分解法. ソースベース. デフォルト\n“bm_snk”: Borin and Mancini(2023)にもとづく分解法. sinkベース.\n“wwz”: Wang et al. (2013)にもとづく分解法\n“kww”: Koopman et al. (2014)にもとづく分解法\n“my”: Miroundot and Ye (2021)にもとづく分解法\n“oecd”: OECD\n\noutput: アウトプットタイプを指定する文字列. 7つのアウトプットが用意されているが，“standard”(デフォルト)で十分.output = “standard”によってDC, DVA,DDC, FC,FVA,VAXが出力される.\nquiet : ブール値であり，TRUEの場合，メッセージは非表示. デフォルトはFALSEである。つまりメッセージが表示される.\n\nそれではmake_exvadec()関数を使って韓国の付加価値輸出の分解をおこなってみます。\n\nkor_exvadec &lt;- make_exvadec(wio, exporter = \"KOR\", method = \"bm_src\")\n\nこれを実行すると，韓国の付加価値分解の結果が表示されると同時に，結果がkor_exvadecと名付けたオブジェクトの中に格納されます。\n\n結果から総輸出(EXGR)を100パーセントとした場合，付加価値輸出(VAX)が69.4パーセントと高い割合を占めることが理解されます。韓国経済においては最終完成品の輸出よりも，中間財・部品の輸出の価値がきわめて高水準だということが推測されます。さらに，グローバルバリューチェーンに関連した貿易(GVC)が47.37パーセントを示しており，韓国経済がグローバルサプライチェーンに大きく関わっていることも分かります。\nexvatoolsの優れた点として分解を行なったのち，さらにget_exvadec_bkdown()関数を使ってセクターや仕向け国destinationを指定することもできます。以下の例はセクターとして製造業 “NANUF”，仕向け国 importerとして中国 “CHN”を指定しています。\n\nget_exvadec_bkdown(kor_exvadec, exporter = \"KOR\",\nsector = \"MANUF\", importer = \"CHN\")\n\nこれを実行すると，中国に向けた製造業輸出の付加価値分解が可能となります。\n\n結果を見ると，中国への韓国製造業の輸出総額のうち66.80が付加価値輸出だということが理解できます。\nOECDのTiVAデータベースと同様の一般的な貿易指標（輸出，輸入，付加価値，生産等）のリストを取得したい場合は引数にmethod = \"oecd\", output = \"tiva\"とし、make_exvadec()を実行すると、取得できます。\n\n kor_tiva &lt;- make_exvadec(wio, \n                  exporter = \"KOR\",\n                  method = \"oecd\",\n                  output = \"tiva\")\n\n\nここにはGVCへの参加度指標も出力されます。自国で生産された中間財が，国外の輸出財生産により多く投入されることはGVCへの前方への参加度が高い理解され，GVCへの前方参加度(Forward participation in GVC)と呼ばれます。他方，自国の輸出財の生産にあたって輸入中間財がより多く投入されることはGVCへの後方への参加度が高いと解釈されます。これはGVCへの後方参加度(Backward participation in GVC) と呼ばれます。\n韓国の例をみると，GVCへの後方参加度は29.70, 他方GVCへの前方参加度は21.66であり，いずれの参加度も比較的高いのですが，後方への参加度の方が高く，韓国経済の輸出財生産にあたっては他国からの輸入中間財が多く投入されていることが理解できます。\n\n\n\nmake_exvadec()の分解では、付加価値がどこで生み出され(origin)、どこに行き着く(destination)かを分析することはできませんが，make_exvadir()関数を利用すれば、この点も分析できます。\nふたたび、韓国の例を使って考えてみます。韓国の輸出における外国コンテンツForeign Content in VA(FC)は171125.82でした。この国外コンテンツ(FC)はどこから来たのでしょうか。付加価値輸出の地理的な原産地、セクター別原産地の情報はmake_exvadir()で取得できます。\n\nkor_exvadir &lt;- make_exvadir(wio, \n  exporter = \"KOR\",\n  va_type = \"FC\",\n  flow_type = \"EXGR\")\n\nsummary(kor_exvadir)によって詳細を表示させると、\n\n出力結果をみると，原産地origin国としてROWも含めて77カ国，セクターとしては45セクターが利用可能であることが分かります。\nFCデータはオブジェクトkor_exvadirの中に収納されており，kor_exvadir$FCで表示させることができます。head()関数を使って最初の数行だけ出力します。\n\nkor_exvadir$FC |&gt; head()\n\n\nこれによって韓国の付加価値輸出における外国コンテンツ(FC)がどの国の，どのセクターから生まれたものかが理解できます。",
    "crumbs": [
      "5 産業連関データ"
    ]
  }
]